{"isloaded":true,"notesobj":{"/Users/wzq/wk/blog/site/Unbuntu/images/fix-the-no-wi-fi-adapter-found-error-on-ubuntu":{"id":"/Users/wzq/wk/blog/site/Unbuntu/images/fix-the-no-wi-fi-adapter-found-error-on-ubuntu","title":"fix-the-no-wi-fi-adapter-found-error-on-ubuntu","content":"","file_path":"/Users/wzq/wk/blog/site/Unbuntu/images/fix-the-no-wi-fi-adapter-found-error-on-ubuntu","cover":"","created_at":"2022-10-10T11:43:50.808Z","updated_at":"2022-10-10T11:43:50.809Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/GCC/img":{"id":"/Users/wzq/wk/blog/site/GCC/img","title":"img","content":"","file_path":"/Users/wzq/wk/blog/site/GCC/img","cover":"","created_at":"2022-10-10T11:43:50.804Z","updated_at":"2022-10-10T11:43:50.804Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/GCC":{"id":"/Users/wzq/wk/blog/docs/GCC","title":"GCC","file_path":"/Users/wzq/wk/blog/docs/GCC","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-10-09T05:23:18.000Z","updated_at":"2022-10-10T11:54:16.000Z"},"/Users/wzq/wk/blog/docs/Vagrant":{"id":"/Users/wzq/wk/blog/docs/Vagrant","title":"Vagrant","file_path":"/Users/wzq/wk/blog/docs/Vagrant","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-10-11T07:53:21.000Z","updated_at":"2022-10-11T07:54:51.000Z"},"/Users/wzq/wk/blog/docs/GCC/GCC compiling processes.md":{"id":"/Users/wzq/wk/blog/docs/GCC/GCC compiling processes.md","title":"GCC compiling processes","file_path":"/Users/wzq/wk/blog/docs/GCC/GCC compiling processes.md","cover":"","is_daily":false,"is_dir":false,"content":"","created_at":"2022-10-09T05:24:38.000Z","updated_at":"2022-10-10T17:01:55.000Z"},"/Users/wzq/wk/blog/docs/GCC/GCC Linking.md":{"id":"/Users/wzq/wk/blog/docs/GCC/GCC Linking.md","title":"GCC Linking","file_path":"/Users/wzq/wk/blog/docs/GCC/GCC Linking.md","cover":"","is_daily":false,"is_dir":false,"created_at":"2022-10-09T14:20:45.000Z","content":"本练习采用下面四个C文件， addvec.c  multvec.c  和 vector.h 是库文件， main.c是引用库函数的文件\n\nvector.h\n\n```c\n/* prototypes for libvector */\nvoid addvec(int *x, int *y, int *z, int n);\nvoid multvec(int *x, int *y, int *z, int n);\nint getcount();\n```\n\naddvec.c\n\n```c\nint addcnt = 0;\n\nvoid addvec(int *x, int *y, int *z, int n)\n{\n  int i;\n\n  addcnt++;\n\n  for (i = 0; i < n; i++)\n    z[i] = x[i] + y[i];\n}\n```\n\nmultvec.c\n\n```c\nint multcnt = 0;\n\nvoid multvec(int *x, int *y, int *z, int n)\n{\n  int i;\n\n  multcnt++;\n\n  for (i = 0; i < n; i++)\n    z[i] = x[i] * y[i];\n}\n```\n\nmain.c\n\n```c\n#include <stdio.h>\n#include \"vector.h\"\n\nint x[2] = {1, 2};\nint y[2] = {3, 4};\nint z[2];\n\nint main()\n{\n  addvec(x, y, z, 2);\n  printf(\"z = [%d %d]\\n\", z[0], z[1]);\n  return 0;\n}\n```\n\n## Linking with Static Libraries\n\n编译库文件，并打包成静态库\n\n```bash\n#  create a static library libvector.a\ngcc -c addvec.c multvec.c\nar rcs libvector.a addvec.o multvec.o\n```\n\n构建引用静态库的可执行文件\n\n```bash\n# build the executable\ngcc -o prog main.c ./libvector.a\n```\n\n或者用下面的命令也是一样的\n\n```bash\n \ngcc -o prog main.c  -L.  -lvector\n```\n\n参数‘-lvector’是libvector.a的简略表示方式，参数'-L.' 告诉linker在当前目录下寻找libvector.a.\n\n执行命令 `objdump -d prog` 可以发现只有addvec模块被合并到最后的prog可执行文件中了，而multvec模块 里的方法因为没有被引用到所以没有被合并进去，这样做可以减小可执行文件的大小\n\n运行\n\n```bash\n$ ./prog \n  z = [4 6]\n```\n\n如果链接的过程加 '-static' 选项表示针对系统库引用也以静态库的方式引入. The '-static' argument tells the compiler driver that the linker should build a fully linked executable object file that can be loaded into memory and run without any further linking at load time. 如下所示：\n\n```bash\ngcc -static -o prog main.c -L. -lvector\n```\n\n## Dynamic Linking with Shared Libraries\n\n静态库云动态的库区别是什么呢？\n\n\n1. 引用静态库编译生成的是一个完全链接的执行文件，运行的时候加载器可以直接拷贝到内存运行；而引用动态共享库编译生成的是一个部分链接的可执行文件，加载器在加载该文件的时候需要先交由链接器进行进一步链接处理（reloacation），链接处理完后才可运行。\n2. 引用静态库编译，静态库中被目标执行文件所引用的模块都会被拷贝到目标执行文件中来；而引用动态库进行编译动态库里被引用的模块不会被拷贝，在运行时动态库里面的模块只有一份全局拷贝，所有执行文件在运行时都引用同一份拷贝。\n\n下面删除'libvector.a'， 然后测试一下动态链接库的构建过程。\n\n[编译可共享的libvector.so](http://xn--libvector-pm7n77vz3hlv5jrczaz53b.so) 库文件\n\n```bash\ngcc -shared -fpic -o libvector.so addvec.c multvec.c\n```\n\nThe '-fpic' flag directs the compiler to generate position-independent code. The '-shared' flag directs the linker to create a shared object file.\n\n我们已经创建完成了so库文件，然后就可以把它链接的我们的程序中。\n构建引用动态库的可执行文件\n\n```bash\ngcc -o prog2 main.c ./libvector.so\n```\n\n这就构建了一个可以在运行时进行链接的可执行文件。\n\n执行`ldd prog2`查看动态链接库的链接状态。\n\n```bash\n$ ldd prog2\n      linux-vdso.so.1 (0x00007ffc79fa5000)\n      ./libvector.so (0x00007f472cad5000)\n      libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f472c6e4000)\n      /lib64/ld-linux-x86-64.so.2 (0x00007f472ced9000)\n```\n\n运行\n\n```bash\n$ ./prog2\n  z = [4 6]\n```\n\n但是假如我用下面的方式对用动态库进行链接，\n\n```bash\ngcc -o prog3 main.c -L. -lvector\n```\n\n或者,同样是是前面的那种方式，但是libvector.so前面的路径'./'去掉\n\n```bash\ngcc -o prog2 main.c libvector.so\n```\n\n会发生什么呢？\n\n运行，发现报错了\n\n```bash\n$ ./prog3\n  ./prog3: error while loading shared libraries: libvector.so: cannot open shared object file: No such file or directory\n```\n\n在命令行中输入`ldd prog3`，查看链接状态\n\n```bash\n$ ldd prog3\n      linux-vdso.so.1 (0x00007ffcf5ba8000)\n      libvector.so => not found\n      libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f15d3199000)\n      /lib64/ld-linux-x86-64.so.2 (0x00007f15d378c000)\n```\n\n发现“[libvector.so](http://libvector.so)”那里显示“not found”，[意思是找不到libvector.so](http://xn--libvector-kc6n777ai75b4tc30g8uq.so)。为什么会这样呢，原来通过这种方式编译生产的目标执行文件没有路径信息，‘-L.’仅仅是在编译的时候用到的，在加载运行的时候链接器先要到系统设定的动态链接库查找目录中查找引用到的so文件以进行链接处理（relocation），而我们的libvector.so文件所在目录不在系统设定的动态链接库查找目录中，所以找不到。静态链接库为什么不会出现这个问题呢， 因为引用静态链接库进行编译时，生成的是一个完全链接的可执行文件，该文件是可以直接加载（拷贝）到内存运行的；而引用动态链接库进行编译生成的是一个部分链接的可执行文件，加载器在加载这个可执行文件的时候，要先交给链接器进行链接处理（relocation）,链接处理完成后再开始运行这个程序。\n\n如何解决呢，因为动态链接库查找目录是在“/etc/ld.so.conf”文件中设定的，可以把“./libvector.so”所在目录的路径加入到系统的“/etc/ld.so.conf”文件中，加入之后还需要执行`sudo ldconfig` 命令让新路径生效。\n\n或者， 也可以用`export directory_of_library`的方式，如\n\n```bash\nexport LD_LIBRARY_PATH=/home/vagrant/test\n```\n\n完成动态链接库路径设置后，再执行ldd命令\n\n```bash\n$ ldd ./prog3\n      linux-vdso.so.1 (0x00007ffe22fa3000)\n      libvector.so => /home/vagrant/test/libvector.so (0x00007fe25cd03000)\n      libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe25c912000)\n      /lib64/ld-linux-x86-64.so.2 (0x00007fe25d107000)\n```\n\n这时候可以发现libvector.so已经可以找到了\n\n再一次运行\n\n```bash\n$ ./prog3\n  z = [4 6]\n```\n\n\\\n","updated_at":"2022-10-26T05:35:33.000Z"},"/Users/wzq/wk/blog/docs/GDB/gdb demo/img":{"id":"/Users/wzq/wk/blog/docs/GDB/gdb demo/img","title":"img","file_path":"/Users/wzq/wk/blog/docs/GDB/gdb demo/img","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-10-05T10:29:18.000Z","updated_at":"2022-10-05T13:47:03.000Z"},"/Users/wzq/wk/blog/docs":{"id":"/Users/wzq/wk/blog/docs","title":"docs","content":"","file_path":"/Users/wzq/wk/blog/docs","cover":"","created_at":"2022-07-24T10:15:56.357Z","updated_at":"2022-10-17T09:32:17.159Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/编辑器/Sublime.md":{"id":"/Users/wzq/wk/blog/docs/编辑器/Sublime.md","title":"Sublime","content":"\n## sublime 快捷键\n\n### Multiple Selection with the Keyboard\n\n\n**Adding a Line**\n\nTo add the line above or below to the selection, use:\n\n* Windows/Linux: Ctrl+Alt+⬆ and Ctrl+Alt+⬇\n* Mac: ⌃+⇧+⬆ and ⌃+⇧+⬇\n\n**Splitting the Selection into Lines**\n\nSelect a block of lines, and then split it into many selections, one per line, using:\n\n* Windows/Linux: Ctrl+Shift+L\n* Mac: ⇧+⌘+L\n\n**Quick Add Next**\nTo add the next occurrence of the current word to the selection, use Quick Add Next, which is bound to:\n\n* Windows/Linux: Ctrl+D\n* Mac: ⌘+D\n\nIndividual occurrences can be skipped via Quick Skip Next, which is bound to:\n\n* Windows/Linux: Ctrl+K, Ctrl+D\n* Mac: ⌘+K, ⌘+D\n\n**Find All**\n\nTo add all occurrences of the current word to the selection, use Find All:\n\n* Windows/Linux: Alt+F3\n* Mac: ⌃+⌘+G\n\n**Undo Selection**\n\nIf you go too far, use Undo Selection to step backwards:\n\n* Windows/Linux: Ctrl+U\n* Mac: ⌘+U\n\n**Single Selection**\n\nTo go from multiple selections to a single selection, press Esc.\n\n\n### Column Selection\n\n\nColumn selection can be used to select a rectangular area of a file. Column selection doesn’t operate via a separate mode, instead it makes use of multiple selections.\n\nYou can use additive selections to select multiple blocks of text, or subtractive selections to remove a block.\n \n\n**Using the Mouse**\n\nDifferent mouse buttons are used on each platform:\n\nMAC\n\n* Left Mouse Button + ⌥\n* OR: Middle Mouse Button\n* Add to selection: ⌘\n* Subtract from selection: ⇧+⌘\n\nWINDOWS\n\n* Right Mouse Button + Shift\n* OR: Middle Mouse Button\n* Add to selection: Ctrl\n* Subtract from selection: Alt\n\nLINUX\n\n* Right Mouse Button + Shift\n* Add to selection: Ctrl\n* Subtract from selection: Alt\n\n**Using the Keyboard**\n\nMAC\n\n* Ctrl+Shift+⬆\n* Ctrl+Shift+⬇\n\nWINDOWS\n\n* Ctrl+Alt+⬆\n* Ctrl+Alt+⬇\n\nLINUX\n\n* Alt+Shift+⬆\n* Alt+Shift+⬇\n\n\n\n> https://www.sublimetext.com/docs/","file_path":"/Users/wzq/wk/blog/docs/编辑器/Sublime.md","cover":"","created_at":"2022-09-11T04:37:27.802Z","updated_at":"2022-09-11T05:58:52.556Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/docs/Shell/Shell Command.md":{"id":"/Users/wzq/wk/blog/docs/Shell/Shell Command.md","title":"Shell Command","content":"## Linux 安装包查找\n[https://pkgs.org](https://pkgs.org)\n\n## 系统硬件工具\n### 查看各硬件的型号\n```bash\nlspci\n```\n### CPU\n```bash\n# 查看cup信息\ncat /proc/cpuinfo  \n\n# 查看各级cache大小\ngetconf -a | grep CACHE\n\n\nsudo dmidecode  -t 4\n\n# get thread or cpu core count \nnproc\n```\n\n### 磁盘\n\n参考：[鸟哥的Linux私房菜-第七章](http://linux.vbird.org/linux_basic/0230filesystem.php#lsblk) \n\n列出系统所有的装置，包括未挂载的\n```bash\nlsblk -p\n\nlsblk -o NAME,PARTTYPE,MOUNTPOINT\n```\n\n查看目前已挂载的装置/磁盘的剩余空间\n```bash\n# 查看目前挂载的装置/磁盘剩余空间\ndf -Th \n# 查看 /etc 所在磁盘的剩余空间\ndf -h /etc\n```\n\n查看文件占用大小\n```bash\n# 查看/home目录下各文件占用大小\ndu -sh /home/*\n# 查看 /home目录占用大小\ndu -sh /home\n```\n\n查看磁盘分区文件系统类型\n```bash\nsudo parted /dev/sda print\n```\n\n旧有的MBR分区使用的“磁盘分区”命令\n```bash\n# 硬盘分区工具 fdisk, cfdisk, sfdisk, GParted\n# 查看磁盘分区\nfdisk -l\n# 磁盘分区\nfdisk /dev/sda\n```\n\nCreate file system\n```bash\n# ext4 file system\nmkfs -v -t ext4 /dev/<xxx>\n# create swap partition file system\nmkswap /dev/<yyy>\n# enabled \n/sbin/swapon -v /dev/<yyy>\n```\n\n 检查和修复损坏的硬盘\n\n```bash\nfsck -C -f -t ext3 /dev/sda1\n```\n\n检查硬盘扇区有没有坏轨\n\n```bash\nbadblocks -sv /dev/sda\n```\n\n观察文件系统\n\n```bash\ndumpe2fs \n```\n\n查看硬盘信息 制造商序列号等\n\n```bash\nsudo hdparm -i /dev/sda\n# or\nsudo smartctl -a /dev/sda\n```\n\n\n### 制作启动硬盘\n\n如果在linux上用 `lsblk -p` 查看USB设备，如果是macos要用`diskutil list`查看, 查找到我的USB设备是/dev/disk3， 然后用dd命令把系统安装镜像烧录到USB上\n\n```bash\ndd if=ubuntu-16.04.5-desktop-amd64.iso of=/dev/disk3\n```\n\n如果提示 “ Resource busy”, 在linux上用 `umount /dev/disk3`, 在macos上用`diskutil umount /dev/disk3` 取消挂载。\n\n###  loop dev\n```bash\ndd if=/dev/zero of=./rootfs.ext3 bs=1M count=32\nmkfs.ext3 rootfs.ext3\nsudo mount -o loop rootfs.ext3  /test/\n```\n\n### 查看initramfs\n```bash\n#看一下 initramfs 裡面的內容有些啥資料？\n$ lsinitrd /boot/initramfs-4.18.0-193.el8.x86_64.img\n\n$ mkdir /dev/shm/initramfs\n$ cd /dev/shm/initramfs\n# 取得 initramfs 前面應該要去除的容量\n$ cpio -i -d --no-absolute-filenames   -I /boot/initramfs-4.18.0-193.el8.x86_64.img\n  198 blocks\n# 這個重點就是在前面的字元佔了幾個 block 容量，每個 block 容量為 512bytes，\n# 每一個 initramfs 檔案的前置字元容量都不相同，所以需要先找出來去除才行！\n\n$ dd if=/boot/initramfs-4.18.0-193.el8.x86_64.img of=initramfs.gz bs=512 skip=198\n\n$ file initramfs.gz\n  initramfs.gz: gzip compressed data, from Unix, last modified: Mon May  4 17:56:47 2015,max compression\n\n# 3. 從上面看到檔案是 gzip 壓縮檔，所以將它解壓縮後，再查閱一下檔案的類型！\n$ gzip -d initramfs.gz\n\n$ file initramfs\n  initramfs: ASCII cpio archive (SVR4 with no CRC)\n\n# 解開後又產生一個 cpio 檔案，得要將它用 cpio 的方法解開！加上不要絕對路徑的參數較保險！  \n$ cpio -i -d -H newc --no-absolute-filenames < initramfs\n```\n\n## 系统信息\n\n### 查看系统信息\n\nType any one of the following command to find os name and version in Linux:\n```bash\ncat /etc/os-release\nlsb_release -a\nhostnamectl\n```\n\nType the following command to find Linux kernel version\n```\nuname -r\n```\n\n```bash\n# 查看系统信息\ncat /proc/version \n# 系统架构\narch\nfile /bin/ls \n# 依据long类型的位数判断安装系统的位数， 一般64位操作系统long类型是64位\nget_conf LONG_BIT\n```\n\n## man -  Manual Pages\nIf you want the man page for a single program/command, you can run:\n```bash\nman command_name | less\n```\nHit q to exit the man page and get back to your terminal prompt.\n\n\n查找系统内跟passwd有关的说明\n```bash\nman -f passwd\n```\n\nIf you want to search the man pages for a command that pertains to a keyword:\n```bash\nman -k single_keyword | less\n```\nThis command will search the manual pages for a command with the keyword 'single_keyword'. Forget how to open files in Vim? You can search for 'editor' and get a list of all editor-related commands on your system.\n\n### 系统进程\n```bash\nps -f -o pid,ppid,tty,stat,wchan,args\n\n# 查看7979 和 29825 进程\nps -p 7979 -p 29825 -o \"pid ppid sid tty cmd\"\n# 杀掉kucker名字的进程\nps -ef | grep \"kucker\" | awk  '{print $2}' | xargs -i sudo kill -9 {}\n\n```\n\n## 网络\n查询域名IP\n```bash\ndig +norecurse @a.root-servers.net any yahoo.com\ndig +norecurse @e.gtld-servers.net any yahoo.com\ndig +norecurse @ns1.yahoo.com any yahoo.com\n\nnslookup yahoo.com\nnslookup -type=NS yahoo.com\nnslookup yahoo.com  ns2.yahoo.com\n\nnetstat -a --inet\nnetstat -tlunp\n\ntcpdump -t -N 'port 80'\n\n```\n\n\n\n## 文件\n\n### 文件权限\n\n```bash\n# 改变所属群组  change group\nchgrp [-R] 群组名 dirname/filename ...\n\n# 改变档案拥有者 change owner\nchown [-R] 账号名 档案戒目彔\nchown [-R] 账号名:组名 档案戒目彔\n\n# 改变权限\n# 数字类型改变档案权限\nchmod [-R] 740 档案目彔\n\n# 符号类型改变档案权限\n#  \t\t|\tu\t|\t+(加入) \t|\tr\t|\n# chmod\t|\tg \t|\t-(除去)\t|\tw\t|\t档案戒目彔\n# \t\t|\to\t|\t=(设定)\t|\tx\t|\n# \t\t|\ta\t|\t\t\t|\t\t|\nchmod u=rwx,go=rx .bashrc\nchmod a-x .bashrc\n\n```\n\n### 文件管理\n```bash\n# 展示目录列表\nls -ld 目录\n# 回到上次访问的目录\ncd - \n# 进入wzq用户家目录\ncd wzq~\n```\n\n\n## grep\n\n替换或删除跨越多个目录的多个文件里的指定文本\n```bash\n# 替换当前目录下所有文件里的‘window’为‘linux’\ngrep -rl 'windows' ./ | xargs sed -i 's/windows/linux/g'\n# Mac下sed命令的\"-i\"选项后面需要加字符串表示备份文件的后缀\ngrep -rl 'windows' ./ | xargs sed -i ''  's/windows/linux/g'\n\n#删除出现‘windows’的行\ngrep -rl 'windows' ./ | xargs sed -i ''   '/windows/d'\n\n```\n统计某个词语在文件中出现的次数\n```bash\n# count the number of occurrence of a word in a text file\ngrep -o -i 'word' test.txt | wc -l\n```\n\n## find\n\n```bash\nfind . -name \"*nng*\" -exec rm -rf {} \\;\n\nfind /usr/{lib,libexec} -name \\*.la -delete\n\nfind /usr -depth -name $(uname -m)-lfs-linux-gnu\\* | xargs rm -rf\n\nfind $(1) -not -type d -and -not -type l -print0 | xargs -0r chmod $(FILE_MODE)\n```\n\n## diff\n\n\n```bash\n方法一：\ndiff -bur [oldDir] [newDir]\n方法二：\nrsync -rcnv [oldDir] [newDir]\n```\n\nSplit the screen to two columns for comparing convenience\n```bash\ndiff -y [oldDir] [newDir]\n```\n\n## sed\n [https://www.grymoire.com/Unix/Sed.html](https://www.grymoire.com/Unix/Sed.html)\n\n## 压缩与打包\n```bash\n[dmtsai@study ~]$ tar [-z|-j|-J] [cv] [-f 待建立的新檔名] filename... <==打包與壓縮\n[dmtsai@study ~]$ tar [-z|-j|-J] [tv] [-f 既有的 tar檔名]             <==察看檔名\n[dmtsai@study ~]$ tar [-z|-j|-J] [xv] [-f 既有的 tar檔名] [-C 目錄]   <==解壓縮\n選項與參數：\n-c  ：建立打包檔案，可搭配 -v 來察看過程中被打包的檔名(filename)\n-t  ：察看打包檔案的內容含有哪些檔名，重點在察看『檔名』就是了；\n-x  ：解打包或解壓縮的功能，可以搭配 -C (大寫) 在特定目錄解開\n      特別留意的是， -c, -t, -x 不可同時出現在一串指令列中。\n-z  ：透過 gzip  的支援進行壓縮/解壓縮：此時檔名最好為 *.tar.gz\n-j  ：透過 bzip2 的支援進行壓縮/解壓縮：此時檔名最好為 *.tar.bz2\n-J  ：透過 xz    的支援進行壓縮/解壓縮：此時檔名最好為 *.tar.xz\n      特別留意， -z, -j, -J 不可以同時出現在一串指令列中\n-v  ：在壓縮/解壓縮的過程中，將正在處理的檔名顯示出來！\n-f filename：-f 後面要立刻接要被處理的檔名！建議 -f 單獨寫一個選項囉！(比較不會忘記)\n-C 目錄    ：這個選項用在解壓縮，若要在特定目錄解壓縮，可以使用這個選項。\n\n其他後續練習會使用到的選項介紹：\n-p(小寫) ：保留備份資料的原本權限與屬性，常用於備份(-c)重要的設定檔\n-P(大寫) ：保留絕對路徑，亦即允許備份資料中含有根目錄存在之意；\n--exclude=FILE：在壓縮的過程中，不要將 FILE 打包！ \n```\n\n壓　縮：tar -jcv -f filename.tar.bz2 要被壓縮的檔案或目錄名稱\n查　詢：tar -jtv -f filename.tar.bz2\n解壓縮：tar -jxv -f filename.tar.bz2 -C 欲解壓縮的目錄\n\n\n实例：\n```bash\n# 解压tar.bz2文件\ntar xvfj ./linux-2.6.23.tar.bz2 \ntar xvfJ ./linux-2.6.23.tar.xz\ntar xvfz ./linux-2.6.23.tar.gz\ntar -xf ./linux-2.6.23.tar.*\n\n\n# 解压python-3.9.0-docs-html.tar.bz2到/usr/share/doc/python-3.9.0/html\ntar --strip-components=1 \\\n--no-same-owner \\\n--no-same-permissions \\\n-C /usr/share/doc/python-3.9.0/html \\\n-xvf ../python-3.9.0-docs-html.tar.bz2\n\n# --no-same-owner and --no-same-permissions\n# Ensure the installed files have the correct ownership and permissions.\n# Without these options, using tar will install the package files with the upstream creator's values.\n\n# 当前目录压缩打包到/home/wzq/lfs/lfs-2.tar.xz\ntar -cJpf /home/wzq/lfs/lfs-2.tar.xz .\n# 解压导当前目录\ntar -xpf $HOME/lfs-temp-tools-10.0-systemd.tar.xz\n```\n\n\n## User\n\n### add user \n\nadd the new user vivi\n```bash\ngroupadd vivi\nuseradd -s /bin/bash -g vivi -m -d /home/vivi vivi\n# useradd -s /bin/bash -g vivi -m -k /dev/null vivi\npasswd vivi\n```\nThe command adds an entry to the /etc/passwd, /etc/shadow, /etc/group and /etc/gshadow files.\n\nOr, Simply by\n```bash\nuseradd -s /bin/bash -m vivi\npasswd vivi\n```\n\nOr, adduser is an interactive command-line tool available by default in most Linux distributions.\n```bash\nadduser vivi\n```\n\n[More about create user](https://linuxize.com/post/how-to-create-users-in-linux-using-the-useradd-command/)\n\n### add user to sudoers \nMost Linux systems, including Ubuntu, have a user group for sudo users. To grant the new user elevated privileges, add them to the sudo group.\n```bash\nusermod -aG sudo vivi\n```\nThe -aG option tells the system to append the user to the specified group. (The -a option is only used with G.)\n\nOr\n```bash\nsudo adduser vivi sudo\n```\n[More about sudo](https://jumpcloud.com/blog/how-to-create-a-new-sudo-user-manage-sudo-access-on-ubuntu-20-04)\n\n### delete user\n\n```bash\nuserdel -r vivi\n\n```\n\n`-r` Remove Linux user account including home directory and mail spool\n\n### Verify user information\n```bash\nlslogins vivi\n\nid vivi\n```\n\n### View the groups a user belongs to\n```bash\ngroups vivi\n```\n\n### Gain root shell\n```bash\nsudo -s\n```\nor\n```bash\nsudo -i\n```\n\n\n\n## Terminal\n### CLI Shortcuts\n* 從游標處向前刪除指令串 ([ctrl]+u); 向後刪除指令串 ([ctrl]+k)。\n* `<ctrl> + a` will move the cursor to the beginning of the current line\n* `<ctrl> + e` will move the cursor to the end of the current line \n* `<ctrl> + r` will let you search through your recently used commands\n\n### history\n```bash\n# number  ：執行第幾筆指令的意思；\n!number\n# command ：由最近的指令向前搜尋『指令串開頭為 command』的那個指令，並執行；\n!command\n# 執行上一個指令(相當於按↑按鍵後，按 Enter)\n!!  \n\n```\n\n### 重定向\n```bash\n# 將指令的資料全部寫入名為 list 的檔案中\nfind /home -name .bashrc > list 2>&1 \n```\n\n\n## wget\n```bash\nwget --input-file=downloadListFile --continue --directory-prefix=target-directory\n```\n## curl\n```bash\n \n#-o, --output <file>: Write  output  to <file> instead of stdout.\ncurl https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz --output gost.gz\n \n# -O, --remote-name: Write output to a local file named like the remote file we get\ncurl -O https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz\n```\n\n\n\n## 关机/重启\n\n```bash\n# 未保存的内存数据写入硬盘\nsync\n# 立刻关机，其中 now 相当亍时间为 0 的状态\nshutdown -h now\n# 系统在今天的 20:25 分会关机，若在 21:25 才下达此挃令，则隑天才关机\nshutdown -h 20:25\n# 系统再过十分钟后自劢关机\nshutdown -h +10\n# 系统立刻重新启劢\nshutdown -r now\n# 再过三十分钟系统会重新启劢，幵显示后面的讯息给所有在在线的使用者\nshutdown -r +30 'The system will reboot'\n# 仅发出警告，系统并不会关机啦!吓唬人!\nshutdown -k now 'This system will reboot'\n# 重新启劢，关机，断电\nreboot, halt, poweroff\n```","file_path":"/Users/wzq/wk/blog/docs/Shell/Shell Command.md","cover":"","created_at":"2022-07-24T16:04:13.801Z","updated_at":"2022-10-23T10:58:42.810Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/site/MacOS/Launching Custom Daemons Using launchd":{"id":"/Users/wzq/wk/blog/site/MacOS/Launching Custom Daemons Using launchd","title":"Launching Custom Daemons Using launchd","content":"","file_path":"/Users/wzq/wk/blog/site/MacOS/Launching Custom Daemons Using launchd","cover":"","created_at":"2022-10-10T11:43:51.095Z","updated_at":"2022-10-10T11:43:51.095Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/Algorithms/Using two stacks to Evaluate an Expression.md":{"id":"/Users/wzq/wk/blog/docs/Algorithms/Using two stacks to Evaluate an Expression.md","title":"Using two stacks to Evaluate an Expression","content":"Infix Expressions are harder for Computers to evaluate because of the additional work needed to decide precedence. Infix notation is how expressions are written and recognized by humans and, generally, input to programs. Given that they are harder to evaluate, they are generally converted to one of the two remaining forms. A very well known algorithm for converting an infix notation to a postfix notation is [Shunting Yard Algorithm](https://en.wikipedia.org/wiki/Shunting_yard_algorithm) by Edgar Dijkstra.\n\nThis algorithm takes as input an Infix Expression and produces a queue that has this expression converted to postfix notation. The same algorithm can be modified so that it outputs the result of the evaluation of expression instead of a queue. The trick is using two stacks instead of one, one for operands, and one for operators.\n\n```\n1. While there are still tokens to be read in,\n  1.1 Get the next token.\n  1.2 If the token is:\n      1.2.1 A number: push it onto the value stack.\n      1.2.2 A variable: get its value, and push onto the value stack.\n      1.2.3 A left parenthesis: push it onto the operator stack.\n      1.2.4 A right parenthesis:\n        1 While the thing on top of the operator stack is not a \n          left parenthesis,\n            1 Pop the operator from the operator stack.\n            2 Pop the value stack twice, getting two operands.\n            3 Apply the operator to the operands, in the correct order.\n            4 Push the result onto the value stack.\n        2 Pop the left parenthesis from the operator stack, and discard it.\n      1.2.5 An operator (call it thisOp):\n        1 While the operator stack is not empty, and the top thing on the\n          operator stack has the same or greater precedence as thisOp,\n          1 Pop the operator from the operator stack.\n          2 Pop the value stack twice, getting two operands.\n          3 Apply the operator to the operands, in the correct order.\n          4 Push the result onto the value stack.\n        2 Push thisOp onto the operator stack.\n2. While the operator stack is not empty,\n    1 Pop the operator from the operator stack.\n    2 Pop the value stack twice, getting two operands.\n    3 Apply the operator to the operands, in the correct order.\n    4 Push the result onto the value stack.\n3. At this point the operator stack should be empty, and the value\n  stack should have only one value in it, which is the final result.\n```\n\nImplementation: It should be clear that this algorithm runs in linear time – each number or operator is pushed onto and popped from Stack only once.\n\n```java\n/**\n * https://www.geeksforgeeks.org/expression-evaluation\n * <p>\n * Using two stacks , one for operands, and one for operators to Evaluate an Expression in one pass\n */\n\nimport java.util.Map;\nimport java.util.Stack;\nimport java.util.TreeMap;\n\npublic class CalculatorX {\n  private final static Map<Character, Integer> OPERATOR_MAP = new TreeMap<>();\n\n  static {\n    // <Operator, Precedence>\n    OPERATOR_MAP.put('+', 1);\n    OPERATOR_MAP.put('-', 1);\n    OPERATOR_MAP.put('*', 2);\n    OPERATOR_MAP.put('/', 2);\n    OPERATOR_MAP.put('^', 3); // power\n\n  }\n\n  public static double evaluate(String expression) {\n    char[] tokens = expression.toCharArray();\n    // Stack for numbers: 'values'\n    Stack<Double> values = new Stack<>();\n    // Stack for Operators: 'ops'\n    Stack<Character> ops = new Stack<>();\n    for (int i = 0; i < tokens.length; i++) {\n      // Current token is a whitespace, skip it\n      if (Character.isWhitespace(tokens[i]))\n        continue;\n\n      // Current token is a number, push it to stack for numbers\n      if (isDigit(tokens[i])) {\n        StringBuffer sbuf = new StringBuffer();\n\n        // There may be more than one digits in number\n        // while (i < tokens.length && tokens[i] >= '0' && tokens[i] <= '9')\n        while (i < tokens.length && isDigit(tokens[i]))\n          sbuf.append(tokens[i++]);\n        values.push(Double.parseDouble(sbuf.toString()));\n\n        /* right now the i points to the character next to the digit, since the for loop also increases the i, we would\n         skip one token position; we need to decrease the value of i by 1 to correct the offset.*/\n        i--;\n      } else if (tokens[i] == '(') {\n        // Current token is an opening brace, push it to 'ops'\n        ops.push(tokens[i]);\n      } else if (tokens[i] == ')') {\n        // Closing brace encountered, solve entire brace\n        while (ops.peek() != '(')\n          values.push(applyOp(ops.pop(), values.pop(), values.pop()));\n        //Pop the left parenthesis from the stack and discard it\n        if (ops.isEmpty() || ops.pop() != '(') {\n          throw new IllegalArgumentException(\"The expression contained unbalanced parentheses \");\n        }\n      } else if (isOperator(tokens[i])) {\n        // Current token is an operator.\n\n        /* While top of 'ops' has same or greater precedence to current token, which is an operator.\n        Apply operator on top of 'ops' to top two elements in values stack*/\n        while (!ops.empty() && ops.peek() != '(' && precedence(ops.peek()) > precedence(tokens[i]))\n          values.push(applyOp(ops.pop(), values.pop(), values.pop()));\n        // Push current token to 'ops'.\n        ops.push(tokens[i]);\n      } else {\n        throw new IllegalArgumentException(\"Invalid token found:\" + tokens[i]);\n      }\n    }\n\n    // Entire expression has been parsed at this point, apply remaining ops to remaining values\n    while (!ops.empty()) {\n      char op = ops.pop();\n      if (op != '(')\n        values.push(applyOp(op, values.pop(), values.pop()));\n      else\n        throw new IllegalArgumentException(\"The infixQ contained unbalanced parentheses \");\n    }\n\n\n    // Top of 'values' contains result, return it\n    return values.pop();\n  }\n\n  private static boolean isOperator(char c) {\n    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';\n  }\n\n  private static boolean isDigit(char c) {\n    // c >= '0' && c <= '9' || c == '.'\n    return Character.isDigit(c) || c == '.';\n  }\n\n  // Returns true if 'op2' has higher or same precedence as 'op1', otherwise returns false.\n  public static int precedence(char op) {\n    return OPERATOR_MAP.get(op);\n  }\n\n  // A utility method to apply an operator 'op' on operands 'a' and 'b'. Return the result.\n  public static double applyOp(char op, double b, double a) {\n    switch (op) {\n      case '+':\n        return a + b;\n      case '-':\n        return a - b;\n      case '*':\n        return a * b;\n      case '/':\n        if (b == 0) throw new UnsupportedOperationException(\"Cannot divide by zero\");\n        return a / b;\n      case '^':\n        return Math.pow(a, b);\n    }\n    return 0;\n  }\n\n  // Driver method to test above methods\n  public static void main(String[] args) {\n    System.out.println(CalculatorX.evaluate(\"10 + 2 * 6\"));\n    System.out.println(CalculatorX.evaluate(\"1.01 * 2 + 12\"));\n    System.out.println(CalculatorX.evaluate(\"100 * ( 2 + 12 )\"));\n    System.out.println(CalculatorX.evaluate(\"100 * ( 2 + 12 ) / 14 + 2^3\"));\n    System.out.println(CalculatorX.evaluate(\"2^3\"));\n  }\n}\n```\n\n> <https://www.geeksforgeeks.org/expression-evaluation/>\n\n\\\n","file_path":"/Users/wzq/wk/blog/docs/Algorithms/Using two stacks to Evaluate an Expression.md","cover":"","created_at":"2022-09-23T00:19:37.257Z","updated_at":"2022-10-26T05:34:03.716Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/site/assets/javascripts":{"id":"/Users/wzq/wk/blog/site/assets/javascripts","title":"javascripts","content":"","file_path":"/Users/wzq/wk/blog/site/assets/javascripts","cover":"","created_at":"2022-10-10T11:43:50.810Z","updated_at":"2022-10-10T11:43:50.830Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/GCC/GCC compiling processes":{"id":"/Users/wzq/wk/blog/site/GCC/GCC compiling processes","title":"GCC compiling processes","content":"","file_path":"/Users/wzq/wk/blog/site/GCC/GCC compiling processes","cover":"","created_at":"2022-10-10T11:43:51.025Z","updated_at":"2022-10-10T11:43:51.025Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/Git/git.txt":{"id":"/Users/wzq/wk/blog/docs/Git/git.txt","title":"git","content":"https://git-scm.com/book/en/v2\nhttps://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet\n\nhttp://goo.gl/cLBs3D\nhttp://think-like-a-git.net/\n\n\nhttps://eagain.net/articles/git-for-computer-scientists/\nhttps://mirrors.edge.kernel.org/pub/software/scm/git/docs/user-manual.html","file_path":"/Users/wzq/wk/blog/docs/Git/git.txt","cover":"","is_daily":false,"is_dir":false,"created_at":"2022-10-17T09:32:40.000Z","updated_at":"2022-10-20T12:13:38.000Z"},"/Users/wzq/wk/blog/docs/GDB":{"id":"/Users/wzq/wk/blog/docs/GDB","title":"GDB","file_path":"/Users/wzq/wk/blog/docs/GDB","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-10-05T05:40:13.000Z","updated_at":"2022-10-05T13:55:38.000Z"},"/Users/wzq/wk/blog/docs/Vim":{"id":"/Users/wzq/wk/blog/docs/Vim","title":"Vim","file_path":"/Users/wzq/wk/blog/docs/Vim","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-08-20T11:42:04.000Z","updated_at":"2022-08-20T14:32:17.000Z"},"/Users/wzq/wk/blog/docs/MacOS/Launching Custom Daemons Using launchd.md":{"id":"/Users/wzq/wk/blog/docs/MacOS/Launching Custom Daemons Using launchd.md","title":"Launching Custom Daemons Using launchd","file_path":"/Users/wzq/wk/blog/docs/MacOS/Launching Custom Daemons Using launchd.md","cover":"","is_daily":false,"is_dir":false,"created_at":"2022-08-21T11:20:29.000Z","content":"In OSX I needed a shell script to execute at login. There are a few different ways to perform this so I thought it might be helpful to document what your options are. This is the shell script I will execute:\n\n```bash\n#!/bin/bash\n\nfunction start() {\n\techo ${PATH}\n\techo \"start mkdocs\"\n\t# It should not append a & symbol to the end as urual to run the command in the background, cause we will let launch to take over the task.\n\t/Library/Frameworks/Python.framework/Versions/3.10/bin/mkdocs serve \n\t \n}\n\nfunction stop() {\n\techo \"stop mkdocs client...\"\n  ps -ef | grep \"mkdocs\" | awk  '{ print $2 }' | xargs  kill \n}\n\ncase ${1} in\n  \"start\")\n\tstart\n  ;;\n  \"stop\")\n \tstop\t\n  ;;\n  \"restart\")\n\tstop\n\tsleep 3\n\tstart\n  ;;\n  \"\")\n\tstart\t\n  ;;\n\n  *)\n  echo \"error arguents\"\n  exit 1\n  ;;\nesac\n```\n\nThis script  was named \"[blogserver.sh](http://blogserver.sh)\" locating in my blog diractory \"\\~/wk/blog/\". It start my blogserver, so that I can browse my blogs located in my own cumputer in the browser. It should be noted that the services programe you are going to excute should not append a & symbol to the end as urual to daemonize , cause we will let launchd to take over the task. If you do this way, launchd will lose track of it and attempt to relaunch it.\n\nThe interface to launchd is a tool called launchctl which allows for loading and unloading daemons into launchd. XML formatted plist files are used to describe operations loaded into launchctl.\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\"\n   \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>Label</key>\n    <string>mkdocs.blogs</string>\n    <key>ProgramArguments</key>\n    <array>\n      <string>./blogserver.sh</string>\n      <string>start</string>\n    </array>\n    <key>WorkingDirectory</key>\n    <string>/Users/wzq/wk/blog</string>\n    <key>RunAtLoad</key>\n    <true />\n    <key>StandardErrorPath</key>\n    <string>/Users/wzq/Library/Logs/myblogs.log</string>\n    <key>StandardOutPath</key>\n    <string>/Users/wzq/Library/Logs/myblogs.log</string>\n  </dict>\n</plist>\n```\n\nThe above file, \"mkdocs.blogs.plist\" needs to be saved in the \"\\~/Library/LaunchAgents\" directory. As you can see the xml dictates that the \"[blogserver.sh](http://blogserver.sh)\" file should be executed at load, note we no longer need a \".command\" file extension. We will now use launchctl to load our plist file.\n\n```\n launchctl load ~/Library/LaunchAgents/mkdocs.blogs.plist\n```\n\nTo verify that your script executed correctly lets ask launchctl to show us what is running.\n\n```bash\nlaunchctl list | grep \"mkdocs.blogs\"\n```\n\nYou will likely see an entries with three columns. Mine looks like this:\n\n```\n758\t0\tmkdocs.blogs\n```\n\nThe first column is the process id. The second column displays the last exit status of the job, zero represent success.\n\n## Property list\n\nA list of often used keys follows below. All keys are optional unless otherwise noted. For a full list, see Apple's manpage for launchd.plist.\n\n| Key | Type | Description |\n|:---:|:---:|:---|\n| Label | String | The name of the job. By convention, the job label is the same as the plist file name, without the .plist extension. Required. |\n| Program | String | A path to an executable. Useful for simple launches. At least one of Program or ProgramArguments is required. |\n| ProgramArguments | Array of strings | An array of strings representing a UNIX command. The first string is generally a path to an executable, while latter strings contain options or parameters. At least one of Program or ProgramArguments is required. |\n| UserName | String <br>(defaults to root or current user) | The job will be run as the given user, who may (or may not) be the user who submitted it to launchd. |\n| RunAtLoad | Boolean <br> (defaults to NO) | A boolean flag that defines if a task is launched immediately when the job is loaded into launchd. |\n| StartOnMount | Boolean<br> (defaults to NO) | A boolean flag that defines if a task is launched when a new filesystem is mounted. |\n| QueueDirectories | Array of strings | Watch a directory for new files. The directory must be empty to begin with, and must be returned to an empty state before QueueDirectories will launch its task again. |\n| WatchPaths | Array of strings | Watch a filesystem path for changes. Can be a file or folder. |\n| StartInterval | Integer | Schedules job to run on a repeating schedule. Indicates number of seconds to wait between runs. |\n| StartCalendarInterval | Dictionary of integers or Array of dictionaries of integers | Job scheduling. The syntax is similar to [cron](https://en.wikipedia.org/wiki/Cron). |\n| RootDirectory | String | The job will be chrooted into this directory before execution. |\n| WorkingDirectory | String | The job will be chdired into this directory before execution. |\n| StandardInPath,<br>StandardOutPath,<br>StandardErrorPath | String | Keys to determine files for input and output for the launched process. |\n| LowPriorityIO | Boolean | Tells the kernel that this task is of a low priority when doing filesystem I/O. |\n| AbandonProcessGroup | Boolean <br>(defaults to NO) | A boolean flag that defines whether subprocesses launched from a task launched by launchd will be killed when the task ends. Useful where a short-lived task starts a long-lived subtask, but may result in zombie processes. |\n| SessionCreate | Boolean<br>(defaults to NO) | A boolean flag that defines whether a security session will be created for the task and its subprocesses. |\n\n## Reference\n\n> * <https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html##//apple_ref/doc/uid/10000172i-SW7-BCIEDDBJ>\n\n* <https://en.wikipedia.org/wiki/Launchd>\n\n\\\n","updated_at":"2022-10-26T05:38:48.270Z"},"/Users/wzq/wk/blog/docs/Unbuntu/images/fix-the-no-wi-fi-adapter-found-error-on-ubuntu":{"id":"/Users/wzq/wk/blog/docs/Unbuntu/images/fix-the-no-wi-fi-adapter-found-error-on-ubuntu","title":"fix-the-no-wi-fi-adapter-found-error-on-ubuntu","content":"","file_path":"/Users/wzq/wk/blog/docs/Unbuntu/images/fix-the-no-wi-fi-adapter-found-error-on-ubuntu","cover":"","created_at":"2022-07-24T11:47:20.681Z","updated_at":"2022-07-24T16:04:13.802Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/Algorithms/Using two stacks to Evaluate an Expression":{"id":"/Users/wzq/wk/blog/site/Algorithms/Using two stacks to Evaluate an Expression","title":"Using two stacks to Evaluate an Expression","content":"","file_path":"/Users/wzq/wk/blog/site/Algorithms/Using two stacks to Evaluate an Expression","cover":"","created_at":"2022-10-10T11:43:50.981Z","updated_at":"2022-10-10T11:43:50.982Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/SSH":{"id":"/Users/wzq/wk/blog/docs/SSH","title":"SSH","file_path":"/Users/wzq/wk/blog/docs/SSH","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-10-05T14:42:38.000Z","updated_at":"2022-10-23T11:00:30.000Z"},"/Users/wzq/wk/blog/docs/Vagrant/Vagrant tutorial.md":{"id":"/Users/wzq/wk/blog/docs/Vagrant/Vagrant tutorial.md","title":"Vagrant tutorial","content":"## Create the machine\n```\nmkdir ubuntu18\ncd ubuntu18\nvagrant init generic/ubuntu1804\n```\n\n## Start the machine\n```\nvagrant up\n```\n\n## Login the machine\n```\nvagrant ssh\n```\n\n\n## Logout the machine\n```\nexit\n```\nor\n```\nCTRL+D\n```\n\n\n## Suspend the machine\n\nSuspending the virtual machine will stop it and save its current running state. Suspend the machine now.\n```\nvagrant suspend\n```\n\n## Halt the machine\nHalting the virtual machine will gracefully shut down the guest operating system and power down the guest machine. Halt your machine now.\n```\nvagrant halt\n```\n\n\n## Destroy the machine\n\nDestroying the virtual machine will remove all traces of the guest machine from your system. It'll stop the guest machine, power it down, and reclaim its disk space and RAM.\n```\nvagrant destroy\n```\n\n## List boxes\n```\nvagrant box list\n```\n\n\n> [Quik start](https://learn.hashicorp.com/tutorials/vagrant/getting-started-project-setup?in=vagrant/getting-started)\n\n[HashiCorp's Vagrant Cloud box catalog](https://app.vagrantup.com/boxes/search)\n\n[boxes create](https://www.vagrantup.com/vagrant-cloud/boxes/create)","file_path":"/Users/wzq/wk/blog/docs/Vagrant/Vagrant tutorial.md","cover":"","created_at":"2022-10-11T07:54:51.054Z","updated_at":"2022-10-11T11:15:04.790Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/site/MacOS/MacOS常用命令":{"id":"/Users/wzq/wk/blog/site/MacOS/MacOS常用命令","title":"MacOS常用命令","content":"","file_path":"/Users/wzq/wk/blog/site/MacOS/MacOS常用命令","cover":"","created_at":"2022-10-10T11:43:51.106Z","updated_at":"2022-10-10T11:43:51.106Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/Algorithms":{"id":"/Users/wzq/wk/blog/site/Algorithms","title":"Algorithms","content":"","file_path":"/Users/wzq/wk/blog/site/Algorithms","cover":"","created_at":"2022-10-10T11:43:50.802Z","updated_at":"2022-10-10T11:43:50.998Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/GDB/gdb demo/gdb demo":{"id":"/Users/wzq/wk/blog/site/GDB/gdb demo/gdb demo","title":"gdb demo","content":"","file_path":"/Users/wzq/wk/blog/site/GDB/gdb demo/gdb demo","cover":"","created_at":"2022-10-10T11:43:51.050Z","updated_at":"2022-10-10T11:43:51.050Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/SSH/SSH login without password.md":{"id":"/Users/wzq/wk/blog/docs/SSH/SSH login without password.md","title":"SSH login without password","content":"\n假设远程终端的IP地址为 “192.168.83.11”\n\n## 1. 生成私钥文件\n\n客户端终端下输入以下命令\n```bash\nssh-keygen  -N \"\" -t rsa -f ~/.ssh/id_rsa\n```\n每次执行 ssh-keygen -t rsa 产生的私钥文件都会不同\n\n如果文件 \"~/.ssh/id_rsa\" 存在，会提示是否覆盖该文件，此时可选择\"n\"不覆盖该文件而使用已有的id_rsa文件。如果选择\"y\"则会重新生成  \"~/.ssh/id_rsa\" 文件。接下来会提示输入passphrase，回车确定使用空的passphrase，再次回车确认（这里也可以输出passphrase，相当于ssh时登录的密码）。然后会重新生成id_rsa文件和id_rsa.pub文件.\n\n## 2.将本地的public key 拷贝到远程终端上\n```\nscp ~/.ssh/id_rsa.pub wzq@192.168.83.11:~/Downloads\n```\n## 3.将本地的public key追加到远程终端authorized_keys文件中\n```\ncat ~/Downloads/id_rsa.pub >> ~/.ssh/authorized_keys\n```\n\n\n\nAlternatively, Step 2 and 3 can be replaced with one step as following.\n```\nssh-copy-id -i ~/.ssh/id_rsa.pub wzq@192.168.83.11\n```\n\n## 4.测试是否配置生效\n```\nssh wzq@192.168.83.11\n```\n","file_path":"/Users/wzq/wk/blog/docs/SSH/SSH login without password.md","cover":"","created_at":"2022-10-05T14:43:07.320Z","updated_at":"2022-10-20T14:38:31.265Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/docs/Markdown":{"id":"/Users/wzq/wk/blog/docs/Markdown","title":"Markdown","file_path":"/Users/wzq/wk/blog/docs/Markdown","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-10-05T14:10:59.000Z","updated_at":"2022-10-05T14:23:06.000Z"},"/Users/wzq/wk/blog/docs/Algorithms":{"id":"/Users/wzq/wk/blog/docs/Algorithms","title":"Algorithms","file_path":"/Users/wzq/wk/blog/docs/Algorithms","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-09-23T00:28:16.000Z"},"/Users/wzq/wk/blog/docs/GDB/gdb demo":{"id":"/Users/wzq/wk/blog/docs/GDB/gdb demo","title":"gdb demo","file_path":"/Users/wzq/wk/blog/docs/GDB/gdb demo","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-10-05T05:40:38.000Z","updated_at":"2022-10-05T10:29:18.000Z"},"/Users/wzq/wk/blog/README.md":{"id":"/Users/wzq/wk/blog/README.md","title":"README","content":"## Welcome to GitHub Pages\n[gitbook](https://zhuanlan.zhihu.com/p/34946169)\n\n[GitHub Actions workflow](https://docs.github.com/en/actions)\n\n[git study](https://git-scm.com/book/en/v2/Git-Branching-Rebasing)\n\n[mkdocs](https://www.mkdocs.org/)\n\n\n\nmarkdown syntax:\n- https://www.markdownguide.org/basic-syntax/\n- https://www.jetbrains.com/help/hub/Markdown-Syntax.html#backslash-escapes\n- https://daringfireball.net/projects/markdown/syntax\n- https://golem.ph.utexas.edu/~distler/maruku/markdown_syntax.html\n- https://bookdown.org/yihui/bookdown/usage.html\n \n","file_path":"/Users/wzq/wk/blog/README.md","cover":"","created_at":"2022-07-24T16:04:13.800Z","updated_at":"2022-07-30T12:43:31.111Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/site/GDB/gdb demo/img":{"id":"/Users/wzq/wk/blog/site/GDB/gdb demo/img","title":"img","content":"","file_path":"/Users/wzq/wk/blog/site/GDB/gdb demo/img","cover":"","created_at":"2022-10-10T11:43:50.806Z","updated_at":"2022-10-10T11:43:50.807Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/Programing Language":{"id":"/Users/wzq/wk/blog/docs/Programing Language","title":"Programing Language","file_path":"/Users/wzq/wk/blog/docs/Programing Language","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-09-28T04:32:49.000Z","updated_at":"2022-09-28T04:41:25.000Z"},"/Users/wzq/wk/blog/site/编辑器/Sublime":{"id":"/Users/wzq/wk/blog/site/编辑器/Sublime","title":"Sublime","content":"","file_path":"/Users/wzq/wk/blog/site/编辑器/Sublime","cover":"","created_at":"2022-10-10T11:43:51.214Z","updated_at":"2022-10-10T11:43:51.214Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/Algorithms/Using_a_Stack_to_Evaluate_an_Expression":{"id":"/Users/wzq/wk/blog/site/Algorithms/Using_a_Stack_to_Evaluate_an_Expression","title":"Using_a_Stack_to_Evaluate_an_Expression","content":"","file_path":"/Users/wzq/wk/blog/site/Algorithms/Using_a_Stack_to_Evaluate_an_Expression","cover":"","created_at":"2022-10-10T11:43:50.998Z","updated_at":"2022-10-10T11:43:50.998Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/编辑器":{"id":"/Users/wzq/wk/blog/site/编辑器","title":"编辑器","content":"","file_path":"/Users/wzq/wk/blog/site/编辑器","cover":"","created_at":"2022-10-10T11:43:51.214Z","updated_at":"2022-10-10T11:43:51.214Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/Unbuntu/fix-the-no-wi-fi-adapter-found-error-on-ubuntu.md":{"id":"/Users/wzq/wk/blog/docs/Unbuntu/fix-the-no-wi-fi-adapter-found-error-on-ubuntu.md","title":"fix-the-no-wi-fi-adapter-found-error-on-ubuntu","content":"## Use the Ubuntu ISO image to install drivers\nA remarkable fact is that this method doesn’t require you to have an internet connection.\n\nStep 1: Copy the Ubuntu ISO image in your home directory. Rename it to a simple name like ‘ubuntu.iso.’\n\nStep 2: Launch the Terminal and mount the ISO image on the system like a CD/DVD.\n\n```bash\nsudo mkdir /media/cdrom\ncd ~\nsudo mount -o loop ubuntu.iso /media/cdrom\n```\nStep 3. Now, launch the Software & Updates app from the applications menu.\n\nStep 4. Click on the Ubuntu Software tab and check the box ‘Installable from CD-Rom/DVD.’  A window will pop-up, and you will be required to enter the root password.\n![在这里插入图片描述](./images/fix-the-no-wi-fi-adapter-found-error-on-ubuntu/Install-Drivers-from-CDRom.webp)\n\nStep 5. Click on the Additional Drivers tab. If you see the statement “No additional drivers available,” this Method won’t work for you. If you see the proprietary drivers listed, then you can go ahead.\n\nSelect the proprietary drivers and click the Apply Changes button. In my case, my system supports Broadcom drivers.\n![在这里插入图片描述](./images/fix-the-no-wi-fi-adapter-found-error-on-ubuntu/Use-Broadcom.webp)\nOnce done, your wireless connection problem should be solved, and you can see your WiFi networks.\n\n> [https://www.fosslinux.com/43345/fix-the-no-wi-fi-adapter-found-error-on-ubuntu.htm](https://www.fosslinux.com/43345/fix-the-no-wi-fi-adapter-found-error-on-ubuntu.htm)","file_path":"/Users/wzq/wk/blog/docs/Unbuntu/fix-the-no-wi-fi-adapter-found-error-on-ubuntu.md","cover":"","created_at":"2022-07-24T16:04:13.801Z","updated_at":"2022-08-24T09:17:07.884Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/docs/SSH/SSH command.md":{"id":"/Users/wzq/wk/blog/docs/SSH/SSH command.md","title":"SSH command","content":"## SSH Login\n```bash\nssh  wzq@192.168.1.5\n```\n\n## scp - “Secure Copy”\nSometimes, you may want to get individual files or entire folders from the Hive machines onto your local system, or vice versa. You can do this by using scp:\n```bash\nscp <source> <destination>\n```\nFor example, If I wanted to copy from my local machine to a Remote machine, I would use:\n```bash\nscp ~/Downloads/example.txt wzq@192.168.1.5:~/some_folder/\n```\nscp by default only works with files. To copy folders, you need to tell scp to “recursively” copy the folder and all its contents, which you can do with the -r flag:\n\n```bash\nscp -rp ~/Downloads wzq@192.168.1.5:~/some_folder/\n```\n","file_path":"/Users/wzq/wk/blog/docs/SSH/SSH command.md","cover":"","created_at":"2022-10-23T11:00:30.872Z","updated_at":"2022-10-23T11:07:53.542Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/docs/Vim/vim常用命令.md":{"id":"/Users/wzq/wk/blog/docs/Vim/vim常用命令.md","title":"vim常用命令","content":"\n## 帮助\n* vimtutor 查看使用说明\n* `:help feature` 获取feature 的相关信息\n* `:help doc-file-list`获取帮助文件的完整列表\n* CONTROL+] 打开链接\n* CONTROL+o 返回\n* :q 退出帮助文档\n\n## Mode \n Vim is a modal editor. It has a normal mode, visual mode ,insert mode, and other modes.\n\n## Undo/Redo\n\n * u: undo last change\n * Ctrl_R: Redo\n\n\n## 浏览\n* ctrl+d 下翻半屏 d=down\n* ctrl+u 上翻半屏 u=up\n* ctrl+b上翻一页 b=backward\n* ctrl+f下翻一页 f=forward\n\n* 滚一行 ctrl-e ctrl-y\n\n* zz 让光标所在的行居屏幕中央\n* zt 让光标所在的行居屏幕最上一行 t=top\n* zb 让光标所在的行居屏幕最下一行 b=bottom\n\n\n## 光标移动\n* w 向前移动一个字符\n* b 向后移动一个字符\n* $ 移动到行尾\n* 0或^  移动到行首\n* gg 移动到文档头\n* G 移动到文档尾\n* `行号＋G` 跳转到某行，例如到第6行`6G`\n* `:行号`, 跳转到某行， 例如到第6行 `:6`\n* ( 或 { 移动到段落头\n* ) 或 } 移动到段落尾\n* e 移动到当前字的尾部\n* ge移动到前一个字的尾部\n* %  跳转到配对的符号上，配对符号例如: \"\", (), <>, {}\n* [[  跳转到当前或者上一代码块(函数定义、类定义等)的开头去(但要求代码块中'{'必须单独占一行)\n* ][  跳转到当前代码块(函数定义、类定义等)的结尾去(但要求代码块中'{'必须单独占一行)\n* ]]  跳转到下一代码块(函数定义、类定义等)的开头去(但要求代码块中'{'必须单独占一行)\n* [/  跳到注释开头（只对/* */注释有效）\n* ]/ 跳到注释结尾（只对/* */注释有效）\n* gD  跳转到当前文件内标识符首次出现的位置，可用于跳转到全部变量的定义处；查找局部变量时，要是多个函数中定义了该局部变量，使用gD进行查找，找到的变量定义可能不是你需要的\n* gd 跳转到当前函数内标识符首次出现的位置，可用于跳转到局部变量的定义处\n* `''`  跳转到光标上次停靠的地方, 是两个`'`, 而不是一个`\"`\n\n\n## 复制粘贴\n\n复制=Yank, 删除=Delete,  粘贴=Put\n\n* Yank(Y) 复制到通用缓冲区\n* Delete（D）删除并放到通用缓冲区\n* Put(P) 把通用缓冲区的内容插入的当前文本\n\n例如：\n\n* yy 复制当前行 \n* n+yy 复制当前行和后面n-1行 \n* gg + yG 复制全部 \n* \"ayy  复制到缓冲区a\n* \"ap 粘贴缓冲区a到文本 \n\n> Delete命令的模式同Yank一样\n\n这里介绍一下关于寄存器(registers)的操作。` “＋字母＋yy `把当前行复制到字母的命名寄存器, ` “＋字母＋p `把对应字母名字的寄存器的内容黏贴到当前文档。 更多关于寄存器的介绍参见`:help registers`\n\n## 编辑\n\n### 删除\nd+要删除的位置， 例如：\n\n* dw 删除到字的末尾\n* daw 删除一个单词\n* d3aw 删除3个单词\n* dw 删除到字的尾部\n* db 删除到字的开始\n* dd 删除一行\n* x 或 dl 删除单个字符\n* d0 或 d^ 从当前位置删除到行的头部\n* d$ 或 D 删除到行尾\n* d) 或 d} 从当前位置删除到段落尾\n* d( 或 d{ 从当前位置删除到段落头\n* d/text 删除到text单词的下一次出现\n* cw 删除到字的末尾并进入插入模式\n\n插入模式下,\n\n* ctrl+H 字符删除\n* ctrl+U 行删除\n* ctrl+W 字删除\n\n \n### 对配对符号内的内容进行操作\n配对符号包括`\"\", (), {}` 等\n\n以下命令可以对符号内的内容进行操作。\n\n* `ci+符号` 更改配对符号中的文本内容\n* `di+符号` 删除配对符号中的文本内容\n* `yi+符号` 复制配对符号中的文本内容\n* `vi+符号` 选中这些配对符号中的文本内容\n\n另外如果把上面的`i`改成`a`可以连配对符号一起操作。\n\n例如，要删除双引号内`\"\"`内的内容,  `111\"222\"333`， 将光标移到双引号内，按下`di\" ` ,删除双引号内的内容，变成 `111\"\"333`，若要连同双引号一同删除，则要按下` da\" ` ,文本会修改为： 111333\n\n### Select text inside a tag\nTag is the tag in html or xml, for example `<div> ... </div>`,\nWe can select a text within an html or xml tag by using visual selection `v` and text object `it` .\n\n1. Go to normal mode by pressing ESC\n2. Type vit from anywhere within the html or xml section\n3. This will visually select all text inside the tag.\n\n\nAll other text objects can also be used to operate on the text inside the tag\n\n\n* `vit` - select all text inside the tag\n* `cit` - delete text inside the tag and place in insert mode\n* `dit` - delete text inside the tag and remain in normal mode\n* `cat` - delete around tag and place in insert mode\n* `dat` - delete text around the tag and remain in normal mode\n\n### 格式化\n\n* `\\==` 格式化当前行\n* `n+==` 格式化当前和后面n-1行\n* `gg=G` 或者 `=` 格式化全文\n\n### 缩进\n\n插入模式下：\n\n* CTRL+T 右缩进\n* CTRL+D 左缩进\n\n命令模式下：\n\n* `>`  增加缩进,`x>` 表示增加以下x行的缩进\n* `<`  减少缩进,`x<` 表示减少以下x行的缩进\n\n### 代码注释\n** 方法一 **  \n** 多行注释：**\n\n进入命令行模式，按`ctrl + v`进入 visual block模式，然后按j或k选中多行，把需要注释的行标记起来，按大写字母I，再插入注释符，例如`//`，按esc键就会全部注释了。\n\n** 取消多行注释：**\n\n进入命令行模式，按·ctrl + v·进入 visual block模式，按字母l横向选中列的个数，例如 ·//· 需要选中2列，按字母j，或\t者k选中注释符号，按d键就可删除注释符。\n\n** 方法二 替换命令 **\n** 插入注释 **\n\n` :起始行号,结束行号s/^/注释符/g `\n\n例如：`:27,30s#^#//#g ` 就是在27 - 30行添加 // 注释`\n\n** 取消注释 **\n\n·:起始行号,结束行号s/^注释符//g·\n\n例如： `:27,30s#^//##g` 就是在27 - 30行删除 // 注释\n\n\n### 自动补全\n`crl+p 和 crl+n`\n\n\n\n## 替换\n在命令行模式下\n\n```\n:[g] [address] s/search-string/replacement-string[/option]\n```\n其中\n\n* addess：代表行\n* s: 表示替换当前字符\n* S: 表示替换当前行\n* ~: 表示修改大小写\n\n例如：\n\n* ` :s/p1/p2/g ` 将当前行中所有p1均用p2替代\n*  ` :1,.s/p1/p2/g ` 将当前行之前的所有行的字符串p1替换为字符串p2\n* ` :1,$s/p1/p2/g` 将所有出现的字符串p1替换为字符串p2\n* ` :g/chaper/s/ten/10/`将第一次出现的包含字符串chaper的所有行中的字符串ten替换为字符串10\n* `:%s/<ten>/10/g` 将所有出现的字ten替换为字符串10\n* `:.,.+10s/every/each/g`将出现的从当前行到后续10行内的每个字符串every替换为字符串each\n* ` :s/<short\\>/\"&\"/` 将当前行中的字short替换为\"short\"(即将当前行中的字short用引号括起来)\n* `:n1,n2s/p1/p2/g` 将第n1至n2行中所有p1均用p2替代\n* `:n1,n2 co n3` 将n1行到n2行之间的内容拷贝到第n3行下\n* `:n1,n2 m n3` 将n1行到n2行之间的内容移至到第n3行下\n* `:n1,n2 d` 将n1行到n2行之间的内容删除\n\n\n\n## 查找\n* `/pattern`从光标开始处向文件尾搜索pattern\n* `?pattern`从光标开始处向文件首搜索pattern\n* 鼠标移动的一个单词上,按 `*` 在全文中查找与之相同的单词\n\n> n：在同一方向重复上一次搜索命令，N：在反方向上重复上一次搜索命令\n\n\n\n\n## 标记\n`ma` 设置一个名字为`a`的标记\n\n` ‘a ` (单引号+标记a)定位到标记a的位置所在行的起始位置\n\n `a(反引号+标记a)将光标定位到标记a所在的的精确位置 \n\n` d'a ` 删除当前行到标记a所在行之间的文本\n\n` d`a ` 删除当前行到a标记处的所有文本\n\n在命令中可以作为行号使用 ，例如： `'m,.s/the/THE/g`\n\n\n## 编辑指定文件\n* ` :e[!] [filename] ` 编辑filename指定的文件，如果不指定filename，继续编辑当前文件(load文件到当前缓冲区即编辑区，可做刷新文件用)\n* `:e#` 关闭当前文件，打开上次编辑的文件\n* ` :n filename` 打开新文件\n\n## vim中执行shell\n\n* `:sh` 进入命令行模式， 按`CONTROL+D` 或输入 `exit` 命令退出命令模式\n* `:!command ` ,vim中执行command命令\n* `!!command` ,执行command命令，并把输出结果替换当前行\n* `!+行地址+ command ` ,对指定行执行command命令，并用输出结果替换\n\n \n## 重复上次命令\n`. `重复上次操作\n \n\n\n\n​","file_path":"/Users/wzq/wk/blog/docs/Vim/vim常用命令.md","cover":"","created_at":"2022-08-20T11:43:48.407Z","updated_at":"2022-08-22T04:30:44.193Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/site/Markdown/Markdown Syntax":{"id":"/Users/wzq/wk/blog/site/Markdown/Markdown Syntax","title":"Markdown Syntax","content":"","file_path":"/Users/wzq/wk/blog/site/Markdown/Markdown Syntax","cover":"","created_at":"2022-10-10T11:43:51.136Z","updated_at":"2022-10-10T11:43:51.136Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/Programing Language/Variable and Pointer.md":{"id":"/Users/wzq/wk/blog/docs/Programing Language/Variable and Pointer.md","title":"Variable and Pointer","content":"变量对应一个RAM地址。指针也是一个变量，它与普通变量的区别是，存储在指针变量里的值是另外一个RAM地址。\n\n","file_path":"/Users/wzq/wk/blog/docs/Programing Language/Variable and Pointer.md","cover":"","created_at":"2022-09-28T04:35:12.628Z","updated_at":"2022-09-28T04:46:24.151Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/docs/SSH/SSH install.md":{"id":"/Users/wzq/wk/blog/docs/SSH/SSH install.md","title":"SSH install","content":"## Intall in ubuntu\n\ninstall opensshservice\n```\nsudo apt install -y openssh-server\n```\n\ninstall openssh-client\n```\nsudo apt install -y openssh-client\n```\n\ncheck \n```\nps -aux | grep ssh\n```\n\nstartup\n```\nsudo service ssh start\n```\n","file_path":"/Users/wzq/wk/blog/docs/SSH/SSH install.md","cover":"","created_at":"2022-10-20T14:39:33.106Z","updated_at":"2022-10-20T14:50:04.586Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/docs/MacOS/MacOS必备.md":{"id":"/Users/wzq/wk/blog/docs/MacOS/MacOS必备.md","title":"MacOS必备","file_path":"/Users/wzq/wk/blog/docs/MacOS/MacOS必备.md","cover":"","is_daily":false,"is_dir":false,"content":"","created_at":"2022-10-17T09:13:45.000Z","updated_at":"2022-10-23T10:41:54.000Z"},"/Users/wzq/wk/blog/site/assets/javascripts/lunr/min":{"id":"/Users/wzq/wk/blog/site/assets/javascripts/lunr/min","title":"min","content":"","file_path":"/Users/wzq/wk/blog/site/assets/javascripts/lunr/min","cover":"","created_at":"2022-10-10T11:43:50.813Z","updated_at":"2022-10-10T11:43:50.827Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/SSH/SSH login without password":{"id":"/Users/wzq/wk/blog/site/SSH/SSH login without password","title":"SSH login without password","content":"","file_path":"/Users/wzq/wk/blog/site/SSH/SSH login without password","cover":"","created_at":"2022-10-10T11:43:51.168Z","updated_at":"2022-10-10T11:43:51.168Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/GCC/img":{"id":"/Users/wzq/wk/blog/docs/GCC/img","title":"img","file_path":"/Users/wzq/wk/blog/docs/GCC/img","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-10-09T05:33:35.000Z","updated_at":"2022-10-09T05:34:07.000Z"},"/Users/wzq/wk/blog/site/SSH":{"id":"/Users/wzq/wk/blog/site/SSH","title":"SSH","content":"","file_path":"/Users/wzq/wk/blog/site/SSH","cover":"","created_at":"2022-10-10T11:43:51.168Z","updated_at":"2022-10-10T11:43:51.168Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/Git":{"id":"/Users/wzq/wk/blog/docs/Git","title":"Git","file_path":"/Users/wzq/wk/blog/docs/Git","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-10-17T09:32:17.000Z","updated_at":"2022-10-20T14:35:03.000Z"},"/Users/wzq/wk/blog/docs/GCC/Tools for Manipulating Object Files.md":{"id":"/Users/wzq/wk/blog/docs/GCC/Tools for Manipulating Object Files.md","title":"Tools for Manipulating Object Files","file_path":"/Users/wzq/wk/blog/docs/GCC/Tools for Manipulating Object Files.md","cover":"","is_daily":false,"is_dir":false,"content":"","created_at":"2022-10-10T11:54:16.000Z","updated_at":"2022-10-10T15:13:12.000Z"},"/Users/wzq/wk/blog/requirements.txt":{"id":"/Users/wzq/wk/blog/requirements.txt","title":"requirements","content":"mkdocs\nmkdocs-material\n\nmkdocs-minify-plugin \nmkdocs-git-revision-date-localized-plugin \n","file_path":"/Users/wzq/wk/blog/requirements.txt","cover":"","created_at":"2022-07-24T16:04:13.803Z","updated_at":"2022-08-19T11:07:31.152Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/site/Program Language/Variable and Pointer":{"id":"/Users/wzq/wk/blog/site/Program Language/Variable and Pointer","title":"Variable and Pointer","content":"","file_path":"/Users/wzq/wk/blog/site/Program Language/Variable and Pointer","cover":"","created_at":"2022-10-10T11:43:51.157Z","updated_at":"2022-10-10T11:43:51.157Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/Linux":{"id":"/Users/wzq/wk/blog/site/Linux","title":"Linux","content":"","file_path":"/Users/wzq/wk/blog/site/Linux","cover":"","created_at":"2022-10-10T11:43:51.069Z","updated_at":"2022-10-10T11:43:51.080Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/Linux/Linux常用命令":{"id":"/Users/wzq/wk/blog/site/Linux/Linux常用命令","title":"Linux常用命令","content":"","file_path":"/Users/wzq/wk/blog/site/Linux/Linux常用命令","cover":"","created_at":"2022-10-10T11:43:51.069Z","updated_at":"2022-10-10T11:43:51.069Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/Markdown/Markdown Syntax.md":{"id":"/Users/wzq/wk/blog/docs/Markdown/Markdown Syntax.md","title":"Markdown Syntax","content":"# MacDown\n\n![MacDown logo](http://macdown.uranusjr.com/static/base/img/logo-160.png)\n\nHello there! I’m **MacDown**, the open source Markdown editor for OS X.\n\nLet me introduce myself.\n\n\n\n## Markdown and I\n\n**Markdown** is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found [here](http://daringfireball.net/projects/markdown/syntax).\n\n**MacDown** is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel.\n\n![MacDown Screenshot](http://d.pr/i/10UGP+)\n\nI support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the [**Markdown** preference pane](#markdown-pane).\n\nYou can specify extra HTML rendering options through the [**Rendering** preference pane](#rendering-pane).\n\nYou can customize the editor window to you liking in the [**Editor** preferences pane](#editor-pane):\n\nYou can configure various application (that's me!) behaviors in the [**General** preference pane](#general-pane).\n\n## The Basics\nBefore I tell you about all the extra syntaxes and capabilities I have, I'll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the [**Markdown** preference pane](#markdown-pane). Lets jump right in.  \n\n### Line Breaks\nTo force a line break, put two spaces and a newline (return) at the end of the line.\n\n\tThese lines\n\twon't break\n\n\tThese lines  \n\twill break\n\n\n### Strong and Emphasize\n\n**Strong**: `**Strong**` or `__Strong__` (Command-B)  \n*Emphasize*: `*Emphasize*` or `_Emphasize_`[^emphasize] (Command-I)\n\n### Headers (like this one!)\n\n\tHeader 1\n\t========\n\n\tHeader 2\n\t--------\n\nor\n\n\t# Header 1\n\t## Header 2\n\t### Header 3\n\t#### Header 4\n\t##### Header 5\n\t###### Header 6\n\n\n\n### Links and Email\n#### Inline\nJust put angle brackets around an email and it becomes clickable: <uranusjr@gmail.com>  \n`<uranusjr@gmail.com>`  \n\nSame thing with urls: <http://macdown.uranusjr.com>  \n` <http://macdown.uranusjr.com>`  \n\nPerhaps you want to some link text like this: [Macdown Website](http://macdown.uranusjr.com \"Title\")  \n`[Macdown Website](http://macdown.uranusjr.com \"Title\")` (The title is optional)  \n\n\n#### Reference style\nSometimes it looks too messy to include big long urls inline, or you want to keep all your urls together.  \n\nMake [a link][arbitrary_id] `[a link][arbitrary_id]` then on it's own line anywhere else in the file:  \n`[arbitrary_id]: http://macdown.uranusjr.com \"Title\"`\n  \nIf the link text itself would make a good id, you can link [like this][] `[like this][]`, then on it's own line anywhere else in the file:  \n`[like this]: http://macdown.uranusjr.com`  \n\n[arbitrary_id]: http://macdown.uranusjr.com \"Title\"\n[like this]: http://macdown.uranusjr.com  \n\n\n### Images\n#### Inline\n`![Alt Image Text](path/or/url/to.jpg \"Optional Title\")`\n#### Reference style\n`![Alt Image Text][image-id]`  \non it's own line elsewhere:  \n`[image-id]: path/or/url/to.jpg \"Optional Title\"`\n\n\n### Lists\n\n* Lists must be preceded by a blank line (or block element)\n* Unordered lists start each item with a `*`\n- `-` works too\n\t* Indent a level to make a nested list\n\t\t1. Ordered lists are supported.\n\t\t2. Start each item (number-period-space) like `1. `\n\t\t42. It doesn't matter what number you use, I will render them sequentially\n\t\t1. So you might want to start each line with `1.` and let me sort it out\n\nHere is the code:\n\n```\n* Lists must be preceded by a blank line (or block element)\n* Unordered lists start each item with a `*`\n- `-` works too\n\t* Indent a level to make a nested list\n\t\t1. Ordered lists are supported.\n\t\t2. Start each item (number-period-space) like `1. `\n\t\t42. It doesn't matter what number you use, I will render them sequentially\n\t\t1. So you might want to start each line with `1.` and let me sort it out\n```\n\n\n\n### Block Quote\n\n> Angle brackets `>` are used for block quotes.  \nTechnically not every line needs to start with a `>` as long as\nthere are no empty lines between paragraphs.  \n> Looks kinda ugly though.\n> > Block quotes can be nested.  \n> > > Multiple Levels\n>\n> Most markdown syntaxes work inside block quotes.\n>\n> * Lists\n> * [Links][arbitrary_id]\n> * Etc.\n\nHere is the code:\n\n```\n> Angle brackets `>` are used for block quotes.  \nTechnically not every line needs to start with a `>` as long as\nthere are no empty lines between paragraphs.  \n> Looks kinda ugly though.\n> > Block quotes can be nested.  \n> > > Multiple Levels\n>\n> Most markdown syntaxes work inside block quotes.\n>\n> * Lists\n> * [Links][arbitrary_id]\n> * Etc.\n```\n  \n  \n### Inline Code\n`Inline code` is indicated by surrounding it with backticks:  \n`` `Inline code` ``\n\nIf your ``code has `backticks` `` that need to be displayed, you can use double backticks:  \n```` ``Code with `backticks` `` ````  (mind the spaces preceding the final set of backticks)\n\n\n### Block Code\nIf you indent at least four spaces or one tab, I'll display a code block.\n\n\tprint('This is a code block')\n\tprint('The block must be preceded by a blank line')\n\tprint('Then indent at least 4 spaces or 1 tab')\n\t\tprint('Nesting does nothing. Your code is displayed Literally')\n\nI also know how to do something called [Fenced Code Blocks](#fenced-code-block) which I will tell you about later.\n\n### Horizontal Rules\nIf you type three asterisks `***` or three dashes `---` on a line, I'll display a horizontal rule:\n\n***\n\n\n## <a name=\"markdown-pane\"></a>The Markdown Preference Pane\nThis is where I keep all preferences related to how I parse markdown into html.  \n![Markdown preferences pane](http://d.pr/i/RQEi+)\n\n### Document Formatting\nThe ***Smartypants*** extension automatically transforms straight quotes (`\"` and `'`) in your text into typographer’s quotes (`“`, `”`, `‘`, and `’`) according to the context. Very useful if you’re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.\n\n\n### Block Formatting\n\n#### Table\n\nThis is a table:\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n\nYou can align cell contents with syntax like this:\n\n| Left Aligned  | Center Aligned  | Right Aligned |\n|:------------- |:---------------:| -------------:|\n| col 3 is      | some wordy text |         $1600 |\n| col 2 is      | centered        |           $12 |\n| zebra stripes | are neat        |            $1 |\n\nThe left- and right-most pipes (`|`) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on `:` marks.\n\n#### <a name=\"fenced-code-block\">Fenced Code Block</a>\n\nThis is a fenced code block:\n\n```\nprint ('Hello world!)'\n```\n\nYou can also use waves (`~`) instead of back ticks (`` ` ``):\n\n~~~\nprint('Hello world!')\n~~~\n\n\nYou can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the ***Enable highlighting in code blocks*** option. This is what happens if you enable it:\n\n![Syntax highlighting example](http://d.pr/i/9HM6+)\n\nI support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See [relevant sections on the official site](http://macdown.uranusjr.com/features/) for a full list of supported syntaxes.\n\n\n### Inline Formatting\n\nThe following is a list of optional inline markups supported:\n\nOption name         | Markup           | Result if enabled     |\n--------------------|------------------|-----------------------|\nIntra-word emphasis | So A\\*maz\\*ing   | So A<em>maz</em>ing   |\nStrikethrough       | \\~~Much wow\\~~   | <del>Much wow</del>   |\nUnderline [^under]  | \\_So doge\\_      | <u>So doge</u>        |\nQuote [^quote]      | \\\"Such editor\\\"  | <q>Such editor</q>    |\nHighlight           | \\==So good\\==    | <mark>So good</mark>  |\nSuperscript         | hoge\\^(fuga)     | hoge<sup>fuga</sup>   |\nAutolink            | http://t.co      | <http://t.co>         |\nFootnotes           | [\\^4] and [\\^4]: | [^4] and footnote 4   |\n\n[^4]: You don't have to use a number. Arbitrary things like `[^footy note4]` and `[^footy note4]:` will also work. But they will *render* as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. \n\n\n\n\n## <a name=\"rendering-pane\"></a>The Rendering Preference Pane\nThis is where I keep preferences relating to how I render and style the parsed markdown in the preview window.  \n![Rendering preferences pane](http://d.pr/i/rT4d+)\n\n### CSS\nYou can choose different css files for me to use to render your html. You can even customize or add your own custom css files.\n\n### Syntax Highlighting\nYou have already seen how I can syntax highlight your fenced code blocks. See the [Fenced Code Block](#fenced-code-block) section if you haven’t! You can also choose different themes for syntax highlighting.\n\n### TeX-like Math Syntax\nI can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\\\( 1 + 1 \\\\) or this (in MathML): <math><mn>1</mn><mo>+</mo><mn>1</mn></math>, and block math:\n\n\\\\[\n    A^T_S = B\n\\\\]\n\nor (in MathML)\n\n<math display=\"block\">\n    <msubsup><mi>A</mi> <mi>S</mi> <mi>T</mi></msubsup>\n    <mo>=</mo>\n    <mi>B</mi>\n</math>\n\n\n\n### Task List Syntax\n1. [x] I can render checkbox list syntax\n\t* [x] I support nesting\n\t* [x] I support ordered *and* unordered lists\n2. [ ] I don't support clicking checkboxes directly in the html window\n\n\n### Jekyll front-matter\nIf you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with `---`. For example:\n\n```\n---\ntitle: \"Macdown is my friend\"\ndate: 2014-06-06 20:00:00\n---\n```\n\n### Render newline literally\nNormally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some *other* program render it.\n\n\n\n\n\n## <a name=\"general-pane\"></a>The General Preferences Pane\n\nThis is where I keep preferences related to application behavior.  \n![General preferences pane](http://d.pr/i/rvwu+)\n\nThe General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit `command-R` instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases.  \n\n## <a name=\"editor-pane\"></a>The Editor Preference Pane\nThis is where I keep preferences related to the behavior and styling of the editing window.  \n![Editor preferences pane](http://d.pr/i/6OL5+)\n\n\n### Styling\n\nMy editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of [Mou](http://mouapp.com)’s creator, Chen Luo) if you don’t know where to start.\n\nYou can also edit, or even add new themes if you want to! Just click the ***Reveal*** button, and start moving things around. Remember to use the correct file extension (`.styles`), though. I’m picky about that.\n\nI offer auto-completion and other functions to ease your editing experience. If you don’t like it, however, you can turn them off.\n\n\n\n\n\n## Hack On\n\nThat’s about it. Thanks for listening. I’ll be quiet from now on (unless there’s an update about the app—I’ll remind you for that!).\n\nHappy writing!\n\n\n[^emphasize]: If **Underlines** is turned on, `_this notation_` will render as underlined instead of emphasized \n\n[^under]: If **Underline** is disabled `_this_` will be rendered as *emphasized* instead of being underlined.\n\n[^quote]: **Quote** replaces literal `\"` characters with html `<q>` tags. **Quote** and **Smartypants** are syntactically incompatible. If both are enabled, **Quote** takes precedence. Note that **Quote** is different from *blockquote*, which is part of standard Markdown.\n\n[^math]: Internet connection required.\n\n\n> [https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\n","file_path":"/Users/wzq/wk/blog/docs/Markdown/Markdown Syntax.md","cover":"","created_at":"2022-08-22T09:03:21.453Z","updated_at":"2022-10-10T16:46:30.106Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/site/GDB/gdb demo":{"id":"/Users/wzq/wk/blog/site/GDB/gdb demo","title":"gdb demo","content":"","file_path":"/Users/wzq/wk/blog/site/GDB/gdb demo","cover":"","created_at":"2022-10-10T11:43:50.806Z","updated_at":"2022-10-10T11:43:51.050Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/Markdown":{"id":"/Users/wzq/wk/blog/site/Markdown","title":"Markdown","content":"","file_path":"/Users/wzq/wk/blog/site/Markdown","cover":"","created_at":"2022-10-10T11:43:51.136Z","updated_at":"2022-10-10T11:43:51.148Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/Linux/Shell Script":{"id":"/Users/wzq/wk/blog/site/Linux/Shell Script","title":"Shell Script","content":"","file_path":"/Users/wzq/wk/blog/site/Linux/Shell Script","cover":"","created_at":"2022-10-10T11:43:51.080Z","updated_at":"2022-10-10T11:43:51.080Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/assets/images":{"id":"/Users/wzq/wk/blog/site/assets/images","title":"images","content":"","file_path":"/Users/wzq/wk/blog/site/assets/images","cover":"","created_at":"2022-10-10T11:43:50.810Z","updated_at":"2022-10-10T11:43:50.810Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site":{"id":"/Users/wzq/wk/blog/site","title":"site","content":"","file_path":"/Users/wzq/wk/blog/site","cover":"","created_at":"2022-07-24T14:58:33.338Z","updated_at":"2022-10-10T11:43:51.215Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/GDB/gdb demo/gdb demo.md":{"id":"/Users/wzq/wk/blog/docs/GDB/gdb demo/gdb demo.md","title":"gdb demo","file_path":"/Users/wzq/wk/blog/docs/GDB/gdb demo/gdb demo.md","cover":"","is_daily":false,"is_dir":false,"created_at":"2022-10-05T05:40:59.000Z","content":"## Source Code\n\nmap.c\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n/* A statically allocated variable */\nint foo;\n\n/* UNCOMMENT THIS LINE for 3.4.3*/\nextern int recur(int i);\n\n\n/* A statically allocated, pre-initialized variable */\nvolatile int stuff = 7;\n\nint main(int argc, char *argv[]) {\n    /* A stack allocated variable */\n    volatile int n = 3;\n\n    int arr[] = {1, 2, 3, 4, 5};\n    \n    if(argc=2)  \n      n = atoi(argv[1]);\n\n    /* Dynamically allocate some stuff */\n    char *buf1 = malloc(100);\n    /* ... and some more stuff */\n    volatile char *buf2 = malloc(100);\n\n    sprintf(buf1, \"hello world\");\n    recur(n);\n    return 0;\n}\n```\n\nrecurse.c\n\n```c\n#include <stdio.h>\n\nint recur(int i) {\n    /* A stack allocated variable within a recursive function */\n    int j = i;\n    printf(\"%i\\n\", i);\n\n    if (i > 0) {\n        return recur(i - 1);\n    }\n\n    return 0;\n}\n```\n\n## Compiling\n\nYou have to tell your compiler to compile your code with symbolic debugging information included. Here's how to do it with gcc, with the -g switch:\n\n```\ngcc -g map.c recurse.c -o map\n```\n\n## Starting The Debugger\n\nTo start the gdb and pass arguments, type the command in the terminal\n\n```\ngdb --args <program> <args...>\n```\n\nIf the program has no arguments, just type\n\n```\ngdb  <program>\n```\n\nFot this demo, we launch a program called map in the debugger and pass argument 5.\n\n```\n$ gdb --args map 5\n```\n\n## Breakpoints\n\n### Break point\n\nTo set a new breakpoint, You use the break or b command, and specify a location, which can be a function name,  line number, or source file:line number.\n\n```\nbreak <where>\n```\n\nWhere\n\n* line_number\n* function_name\n* file:line_number/function_name\n\nFor this demo, let's set a breakpoint at main(), and start the program:\n\n```\n(gdb) break main\nBreakpoint 1 at 0x6e9: file map.c, line 18.\n```\n\nwhen you type `run` command , program will suspend at the first break point it encounter.\n\n```\n(gdb) run\nStarting program: /home/vagrant/code/personal/hw-intro/map 5\n\nBreakpoint 1, main (argc=2, argv=0x7fffffffe3a8) at map.c:18\n18\t    if(argc<2) n= 3;\n(gdb) \n```\n\n### Condition break point\n\n```\nbreak <where> if <condition> \n```\n\nBreak at the given location if the condition is met. Conditions may be almost any C expression that evaluate to true or false.\n\n```\n(gdb) break recur if i==1\nBreakpoint 2 at 0x55555555475e: file recurse.c, line 5.\n(gdb) continue\nContinuing.\n\nBreakpoint 2, recur (i=1) at recurse.c:5\n5\t    int j = i;\n(gdb) print i\n$1 = 1\n```\n\n### Set/change the condition\n\n```\ncondition <breakpoint#> <condition> \n```\n\nSet/change the condition of an existing breakpoint.\n\n```\n(gdb) condition 2 i==0\n```\n\n## Watchpoints\n\n```\nwatch <expression>\n```\n\nNote that watch takes an expression as an argument, so you can put a variable name in there, or something more complex like `*(p+5)` or `a[15]`\n\nwatchpoints are special breakpoints that will trigger whenever an expression changes. Often you just want to know when a variable changes (is written to), and for that you can use the watch command:\n\n```\n(gdb) watch n\nHardware watchpoint 2: n\n(gdb) next\n\nHardware watchpoint 2: n\n\nOld value = 21845\nNew value = 3\nmain (argc=2, argv=0x7fffffffe3a8) at map.c:18\n18\t    if(argc=2)  \n(gdb) \n19\t      n = atoi(argv[1]);\n(gdb) \n\nHardware watchpoint 2: n\n\nOld value = 3\nNew value = 5\nmain (argc=2, argv=0x7fffffffe3a8) at map.c:22\n22\t    char *buf1 = malloc(100);\n(gdb) \n```\n\n## Stepping\n\n### Next statement\n\nStep N statements, proceeding through subroutine calls.\n\n```\nnext [N]\n```\n\nUnlike \"step\", if the current source line calls a subroutine,\nthis command does not enter the subroutine, but instead steps over\nthe call, in effect treating it as a single source line.\n\n```\n(gdb) next\n19\t    else n = atoi(argv[1]);\n(gdb) \n```\n\nHitting Enter key will repeat the last command, this will save you typing `next` over and over again.\n\n### Step into subroutine\n\n```\nstep [N]\n```\n\nStep statement, if it's a subroutine call it will enter into the subroutine.\n\n```\n27\t    recur(n);\n(gdb) step \nrecur (i=5) at recurse.c:5\n5\t    int j = i;\n(gdb) \n```\n\n### finish\n\n```\nfinish\n```\n\nContinue until the current function returns.\n\n### continue\n\n```\ncontinue\n```\n\nContinue normal execution until the end of programe or the next breakpoint.\n\n### Advance\n\n```\nadvance <where>\n```\n\nTo continue to a specific location, use the advance command, specifying a location like those shown in the \"Breakpoints\" section, above. Here's an example which advances from the current location until the function \"recur()\" is called:\n\n```\n(gdb) advance recur\nrecur (i=5) at recurse.c:5\n5\t    int j = i;\n(gdb) \n```\n\nadvance is just shorthand for \"continue to this temporary breakpoint.\"\n\n### Next instruction\n\n```\nnexti [N]\n```\n\nStep a single assembly instruction, but proceed through subroutine calls.\n\n### Step instruction\n\n```\nstepi [N]\n```\n\nStep a single assembly instruction if it's a subroutine call it will enter into the function.\n\n## Examining Variables and memory\n\n### Print Variables\n\nPrint content of variable/memory location/register.\n\n```\nprint/format <what>\n```\n\nFormat\n\n* a: Pointer.\n* c: Read as integer, print as character. d Integer, signed decimal.\n* f: Floating point number.\n* o: Integer, print as octal.\n* s: Try to treat as C string.\n* t: Integer, print as binary (t = \"two“).\n* u: Integer, unsigned decimal.\n* x: Integer, print as hexadecimal.\n\nWhat\n\n* \"expression\" Almost any C expression, including function calls (must be prefixed with a cast to tell GDB the return value type).\n* \"file_name::variable_name\" Content of the variable defined in the named file (static variables).\n* \"function::variable_name\" Content of the variable defined in the named function (if on the stack).\n* \"{type}address\" Content at address, interpreted as being of the C type type.\n* \"$register\" Content of named register. Interesting registers are $esp (stack pointer), $ebp (frame pointer) and $eip (instruction pointer).\n\n```\n(gdb) print n\n$1 = 5\n(gdb) print/t n\n$2 = 101\n```\n\n### printf\n\n```\n(gdb) printf \"%08X\\n\", n\n00000005\n```\n\n### Print Array\n\n```\nprint *array@len\n```\n\nPrint the first 3 elements of the Array\n\n```\n(gdb) print arr[0]@3\n$4 = {1, 2, 3}\n```\n\n### Display Variables\n\n```\ndisplay/format <what>\n```\n\nLike `print`, but print the information after each stepping instruction.\n\nFor this demo\n\n```\n(gdb) display i\n1: i = 5\n(gdb) next\n6\t    printf(\"%i\\n\", i);\n1: i = 5\n(gdb) next\n5\n8\t    if (i > 0) {\n1: i = 5\n```\n\n### Examining Memory\n\n```\nx/nfu <address> \n```\n\n* n: How many units to print (default 1).\n* f: Format character (like „print“).\n* \\\n  \\\n  \\\n  \\\n  \\\n  u: Unit.Unit is one of:b: Byteh: Half-word (two bytes)w: Word (four bytes)g: Giant word (eight bytes)).\n\nFor this demo,\n\n```\n(gdb) x buf1\n0x555555756260:\t\"hello world\"\n(gdb) x/11x buf1\n0x555555756260:\t0x68\t0x65\t0x6c\t0x6c\t0x6f\t0x20\t0x77\t0x6f\n0x555555756268:\t0x72\t0x6c\t0x64\n```\n\n## Examining the call stack\n\nShow call stack.\n\n```\nbacktrace [full]\n```\n\nThe command `backtrace` (or `bt`) will show you the current function call stack, with the current function at the top, and the callers in order beneath it:\n\nUse of the 'full' qualifier also prints the values of the local variables.\n\n```\n(gdb) backtrace\n#0  recur (i=3) at recurse.c:5\n#1  0x0000555555554832 in recur (i=4) at recurse.c:9\n#2  0x0000555555554832 in recur (i=5) at recurse.c:9\n#3  0x00005555555547dd in main (argc=2, argv=0x7fffffffe3a8) at map.c:29\n```\n\n## directory\n\n```\ndirectory <directory>\n```\n\nAdd directory to the list of directories that is searched for sources.\n\n## Listing Source Code\n\n```\nlist\nlist <filename>:<function> \nlist <filename>:<line_number> \nlist <first>,<last>\n```\n\nShows the current or given source context. The filename may be omitted. If last is omitted the context starting at start is printed instead of centered around it.\n\n```\n(gdb) list\n22\t    char *buf1 = malloc(100);\n23\t    /* ... and some more stuff */\n24\t    volatile char *buf2 = malloc(100);\n25\t\n26\t    sprintf(buf1, \"hello world\");\n27\t    recur(n);\n28\t    return 0;\n29\t}\n```\n\n## Call function\n\n```\ncall functionName(args...)\n```\n\nexecute arbitrary function and print the result.\n\n```\n(gdb) call recur(3)\n$1 = 0\n```\n\n## Informations\n\n* info breakpoints: Print informations about the breakpoints and watchpoints.\n* info registers: Print values of all registers.\n* info args: Print the arguments to the function of the current stack frame.\n* info display: Print informations about the „displays“.\n* info locals: Print the local variables in the currently selected stack frame.\n* info sharedlibrary: List loaded shared libraries.\n* info signals: List all signals and how they are cur- rently handled.\n* info threads: List all threads.\n\n## Disassemble\n\nDisassemble the current function or given location.\n\n```\ndisassemble <where>\n```\n\nFor this demo, I have enter into recur function, then I execute `disassemble`, gdb print out the assembly code of this \"recur\" function.\n\n```\n(gdb) disassemble\nDump of assembler code for function recur:\n   0x00005555555547f8 <+0>:\tpush   %rbp\n   0x00005555555547f9 <+1>:\tmov    %rsp,%rbp\n   0x00005555555547fc <+4>:\tsub    $0x20,%rsp\n   0x0000555555554800 <+8>:\tmov    %edi,-0x14(%rbp)\n=> 0x0000555555554803 <+11>:\tmov    -0x14(%rbp),%eax\n   0x0000555555554806 <+14>:\tmov    %eax,-0x4(%rbp)\n   0x0000555555554809 <+17>:\tmov    -0x14(%rbp),%eax\n   0x000055555555480c <+20>:\tmov    %eax,%esi\n   0x000055555555480e <+22>:\tlea    0xaf(%rip),%rdi        # 0x5555555548c4\n   0x0000555555554815 <+29>:\tmov    $0x0,%eax\n   0x000055555555481a <+34>:\tcallq  0x5555555545f0 <printf@plt>\n   0x000055555555481f <+39>:\tcmpl   $0x0,-0x14(%rbp)\n   0x0000555555554823 <+43>:\tjle    0x555555554834 <recur+60>\n   0x0000555555554825 <+45>:\tmov    -0x14(%rbp),%eax\n   0x0000555555554828 <+48>:\tsub    $0x1,%eax\n   0x000055555555482b <+51>:\tmov    %eax,%edi\n   0x000055555555482d <+53>:\tcallq  0x5555555547f8 <recur>\n   0x0000555555554832 <+58>:\tjmp    0x555555554839 <recur+65>\n   0x0000555555554834 <+60>:\tmov    $0x0,%eax\n   0x0000555555554839 <+65>:\tleaveq \n   0x000055555555483a <+66>:\tretq   \nEnd of assembler dump.\n```\n\n## Layout\n\n* `layout src`\tStandard layout—source on top, command window on the bottom\n* `layout asm`\tJust like the \"src\" layout, except it's an assembly window on top\n* `layout split`\tThree windows: source on top, assembly in the middle, and command at the bottom\n* `layout reg`\tOpens the register window on top of either source or assembly, whichever was opened last\n* `tui reg general`\tShow the general registers\n* `tui reg float`\tShow the floating point registers\n* `tui reg system`\tShow the \"system\" registers\n* `tui reg next`\tShow the next page of registers—this is important because there might be pages of registers that aren't in the \"general\", \"float\", or \"system\" sets\n\nFor this demo, when you type `layout asm` command ,you will see the interface as following\n ![layout asm](./img/AsmLayout.png)\n\nIn asm layout , we can use `nexti` or `stepi`   command to step to the next asm instruction\n\n## Help\n\n`help command`\tGet help on a certain command\nFor example\n\n```\nhelp breakpoint \n```\n\n## GDB dashboard\n\n[GDB dashboard](https://github.com/cyrus-and/gdb-dashboard) is a standalone \".gdbinit\" file.\nJust place \".gdbinit\" in your home directory or project directory, for example with:\n\n```\nwget -P ~ https://git.io/.gdbinit\n```\n\nThen debug as usual, the dashboard will appear automatically every time the inferior program stops.\n\nOptionally install Pygments to enable syntax highlighting:\n\n```\npip install pygments\n```\n\nIf it has no effect, execute the following command in the terminal\n\n```\nset auto-load local-gdbinit on\n```\n\n## LLDB\n\nIn MacOS use [LLDB](https://lldb.llvm.org/use/map.html) instead.\n\n## Some other commands\n\n ![Commands](./img/commands1.jpg)\n\n> \\\n> \\\n> \\\n> <https://beej.us/guide/bggdb>[https://wiki.ubuntu.org.cn/用GDB调试程序](https://wiki.ubuntu.org.cn/%E7%94%A8GDB%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F)<http://www.unknownroad.com/rtfm/gdbtut/gdbtoc.html>[Official documentation](https://sourceware.org/gdb/current/onlinedocs/gdb/)\n\n\\\n","updated_at":"2022-10-26T05:37:36.000Z"},"/Users/wzq/wk/blog/site/MacOS":{"id":"/Users/wzq/wk/blog/site/MacOS","title":"MacOS","content":"","file_path":"/Users/wzq/wk/blog/site/MacOS","cover":"","created_at":"2022-10-10T11:43:51.095Z","updated_at":"2022-10-10T11:43:51.106Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/Shell":{"id":"/Users/wzq/wk/blog/docs/Shell","title":"Shell","file_path":"/Users/wzq/wk/blog/docs/Shell","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-10-11T18:08:31.000Z"},"/Users/wzq/wk/blog/site/Vim":{"id":"/Users/wzq/wk/blog/site/Vim","title":"Vim","content":"","file_path":"/Users/wzq/wk/blog/site/Vim","cover":"","created_at":"2022-10-10T11:43:51.201Z","updated_at":"2022-10-10T11:43:51.201Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/Unbuntu":{"id":"/Users/wzq/wk/blog/site/Unbuntu","title":"Unbuntu","content":"","file_path":"/Users/wzq/wk/blog/site/Unbuntu","cover":"","created_at":"2022-10-10T11:43:50.808Z","updated_at":"2022-10-10T11:43:51.179Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/assets":{"id":"/Users/wzq/wk/blog/site/assets","title":"assets","content":"","file_path":"/Users/wzq/wk/blog/site/assets","cover":"","created_at":"2022-10-10T11:43:50.810Z","updated_at":"2022-10-10T11:43:50.832Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/assets/javascripts/lunr":{"id":"/Users/wzq/wk/blog/site/assets/javascripts/lunr","title":"lunr","content":"","file_path":"/Users/wzq/wk/blog/site/assets/javascripts/lunr","cover":"","created_at":"2022-10-10T11:43:50.813Z","updated_at":"2022-10-10T11:43:50.828Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/GDB":{"id":"/Users/wzq/wk/blog/site/GDB","title":"GDB","content":"","file_path":"/Users/wzq/wk/blog/site/GDB","cover":"","created_at":"2022-10-10T11:43:50.804Z","updated_at":"2022-10-10T11:43:50.806Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/index.md":{"id":"/Users/wzq/wk/blog/docs/index.md","title":"index","file_path":"/Users/wzq/wk/blog/docs/index.md","cover":"","is_daily":false,"is_dir":false,"content":"","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-07-24T16:04:13.000Z"},"/Users/wzq/wk/blog/site/GCC/GCC Linking":{"id":"/Users/wzq/wk/blog/site/GCC/GCC Linking","title":"GCC Linking","content":"","file_path":"/Users/wzq/wk/blog/site/GCC/GCC Linking","cover":"","created_at":"2022-10-10T11:43:51.011Z","updated_at":"2022-10-10T11:43:51.011Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/Unbuntu/fix-the-no-wi-fi-adapter-found-error-on-ubuntu":{"id":"/Users/wzq/wk/blog/site/Unbuntu/fix-the-no-wi-fi-adapter-found-error-on-ubuntu","title":"fix-the-no-wi-fi-adapter-found-error-on-ubuntu","content":"","file_path":"/Users/wzq/wk/blog/site/Unbuntu/fix-the-no-wi-fi-adapter-found-error-on-ubuntu","cover":"","created_at":"2022-10-10T11:43:51.179Z","updated_at":"2022-10-10T11:43:51.179Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/Unbuntu":{"id":"/Users/wzq/wk/blog/docs/Unbuntu","title":"Unbuntu","file_path":"/Users/wzq/wk/blog/docs/Unbuntu","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-07-24T11:42:03.000Z","updated_at":"2022-07-24T16:04:13.000Z"},"/Users/wzq/wk/blog/docs/Markdown/Markdown模版.md":{"id":"/Users/wzq/wk/blog/docs/Markdown/Markdown模版.md","title":"Markdown模版","content":" \n<!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly -->\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.css\" integrity=\"sha384-bYdxxUwYipFNohQlHt0bjN/LCpueqWz13HufFEV1SUatKs1cm4L6fFgCi1jT643X\" crossorigin=\"anonymous\"/>\n\n    \n<script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.js\" integrity=\"sha384-Qsn9KnoKISj6dI8g7p1HBlNpVx0I8p1SvlwOldgi3IorMle61nQy4zEahWYtljaz\" crossorigin=\"anonymous\"></script>\n\n\n<script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/contrib/auto-render.min.js\" integrity=\"sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05\" crossorigin=\"anonymous\" onload=\"renderMathInElement(document.body);\"></script>\n<!-- KaTeX End-->\n\n\n\n# 欢迎使用Markdown编辑器\n\n## KaTeX数学公式\n\n您可以使用渲染LaTeX数学表达式 [KaTeX][1]:\n\n\nGamma公式展示 $$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$$  是通过欧拉积分\n\n$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\n$$\n\n \n[1]: https://katex.org/\n[2]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n[3]: https://katex.org/docs/browser.html\n[4]: https://mermaidjs.github.io/\n[5]: http://adrai.github.io/flowchart.js/\n","file_path":"/Users/wzq/wk/blog/docs/Markdown/Markdown模版.md","cover":"","created_at":"2022-10-05T14:22:00.275Z","updated_at":"2022-10-06T03:35:06.668Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/docs/Git/Git commands.md":{"id":"/Users/wzq/wk/blog/docs/Git/Git commands.md","title":"Git commands","content":"## How to \"merge\" specific files from another branch\n```bash\ngit checkout branch file\n```\nor\n```bash\ngit checkout --patch branch file\n```\n","file_path":"/Users/wzq/wk/blog/docs/Git/Git commands.md","cover":"","created_at":"2022-10-20T14:33:31.135Z","updated_at":"2022-10-20T14:36:04.397Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/site/Vim/vim常用命令":{"id":"/Users/wzq/wk/blog/site/Vim/vim常用命令","title":"vim常用命令","content":"","file_path":"/Users/wzq/wk/blog/site/Vim/vim常用命令","cover":"","created_at":"2022-10-10T11:43:51.201Z","updated_at":"2022-10-10T11:43:51.201Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/编辑器":{"id":"/Users/wzq/wk/blog/docs/编辑器","title":"编辑器","file_path":"/Users/wzq/wk/blog/docs/编辑器","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-09-11T04:37:11.000Z","updated_at":"2022-09-11T05:58:52.000Z"},"/Users/wzq/wk/blog/docs/Unbuntu/images":{"id":"/Users/wzq/wk/blog/docs/Unbuntu/images","title":"images","content":"","file_path":"/Users/wzq/wk/blog/docs/Unbuntu/images","cover":"","created_at":"2022-07-24T11:46:50.052Z","updated_at":"2022-07-24T11:47:31.201Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/docs/Shell/Shell Script.md":{"id":"/Users/wzq/wk/blog/docs/Shell/Shell Script.md","title":"Shell Script","content":"\n## local variable\n\n```bash\nlocal d=\"hello\" \n``` \n\nRemark: both side of '=' can't have white space.\n\n## function \n\n```bash\n# declaration function\nfunction recurse() {\n  local dir=${1}\n # ls ${1}\n  #cd ${1}\n  for file in `ls ${dir}`\n  do\n    if [[ -d ${dir}/$file ]]; then\n        recurse ${dir}/$file\n    elif [[ -f ${dir}/$file ]]; then\n        if [[ $file == *.xml ]]\n        then\n           echo ${dir}/${file} \n           #echo rename ${dir}/${file}\n        fi\n    else\n        echo \"$file is not valid\"\n        exit 1\n    fi\n  done\n}\n# call function\nrecurse ~/wk/nand2tetris/projects\n```\n\n## Loop Statement\n\n```bash\nfor file in `ls ~/wk/nand2tetris/projects/01`\ndo\n  echo ${file}\ndone\n```\n\n```bash\nfor file in $(find . -name \"*.c\")\ndo\n  filename=${file%.c}\n  echo $filename.cpp\ndone\n\n```\n\n```bash\nfor (( i=0; i<10; i++ ))\ndo\n  echo $i \ndone\n\n```\n\n\n## If Statement\n\n```bash\nif [[ -d $file ]]; then\n    echo \"$file is a directory\"\nelif [[ -f $file ]]; then\n    echo \"$file is a file\"\nelse\n    echo \"$file is not valid\"\n    exit 1\nfi\n```\n\n## Case Statement\n\n```bash\ncase ${1} in\n  \"release\")\n   echo \"release case\"\n  ;;\n  \n  \"debug\")\n   echo \"debug case\"\n  ;;  \n\n  \"help\")\n  echo \"usage case\"\n  ;;\n\n  \"\")\n  echo \"No argument case\"\n  ;;\n  \n  *)\n  echo \"Default case.\"\n  ;;\n\nesac\n```\n\n\n\n","file_path":"/Users/wzq/wk/blog/docs/Shell/Shell Script.md","cover":"","created_at":"2022-08-26T12:38:14.176Z","updated_at":"2022-10-13T03:37:24.331Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/docs/Algorithms/Using_a_Stack_to_Evaluate_an_Expression.md":{"id":"/Users/wzq/wk/blog/docs/Algorithms/Using_a_Stack_to_Evaluate_an_Expression.md","title":"Using_a_Stack_to_Evaluate_an_Expression","content":"# Using a Stack to Evaluate an Expression\n\nWe often deal with arithmetic expressions written in what is called infix notation:\n\n```\t\t\n         Operand1 op Operand2\n```\n\nWe have rules to indicate which operations take precedence over others, and we often use parentheses to override those rules.\n\nIt is also quite possible to write arithmetic expressions using postfix notation:\n\n```\n     Operand1 Operand2 op\n```\n\nWith postfix notation, it is possible to use a stack to find the overall value of an infix expression by first converting it to postfix notation.\n\nExample: Suppose we have this infix expression Q:\n\n```\n     5 * ( 6 + 2 ) - 12 / 4\n```\n\nThe equivalent postfix expression P is:\n\n```\n     5 6 2 + * 12 4 / -\n```\n\nThis discussion assumes all our operations are binary operations (2 arguments each). Notice that we also sometimes use unary operations such as ++ or -- or the unary + and -.\n\nWe are not including the possibility of array elements in this discussion. (The subscript can be an expression which would have to be evaluated.)\n\nOne way to think of an expression is as a list or sequence of items, each of which is a left parenthesis, right parenthesis, argument, or operator. An argument can be a constant or the name of a variable. Presumably it would be necessary at some point to replace each variable with its value.\n\nThere are two algorithms involved. One converts an infix expression to postfix form, and the other evaluates a postfix expression. Each uses a stack.\n\n## Transform an infix expression to postfix notation\n\nSuppose Q is an arithmetic expression in infix notation. We will create an equivalent postfix expression P by adding items to on the right of P. The new expression P will not contain any parentheses.\n\nWe will use a stack in which each item may be a left parenthesis or the symbol for an operation.\n\n```\n Start with an empty stack.  We scan Q from left to right. \n\n While (we have not reached the end of Q)\n    If (an operand is found)\n       Add it to P\n    End-If\n    If (a left parenthesis is found) \n       Push it onto the stack\n    End-If\n    If (a right parenthesis is found) \n       While (the stack is not empty AND the top item is\n              not a left parenthesis)\n          Pop the stack and add the popped value to P\n       End-While\n       Pop the left parenthesis from the stack and discard it \n    End-If\n    If (an operator is found)\n        While (the stack is not empty AND the top of the stack \n               is not a left parenthesis AND precedence of the                  \n               operator <= precedence of the top of the stack)\n           Pop the stack and add the top value to P\n        End-While\n        Push the operator onto the stack     \n    End-If\n End-While\n While (the stack is not empty)\n    Pop the stack and add the popped value to P\n End-While\n```\n\nNotes:\n\n* At the end, if there is still a left parenthesis at the top of the stack, or if we find a right parenthesis when the stack is empty, then Q contained unbalanced parentheses and is in error.\n\n## Evaluate a postfix expression\n\nSuppose P is an arithmetic expression in postfix notation. We will evaluate it using a stack to hold the operands.\n\n```\n Start with an empty stack.  We scan P from left to right.\n\n While (we have not reached the end of P)\n    If an operand is found\n       push it onto the stack\n    End-If\n    If an operator is found\n       Pop the stack and call the value A\n       Pop the stack and call the value B\n       Evaluate B op A using the operator just found.\n       Push the resulting value onto the stack\n    End-If\nEnd-While\nPop the stack (this is the final value)\n```\n\nNotes:\n\n* At the end, there should be only one element left on the stack.\n* This assumes the postfix expression is valid.\n\n## How can this be implemented?\n\nWork like this is usually done by an assembler, compiler or interpreter. A programmer uses an expression in her or her code, and evaluating it is someone else's problem.\n\nSuppose it is our problem (maybe we are writing an interpreter). The interpreter is reading a line at a time from a file as a string, such as\n\n```\n     A = ((B + C) / 3 - 47 % E) * (F + 8)\n```\n\nThe string needs to be parsed--that is, we need to break it up into substrings, each of which is one meaningful part. These substrings are often called tokens. The tokens are separated by spaces, in many cases, but also a token ends if we find a left or right parenthesis or the symbol for an operator. Thus for instance, in the above example, we have \"E)\", and this consists of two tokens \"E\" and \")\". Bear in mind that the symbol for an operator can be more than one character.\n\nWe then have a list of tokens, perhaps in an array or a linked list. Somewhere we will have an Evaluate function which takes such a list as an argument and returns a numeric value.\n\n## A java implementation\n\n```java\n /**\n * A perfect calculator\n * <p>\n * Dijkstra’s Two-Stack Algorithm for Expression Evaluation\n * <p>\n * Reference:\n * http://faculty.cs.niu.edu/~hutchins/csci241/eval.htm\n * https://en.wikipedia.org/wiki/Shunting_yard_algorithm\n * Discrete mathmatics and its application 7th --> 11.3 Tree Travesal\n *\n * <p>\n * % java Calculator\n * 2 +  ( 3 + 4 ) * ( 5 * 6 )\n * 212.0\n * <p>\n * 1 +  ( 2 + 3 ) * ( 4 * 5 )\n * 101.0\n * <p>\n * ( 1 + sqrt( 5.0+4*3+sqrt(3+30*2) ) ) / 2.0\n * 2.996860725651001\n * <p>\n * ( 1 + sqrt ( 5.0 ) ) / 2.0\n * 1.618033988749895\n */\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.util.Stack;\nimport java.util.TreeMap;\n\npublic class Calculator {\n\n  // key is operator, value is precedence\n  private final static Map<String, Integer> OPERATOR_MAP = new TreeMap<>();\n\n  static {\n    // <Operator, Precedence>\n    OPERATOR_MAP.put(\"+\", 1);\n    OPERATOR_MAP.put(\"-\", 1);\n    OPERATOR_MAP.put(\"*\", 2);\n    OPERATOR_MAP.put(\"/\", 2);\n    OPERATOR_MAP.put(\"^\", 3); // power\n    OPERATOR_MAP.put(\"sqrt\", 4);\n    OPERATOR_MAP.put(\"sin\", 4);\n    OPERATOR_MAP.put(\"cos\", 4);\n    OPERATOR_MAP.put(\"log\", 4); //natural logarithm\n  }\n\n  public Calculator() {\n  }\n\n  public double evaluate(String expression) {\n    if (expression == null || expression.length() == 0) {\n      throw new IllegalArgumentException(\"empty expression\");\n    }\n    return evaluatePostfix(infixToPostfix(tokenizeExpression(expression)));\n  }\n\n  private List<String> tokenizeExpression(String expression) {\n    List<String> infixQ = new ArrayList<>();\n    StringBuilder buf = new StringBuilder();\n    int len = expression.length();\n    for (int i = 0; i < len; i++) {\n      char c = expression.charAt(i);\n      if (Character.isWhitespace(c)) {\n        if (buf.length() > 0) {\n          infixQ.add(buf.toString());\n          buf = new StringBuilder();\n        }\n        continue;\n      }\n      if (isSymbol(c)) {\n        if (buf.length() > 0) {\n          infixQ.add(buf.toString());\n          buf = new StringBuilder();\n        }\n\n        infixQ.add(String.valueOf(c));\n      } else\n        buf.append(c);\n    }\n\n    if (buf.length() > 0)\n      infixQ.add(buf.toString());\n    return infixQ;\n\n  }\n\n  /**\n   * Transform an infix queue to postfix queue\n   *\n   * @param infixQ\n   * @return\n   */\n  private List<String> infixToPostfix(List<String> infixQ) {\n    if (infixQ == null || infixQ.isEmpty()) {\n      throw new IllegalArgumentException(\"empty infixQ\");\n    }\n    List<String> postfixQ = new ArrayList<>();\n    //operator stack , a stack in which each item may be a left parenthesis or the symbol for an operation.\n    Stack<String> stack = new Stack<String>();\n    for (String token : infixQ) {\n      //If (an operand is found) Add it to P\n      if (isNumeric(token)) {\n        postfixQ.add(token);\n      } else if (token.equals(\"(\")) {\n        stack.push(token);\n      } else if (token.equals(\")\")) {\n        while (!stack.isEmpty() && !stack.peek().equals(\"(\")) {\n          postfixQ.add(stack.pop());\n        }\n        //Pop the left parenthesis from the stack and discard it\n        if (stack.isEmpty() || !stack.pop().equals(\"(\")) {\n          throw new IllegalArgumentException(\"The infixQ contained unbalanced parentheses \");\n        }\n      } else if (isOperator(token)) {\n        while (!stack.isEmpty() && !stack.peek().equals(\"(\") && precedence(stack.peek()) >= precedence(token)) {\n          postfixQ.add(stack.pop());\n        }\n        stack.push(token);\n      }  else {\n        throw new IllegalArgumentException(\"Invalid token found:\" + token);\n      }\n    }\n    while (!stack.isEmpty()) {\n      String op = stack.pop();\n      if (!op.equals(\"(\"))\n        postfixQ.add(op);\n      else\n        throw new IllegalArgumentException(\"The infixQ contained unbalanced parentheses \");\n\n    }\n    return postfixQ;\n  }\n\n  private static boolean isOperator(String token) {\n    return OPERATOR_MAP.containsKey(token);\n  }\n\n  private static boolean isSymbol(char c) {\n    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^' || c == '(' || c == ')' || c == ',';\n  }\n\n  /**\n   * Evaluate a postfix queue\n   *\n   * @param postfixQ\n   * @return\n   */\n  private Double evaluatePostfix(List<String> postfixQ) {\n    if (postfixQ == null || postfixQ.isEmpty()) {\n      throw new IllegalArgumentException(\"empty postfixQ\");\n    }\n    //operand stack, a stack to hold the operands.\n    Stack<Double> stack = new Stack<>();\n    for (String token : postfixQ) {\n      //If an operand is found push it onto the stack\n      if (isNumeric(token)) {\n        stack.push(Double.parseDouble(token));\n      } else if (isOperator(token)) {\n        //If an operator is found\n        double v = stack.pop();\n        switch (token) {\n          case \"+\":\n            v = stack.pop() + v;\n            break;\n          case \"-\":\n            v = stack.pop() - v;\n            break;\n          case \"*\":\n            v = stack.pop() * v;\n            break;\n          case \"/\":\n            v = stack.pop() / v;\n            break;\n          case \"^\":\n            v = Math.pow(stack.pop(), v);\n            break;\n          case \"sqrt\":\n            v = Math.sqrt(v);\n            break;\n          case \"sin\":\n            v = Math.sin(degreeToRadian(v));\n            break;\n          case \"cos\":\n            v = Math.cos(degreeToRadian(v));\n            break;\n          case \"log\":\n            v = Math.log(v);\n            break;\n          default:\n            break;\n        }\n        stack.push(v);\n      } else {\n        throw new IllegalArgumentException(\" invalid token found:\" + token);\n      }\n    }\n    //At the end, there should be only one element left on the stack.\n    if (stack.size() != 1) {\n      throw new IllegalArgumentException(\"Invalid postfix\");\n    }\n    return stack.pop();\n  }\n\n\n  private int precedence(String token) {\n    return OPERATOR_MAP.get(token);\n  }\n\n  private static double degreeToRadian(double degree) {\n    return degree / 180 * Math.PI;\n  }\n\n  private static boolean isNumeric(String token) {\n    if (token == null) {\n      return false;\n    }\n    try {\n      Double.parseDouble(token);\n    } catch (NumberFormatException nfe) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * match a number with optional '-' and decimal.\n   */\n  private static boolean isNumeric2(String str) {\n    return str.matches(\"-?\\\\d+(\\\\.\\\\d+)?\");\n  }\n\n  private double debug(String expression) {\n    System.out.println(\"---expression---\");\n    System.out.println(expression);\n    List<String> infixQ = tokenizeExpression(expression);\n    System.out.println(\"---tokenize---\");\n    for (String token : infixQ) {\n      System.out.print(token + \" \");\n    }\n    System.out.println(\"\\n---transform to postfix---\");\n    List<String> postfixQ = infixToPostfix(infixQ);\n    for (String token : postfixQ) {\n      System.out.print(token + \" \");\n    }\n    System.out.println();\n    return evaluatePostfix(postfixQ);\n  }\n\n  private static void simulate() {\n    //    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    //    String line = br.readLine();\n    Calculator cal = new Calculator();\n    Scanner scanner = new Scanner(System.in, \"UTF-8\");\n    while (scanner.hasNextLine()) {\n      String expression = scanner.nextLine().trim();\n      if (expression.length() == 0)\n        continue;\n      if (expression.equals(\"quit\"))\n        break;\n      System.out.println(cal.evaluate(expression));\n    }\n  }\n\n  public static void main(String[] args) {\n\n   // simulate();\n    test1();\n//    test2();\n   //  testCorrect();\n  }\n\n  private static void test1() {\n\n    String expression = \"3+4*2-2^3\";\n    //String expression = \"3 4 2 * + 1 - \";\n    // String expression = \"3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3\";\n\n    Calculator cal = new Calculator();\n\n    System.out.println(\"value:\" + cal.debug(expression));\n  }\n\n  private static void test2() {\n    List<String> expressions = new ArrayList<>();\n    expressions.add(\"(8+9)^2+(8-4)/3\");\n    expressions.add(\"(2+sqrt(5+4))\");\n    expressions.add(\"2 + ( 3 + 4 ) * ( 5 * 6 )\");\n    expressions.add(\"1 + ( 2 + 3 ) * ( 4 * 5 )\");\n    expressions.add(\"(1 + sqrt(5.0+4*3+sqrt(30*2+3)) ) / 2.0\");\n    expressions.add(\"(1 + log( 5.0+4*3+sqrt(30*2+3) ) ) / 2.0\");\n    expressions.add(\"(1 + sqrt ( 5.0 ) ) / 2.0\");\n    expressions.add(\"6*sin(30)\");\n    expressions.add(\"6*(5+4+3)\");\n    expressions.add(\"2*(5+4+3+2*2*2+1)\");\n    expressions.add(\"3 + 4 * 2 - 1\");\n    expressions.add(\"3 + 4 * (2 - 1)\");\n    expressions.add(\"3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3\");\n    expressions.add(\"1 + 3 + 2 * 4  * (2 - 1)\");\n    // expressions.add(\"\");\n    Calculator cal = new Calculator();\n    for (String expression : expressions) {\n      System.out.println(expression + \" = \" + cal.evaluate(expression));\n    }\n  }\n\n  private static void testCorrect() {\n    Calculator cal = new Calculator();\n    if (cal.evaluate(\"(8+9)^2+(8-4)/3\") != (Math.pow(8 + 9, 2) + (8.0 - 4.0) / 3)) {\n      throw new Error(\"false\");\n    }\n    if (cal.evaluate(\"(2+sqrt(5+4))\") != ((2 + Math.sqrt(5 + 4)))) {\n      throw new Error(\"false\");\n    }\n    if (cal.evaluate(\"2 + ( 3 + 4 ) * ( 5 * 6 )\") != (2 + (3 + 4) * (5 * 6))) {\n      throw new Error(\"false\");\n    }\n    if (cal.evaluate(\"(1 + sqrt(5.0+4*3+sqrt(30*2+3)) ) / 2.0\") != ((1 + Math.sqrt(5.0 + 4 * 3 + Math.sqrt(30 * 2 + 3))) / 2.0)) {\n      throw new Error(\"false\");\n    }\n    if (cal.evaluate(\"(1 + log( 5.0+4*3+sqrt(30*2+3) ) ) / 2.0\") != ((1 + Math.log(5.0 + 4 * 3 + Math.sqrt(30 * 2 + 3))) / 2.0)) {\n      throw new Error(\"false\");\n    }\n    if (cal.evaluate(\"(1 + sqrt ( 5.0 ) ) / 2.0\") != ((1 + Math.sqrt(5.0)) / 2.0)) {\n      throw new Error(\"false\");\n    }\n    if (cal.evaluate(\"6*sin(30)\") != (6 * Math.sin(degreeToRadian(30)))) {\n      throw new Error(cal.evaluate(\"6*sin(30)\") + \" = \" + (6 * Math.sin(degreeToRadian(30))));\n    }\n    if (cal.evaluate(\"6*(5+4+3)\") != (6 * (5 + 4 + 3))) {\n      throw new Error(\"false\");\n    }\n    if (cal.evaluate(\"2*(5+4+3+2*2*2+1)\") != (2 * (5 + 4 + 3 + 2 * 2 * 2 + 1))) {\n      throw new Error(\"false\");\n    }\n    if (cal.evaluate(\"3 + 4 * 2 - 1\") != (3 + 4 * 2 - 1)) {\n      throw new Error(\"false\");\n    }\n    if (cal.evaluate(\"3 + 4 * (2 - 1)\") != (3 + 4 * (2 - 1))) {\n      throw new Error(\"false\");\n    }\n\n    if (cal.evaluate(\"3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3\") != (3 + 4 * 2 / Math.pow(Math.pow(1 - 5, 2), 3))) {\n      throw new Error(\"false\");\n    }\n    if (cal.evaluate(\"1 + 3 + 2 * 4  * (2 - 1)\") != (1 + 3 + 2 * 4 * (2 - 1))) {\n      throw new Error(\"false\");\n    }\n     \n    System.out.println(\"Pass!\");\n  }\n}\n\n```\n\n> <http://faculty.cs.niu.edu/\\~hutchins/csci241/eval.htm>\n> <https://en.wikipedia.org/wiki/Shunting_yard_algorithm>\n> <https://www.geeksforgeeks.org/expression-evaluation/>\n\n\\\n","file_path":"/Users/wzq/wk/blog/docs/Algorithms/Using_a_Stack_to_Evaluate_an_Expression.md","cover":"","created_at":"2022-07-24T16:04:13.800Z","updated_at":"2022-10-26T05:34:10.629Z","is_daily":false,"is_dir":false},"/Users/wzq/wk/blog/docs/MacOS":{"id":"/Users/wzq/wk/blog/docs/MacOS","title":"MacOS","file_path":"/Users/wzq/wk/blog/docs/MacOS","cover":"","is_daily":false,"is_dir":true,"content":" ","created_at":"2022-08-21T11:16:52.000Z","updated_at":"2022-10-17T09:33:17.000Z"},"/Users/wzq/wk/blog/docs/MacOS/MacOS常用命令.md":{"id":"/Users/wzq/wk/blog/docs/MacOS/MacOS常用命令.md","title":"MacOS常用命令","file_path":"/Users/wzq/wk/blog/docs/MacOS/MacOS常用命令.md","cover":"","is_daily":false,"is_dir":false,"created_at":"2022-08-24T09:13:31.000Z","updated_at":"2022-10-05T09:08:33.000Z","content":"\n## 网络\n\n ```\n netstat -f inet -n -p TCP UD\n ```\n\n## 查看端口占用\n\n```\nlsof -i :8080\n```\n\n## 输出到剪切版\n\necho hello | pbcopy"},"/Users/wzq/wk/blog/site/Unbuntu/images":{"id":"/Users/wzq/wk/blog/site/Unbuntu/images","title":"images","content":"","file_path":"/Users/wzq/wk/blog/site/Unbuntu/images","cover":"","created_at":"2022-10-10T11:43:50.808Z","updated_at":"2022-10-10T11:43:50.808Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/Markdown/Markdown模版":{"id":"/Users/wzq/wk/blog/site/Markdown/Markdown模版","title":"Markdown模版","content":"","file_path":"/Users/wzq/wk/blog/site/Markdown/Markdown模版","cover":"","created_at":"2022-10-10T11:43:51.148Z","updated_at":"2022-10-10T11:43:51.148Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/GCC":{"id":"/Users/wzq/wk/blog/site/GCC","title":"GCC","content":"","file_path":"/Users/wzq/wk/blog/site/GCC","cover":"","created_at":"2022-10-10T11:43:50.804Z","updated_at":"2022-10-10T11:43:51.025Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/search":{"id":"/Users/wzq/wk/blog/site/search","title":"search","content":"","file_path":"/Users/wzq/wk/blog/site/search","cover":"","created_at":"2022-10-10T11:43:51.215Z","updated_at":"2022-10-10T11:43:51.215Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/assets/javascripts/workers":{"id":"/Users/wzq/wk/blog/site/assets/javascripts/workers","title":"workers","content":"","file_path":"/Users/wzq/wk/blog/site/assets/javascripts/workers","cover":"","created_at":"2022-10-10T11:43:50.830Z","updated_at":"2022-10-10T11:43:50.831Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/assets/stylesheets":{"id":"/Users/wzq/wk/blog/site/assets/stylesheets","title":"stylesheets","content":"","file_path":"/Users/wzq/wk/blog/site/assets/stylesheets","cover":"","created_at":"2022-10-10T11:43:50.832Z","updated_at":"2022-10-10T11:43:50.836Z","is_daily":false,"is_dir":true},"/Users/wzq/wk/blog/site/Program Language":{"id":"/Users/wzq/wk/blog/site/Program Language","title":"Program Language","content":"","file_path":"/Users/wzq/wk/blog/site/Program Language","cover":"","created_at":"2022-10-10T11:43:51.157Z","updated_at":"2022-10-10T11:43:51.157Z","is_daily":false,"is_dir":true}},"notetree":{"/Users/wzq/wk/blog":[{"id":"/Users/wzq/wk/blog/docs","title":"docs","created_at":"2022-07-24T10:15:56.000Z","updated_at":"2022-10-17T09:32:17.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/site","title":"site","created_at":"2022-07-24T14:58:33.000Z","updated_at":"2022-10-10T11:43:51.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/requirements.txt","title":"requirements","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-08-19T11:07:31.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/README.md","title":"README","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-07-30T12:43:31.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/blogserver.sh","title":"blogserver.sh","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-08-27T04:55:05.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/mkdocs.yml","title":"mkdocs.yml","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-10-23T12:34:17.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/mkdocs.blogs.plist","title":"mkdocs.blogs.plist","created_at":"2022-08-20T10:45:29.000Z","updated_at":"2022-08-22T02:35:04.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/install-requirements.sh","title":"install-requirements.sh","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-07-24T16:04:13.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/build.sh","title":"build.sh","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-07-24T16:04:13.000Z","is_dir":false,"children":[],"collapsed":true}],"/Users/wzq/wk/blog/docs":[{"id":"/Users/wzq/wk/blog/docs/Vim","title":"Vim","created_at":"2022-08-20T11:42:04.000Z","updated_at":"2022-08-20T14:32:17.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/GDB","title":"GDB","created_at":"2022-10-05T05:40:13.000Z","updated_at":"2022-10-05T13:55:38.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/MacOS","title":"MacOS","created_at":"2022-08-21T11:16:52.000Z","updated_at":"2022-10-17T09:33:17.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/编辑器","title":"编辑器","created_at":"2022-09-11T04:37:11.000Z","updated_at":"2022-09-11T05:58:52.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/Unbuntu","title":"Unbuntu","created_at":"2022-07-24T11:42:03.000Z","updated_at":"2022-07-24T16:04:13.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/Shell","title":"Shell","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-10-11T18:08:31.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/Vagrant","title":"Vagrant","created_at":"2022-10-11T07:53:21.000Z","updated_at":"2022-10-11T07:54:51.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/Markdown","title":"Markdown","created_at":"2022-10-05T14:10:59.000Z","updated_at":"2022-10-05T14:23:06.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/Algorithms","title":"Algorithms","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-09-23T00:28:16.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/GCC","title":"GCC","created_at":"2022-10-09T05:23:18.000Z","updated_at":"2022-10-10T11:54:16.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/SSH","title":"SSH","created_at":"2022-10-05T14:42:38.000Z","updated_at":"2022-10-23T11:00:30.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/Programing Language","title":"Programing Language","created_at":"2022-09-28T04:32:49.000Z","updated_at":"2022-09-28T04:41:25.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/Git","title":"Git","created_at":"2022-10-17T09:32:17.000Z","updated_at":"2022-10-20T14:35:03.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/index.md","title":"index","created_at":"2022-07-24T16:04:13.000Z","updated_at":"2022-07-24T16:04:13.000Z","is_dir":false,"children":[],"collapsed":true}],"/Users/wzq/wk/blog/docs/GCC":[{"id":"/Users/wzq/wk/blog/docs/GCC/img","title":"img","created_at":"2022-10-09T05:33:35.000Z","updated_at":"2022-10-09T05:34:07.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/GCC/Tools for Manipulating Object Files.md","title":"Tools for Manipulating Object Files","created_at":"2022-10-10T11:54:16.000Z","updated_at":"2022-10-10T15:13:12.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/GCC/GCC compiling processes.md","title":"GCC compiling processes","created_at":"2022-10-09T05:24:38.000Z","updated_at":"2022-10-10T17:01:55.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/GCC/GCC Linking.md","title":"GCC Linking","created_at":"2022-10-09T14:20:45.000Z","updated_at":"2022-10-10T16:52:03.000Z","is_dir":false,"children":[],"collapsed":true}],"/Users/wzq/wk/blog/docs/Git":[{"id":"/Users/wzq/wk/blog/docs/Git/git.txt","title":"git","created_at":"2022-10-17T09:32:40.000Z","updated_at":"2022-10-20T12:13:38.000Z","is_dir":false,"children":[],"collapsed":true}],"/Users/wzq/wk/blog/docs/GDB":[{"id":"/Users/wzq/wk/blog/docs/GDB/gdb demo","title":"gdb demo","created_at":"2022-10-05T05:40:38.000Z","updated_at":"2022-10-05T10:29:18.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/GDB/gdbnotes-x86-64.pdf","title":"gdbnotes-x86-64.pdf","created_at":"2022-10-05T13:52:29.000Z","updated_at":"2022-10-05T13:52:29.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/GDB/GDB Cheat Sheet.pdf","title":"GDB Cheat Sheet.pdf","created_at":"2022-10-05T03:27:23.000Z","updated_at":"2022-10-05T03:27:23.000Z","is_dir":false,"children":[],"collapsed":true}],"/Users/wzq/wk/blog/docs/GDB/gdb demo":[{"id":"/Users/wzq/wk/blog/docs/GDB/gdb demo/img","title":"img","created_at":"2022-10-05T10:29:18.000Z","updated_at":"2022-10-05T13:47:03.000Z","is_dir":true,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/GDB/gdb demo/gdb demo.md","title":"gdb demo","created_at":"2022-10-05T05:40:59.000Z","updated_at":"2022-10-25T13:59:09.000Z","is_dir":false,"children":[],"collapsed":true}],"/Users/wzq/wk/blog/docs/GDB/gdb demo/img":[{"id":"/Users/wzq/wk/blog/docs/GDB/gdb demo/img/commands1.jpg","title":"commands1.jpg","created_at":"2022-10-05T11:01:34.000Z","updated_at":"2022-10-05T11:01:34.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/GDB/gdb demo/img/AsmLayout.png","title":"AsmLayout.png","created_at":"2022-10-05T10:24:16.000Z","updated_at":"2022-10-05T10:24:16.000Z","is_dir":false,"children":[],"collapsed":true}],"/Users/wzq/wk/blog/docs/MacOS":[{"id":"/Users/wzq/wk/blog/docs/MacOS/Launching Custom Daemons Using launchd.md","title":"Launching Custom Daemons Using launchd","created_at":"2022-08-21T11:20:29.000Z","updated_at":"2022-09-22T05:51:27.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/MacOS/MacOS必备.md","title":"MacOS必备","created_at":"2022-10-17T09:13:45.000Z","updated_at":"2022-10-23T10:41:54.000Z","is_dir":false,"children":[],"collapsed":true},{"id":"/Users/wzq/wk/blog/docs/MacOS/MacOS常用命令.md","title":"MacOS常用命令","created_at":"2022-08-24T09:13:31.000Z","updated_at":"2022-10-05T09:08:33.000Z","is_dir":false,"children":[],"collapsed":true}]},"activities":{"2022-10-10":{"activityNum":84,"createNum":41,"updateNum":43},"2022-10-9":{"activityNum":5,"createNum":4,"updateNum":1},"2022-10-11":{"activityNum":6,"createNum":2,"updateNum":4},"2022-10-5":{"activityNum":13,"createNum":8,"updateNum":5},"2022-7-24":{"activityNum":6,"createNum":5,"updateNum":1},"2022-9-11":{"activityNum":4,"createNum":2,"updateNum":2},"2022-7-25":{"activityNum":11,"createNum":8,"updateNum":3},"2022-9-23":{"activityNum":2,"createNum":1,"updateNum":1},"2022-10-17":{"activityNum":5,"createNum":3,"updateNum":2},"2022-8-20":{"activityNum":3,"createNum":2,"updateNum":1},"2022-8-21":{"activityNum":2,"createNum":2,"updateNum":0},"2022-9-28":{"activityNum":4,"createNum":2,"updateNum":2},"2022-10-23":{"activityNum":5,"createNum":1,"updateNum":4},"2022-10-20":{"activityNum":7,"createNum":2,"updateNum":5},"2022-8-22":{"activityNum":2,"createNum":1,"updateNum":1},"2022-8-26":{"activityNum":1,"createNum":1,"updateNum":0},"2022-8-24":{"activityNum":2,"createNum":1,"updateNum":1},"2022-10-26":{"activityNum":4,"createNum":0,"updateNum":4},"2022-9-22":{"activityNum":1,"createNum":0,"updateNum":1},"2022-7-30":{"activityNum":1,"createNum":0,"updateNum":1},"2022-8-19":{"activityNum":1,"createNum":0,"updateNum":1},"2022-10-12":{"activityNum":1,"createNum":0,"updateNum":1},"2022-10-6":{"activityNum":1,"createNum":0,"updateNum":1},"2022-10-13":{"activityNum":1,"createNum":0,"updateNum":1},"2022-10-25":{"activityNum":1,"createNum":0,"updateNum":1}}}