{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"index.md","title":"\u7b80\u4ecb"},{"location":"Algorithms/Using_a_Stack_to_Evaluate_an_Expression/","text":"Using a Stack to Evaluate an Expression We often deal with arithmetic expressions written in what is called infix notation: Operand1 op Operand2 We have rules to indicate which operations take precedence over others, and we often use parentheses to override those rules. It is also quite possible to write arithmetic expressions using postfix notation: Operand1 Operand2 op With postfix notation, it is possible to use a stack to find the overall value of an infix expression by first converting it to postfix notation. Example: Suppose we have this infix expression Q: 5 * ( 6 + 2 ) - 12 / 4 The equivalent postfix expression P is: 5 6 2 + * 12 4 / - This discussion assumes all our operations are binary operations (2 arguments each). Notice that we also sometimes use unary operations such as ++ or -- or the unary + and -. We are not including the possibility of array elements in this discussion. (The subscript can be an expression which would have to be evaluated.) One way to think of an expression is as a list or sequence of items, each of which is a left parenthesis, right parenthesis, argument, or operator. An argument can be a constant or the name of a variable. Presumably it would be necessary at some point to replace each variable with its value. There are two algorithms involved. One converts an infix expression to postfix form, and the other evaluates a postfix expression. Each uses a stack. Transform an infix expression to postfix notation Suppose Q is an arithmetic expression in infix notation. We will create an equivalent postfix expression P by adding items to on the right of P. The new expression P will not contain any parentheses. We will use a stack in which each item may be a left parenthesis or the symbol for an operation. Start with an empty stack. We scan Q from left to right. While (we have not reached the end of Q) If (an operand is found) Add it to P End-If If (a left parenthesis is found) Push it onto the stack End-If If (a right parenthesis is found) While (the stack is not empty AND the top item is not a left parenthesis) Pop the stack and add the popped value to P End-While Pop the left parenthesis from the stack and discard it End-If If (an operator is found) If (the stack is empty or if the top element is a left parenthesis) Push the operator onto the stack Else While (the stack is not empty AND the top of the stack is not a left parenthesis AND precedence of the operator <= precedence of the top of the stack) Pop the stack and add the top value to P End-While Push the latest operator onto the stack End-If End-If End-While While (the stack is not empty) Pop the stack and add the popped value to P End-While Notes: * At the end, if there is still a left parenthesis at the top of the stack, or if we find a right parenthesis when the stack is empty, then Q contained unbalanced parentheses and is in error. Evaluate a postfix expression Suppose P is an arithmetic expression in postfix notation. We will evaluate it using a stack to hold the operands. Start with an empty stack. We scan P from left to right. While (we have not reached the end of P) If an operand is found push it onto the stack End-If If an operator is found Pop the stack and call the value A Pop the stack and call the value B Evaluate B op A using the operator just found. Push the resulting value onto the stack End-If End-While Pop the stack (this is the final value) Notes: At the end, there should be only one element left on the stack. This assumes the postfix expression is valid. How can this be implemented? Work like this is usually done by an assembler, compiler or interpreter. A programmer uses an expression in her or her code, and evaluating it is someone else's problem. Suppose it is our problem (maybe we are writing an interpreter). The interpreter is reading a line at a time from a file as a string, such as A = ((B + C) / 3 - 47 % E) * (F + 8) The string needs to be parsed--that is, we need to break it up into substrings, each of which is one meaningful part. These substrings are often called tokens. The tokens are separated by spaces, in many cases, but also a token ends if we find a left or right parenthesis or the symbol for an operator. Thus for instance, in the above example, we have \"E)\", and this consists of two tokens \"E\" and \")\". Bear in mind that the symbol for an operator can be more than one character. We then have a list of tokens, perhaps in an array or a linked list. Somewhere we will have an Evaluate function which takes such a list as an argument and returns a numeric value. A java implementation /** * A perfect calculator * <p> * Dijkstra\u2019s Two-Stack Algorithm for Expression Evaluation * Reference: * http://faculty.cs.niu.edu/~hutchins/csci241/eval.htm * Discrete mathmatics and its application 7th --> 11.3 Tree Travesal * * <p> * % java Calculator * 2 + ( 3 + 4 ) * ( 5 * 6 ) * 212.0 * <p> * 1 + ( 2 + 3 ) * ( 4 * 5 ) * 101.0 * <p> * ( 1 + sqrt( 5.0+4*3+sqrt(30*2+3) ) ) / 2.0 * 2.996860725651001 * <p> * ( 1 + sqrt ( 5.0 ) ) / 2.0 * 1.618033988749895 */ import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.Scanner; import java.util.Stack; import java.util.TreeMap; public class Calculator { // key is operator, value is precedence private final Map<String, Integer> OPERATOR_MAP = new TreeMap<>(); public Calculator() { // <symbol, precedence> OPERATOR_MAP.put(\"+\", 1); OPERATOR_MAP.put(\"-\", 1); OPERATOR_MAP.put(\"*\", 2); OPERATOR_MAP.put(\"/\", 2); OPERATOR_MAP.put(\"^\", 3); // power OPERATOR_MAP.put(\"sqrt\", 4); OPERATOR_MAP.put(\"sin\", 4); OPERATOR_MAP.put(\"cos\", 4); OPERATOR_MAP.put(\"log\", 4); //natural logarithm } public double evaluate(String expression) { if (expression == null || expression.length() == 0) { throw new IllegalArgumentException(\"empty expression\"); } return evaluatePostfix(infixToPostfix(tokenlizedExpression(expression))); } private List<String> tokenlizedExpression(String expression) { List<String> infixQ = new ArrayList<>(); StringBuilder buf = new StringBuilder(); int len = expression.length(); for (int i = 0; i < len; i++) { char c = expression.charAt(i); if (c == ' ') continue; if (OPERATOR_MAP.containsKey(String.valueOf(c)) || c == '(' || c == ')') { if (buf.length() > 0) { infixQ.add(buf.toString()); buf = new StringBuilder(); } infixQ.add(String.valueOf(c)); } else buf.append(c); } if (buf.length() > 0) infixQ.add(buf.toString()); return infixQ; } /** * Transform an infix queue to postfix queue * * @param infixQ * @return */ private List<String> infixToPostfix(List<String> infixQ) { if (infixQ == null || infixQ.isEmpty()) { throw new IllegalArgumentException(\"empty infixQ\"); } List<String> postfixQ = new ArrayList<>(); //operator stack , a stack in which each item may be a left parenthesis or the symbol for an operation. Stack<String> stack = new Stack<String>(); for (String token : infixQ) { //If (an operand is found) Add it to P if (isNumeric(token)) { postfixQ.add(token); } else if (token.equals(\"(\")) { stack.push(token); } else if (token.equals(\")\")) { while (!stack.isEmpty() && !stack.peek().equals(\"(\")) { postfixQ.add(stack.pop()); } //Pop the left parenthesis from the stack and discard it if (stack.isEmpty() || !stack.pop().equals(\"(\")) { throw new IllegalArgumentException(\" then infixQ contained unbalanced parentheses \"); } } else if (OPERATOR_MAP.containsKey(token)) { if (stack.isEmpty() || stack.peek().equals(\"(\")) { stack.push(token); } else { while (!stack.isEmpty() && !stack.peek().equals(\"(\") && precedence(token) <= precedence(stack.peek())) { postfixQ.add(stack.pop()); } stack.push(token); } } else { throw new IllegalArgumentException(\" invalid token found:\" + token); } } while (!stack.isEmpty()) { String opt = stack.pop(); if (!opt.equals(\"(\")) postfixQ.add(opt); else throw new IllegalArgumentException(\" then infixQ contained unbalanced parentheses \"); } return postfixQ; } /** * Evaluate a postfix queue * * @param postfixQ * @return */ private Double evaluatePostfix(List<String> postfixQ) { if (postfixQ == null || postfixQ.isEmpty()) { throw new IllegalArgumentException(\"empty postfixQ\"); } //operand stack, a stack to hold the operands. Stack<Double> stack = new Stack<>(); for (String token : postfixQ) { //If an operand is found push it onto the stack if (isNumeric(token)) { stack.push(Double.parseDouble(token)); } else if (OPERATOR_MAP.containsKey(token)) { //If an operator is found double v = stack.pop(); if (token.equals(\"+\")) v = stack.pop() + v; else if (token.equals(\"-\")) v = stack.pop() - v; else if (token.equals(\"*\")) v = stack.pop() * v; else if (token.equals(\"/\")) v = stack.pop() / v; else if (token.equals(\"^\")) v = Math.pow(stack.pop(), v); else if (token.equals(\"sqrt\")) v = Math.sqrt(v); else if (token.equals(\"sin\")) v = Math.sin(degreeToRadian(v)); else if (token.equals(\"cos\")) v = Math.cos(degreeToRadian(v)); else if (token.equals(\"log\")) v = Math.log(v); stack.push(v); } else { throw new IllegalArgumentException(\" invalid token found:\" + token); } } //At the end, there should be only one element left on the stack. if (stack.size() != 1) { throw new IllegalArgumentException(\"Invalid postfix\"); } return stack.pop(); } private int precedence(String token) { return OPERATOR_MAP.get(token); } private static double degreeToRadian(double degree) { return degree / 180 * Math.PI; } private static boolean isNumeric(String token) { if (token == null) { return false; } try { Double.parseDouble(token); } catch (NumberFormatException nfe) { return false; } return true; } /** * match a number with optional '-' and decimal. */ private static boolean isNumeric2(String str) { return str.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"); } private double debug(String expression) { System.out.println(\"---expression---\"); System.out.println(expression); List<String> infixQ = tokenlizedExpression(expression); System.out.println(\"---infix---\"); for (String token : infixQ) { System.out.print(token + \" \"); } System.out.println(\"\\n---postfix---\"); List<String> postfixQ = infixToPostfix(infixQ); for (String token : postfixQ) { System.out.print(token + \" \"); } System.out.println(); return evaluatePostfix(postfixQ); } private static void simulate() { // BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); // String line = br.readLine(); Calculator cal = new Calculator(); Scanner scanner = new Scanner(System.in, \"UTF-8\"); while (scanner.hasNextLine()) { String expression = scanner.nextLine().trim(); if (expression.length() == 0) continue; if (expression.equals(\"quit\")) break; System.out.println(cal.evaluate(expression)); } } public static void main(String[] args) { simulate(); // test2(); // testCorrect(); } private static void test1() { String expression = \"2*(5+4+3+2*2*2+1)\"; Calculator cal = new Calculator(); System.out.println(\"value:\" + cal.debug(expression)); } private static void test2() { List<String> expressions = new ArrayList<>(); expressions.add(\"(8+9)^2+(8-4)/3\"); expressions.add(\"(2+sqrt(5+4))\"); expressions.add(\"2 + ( 3 + 4 ) * ( 5 * 6 )\"); expressions.add(\"1 + ( 2 + 3 ) * ( 4 * 5 )\"); expressions.add(\"(1 + sqrt(5.0+4*3+sqrt(30*2+3)) ) / 2.0\"); expressions.add(\"(1 + log( 5.0+4*3+sqrt(30*2+3) ) ) / 2.0\"); expressions.add(\"(1 + sqrt ( 5.0 ) ) / 2.0\"); expressions.add(\"6*sin(30)\"); expressions.add(\"6*(5+4+3)\"); expressions.add(\"2*(5+4+3+2*2*2+1)\"); Calculator cal = new Calculator(); for (String expression : expressions) { System.out.println(expression + \" = \" + cal.evaluate(expression)); } } private static void testCorrect() { Calculator cal = new Calculator(); if (cal.evaluate(\"(1 + sqrt(5.0+4*3+sqrt(30*2+3)) ) / 2.0\") == (1 + Math.sqrt(5.0 + 4 * 3 + Math.sqrt(30 * 2 + 3))) / 2.0) { System.out.println(\"passed\"); } else { throw new Error(\"Not a correct value\"); } } } http://faculty.cs.niu.edu/~hutchins/csci241/eval.htm","title":"Using a Stack to Evaluate an Expression"},{"location":"Algorithms/Using_a_Stack_to_Evaluate_an_Expression/#using-a-stack-to-evaluate-an-expression","text":"We often deal with arithmetic expressions written in what is called infix notation: Operand1 op Operand2 We have rules to indicate which operations take precedence over others, and we often use parentheses to override those rules. It is also quite possible to write arithmetic expressions using postfix notation: Operand1 Operand2 op With postfix notation, it is possible to use a stack to find the overall value of an infix expression by first converting it to postfix notation. Example: Suppose we have this infix expression Q: 5 * ( 6 + 2 ) - 12 / 4 The equivalent postfix expression P is: 5 6 2 + * 12 4 / - This discussion assumes all our operations are binary operations (2 arguments each). Notice that we also sometimes use unary operations such as ++ or -- or the unary + and -. We are not including the possibility of array elements in this discussion. (The subscript can be an expression which would have to be evaluated.) One way to think of an expression is as a list or sequence of items, each of which is a left parenthesis, right parenthesis, argument, or operator. An argument can be a constant or the name of a variable. Presumably it would be necessary at some point to replace each variable with its value. There are two algorithms involved. One converts an infix expression to postfix form, and the other evaluates a postfix expression. Each uses a stack.","title":"Using a Stack to Evaluate an Expression"},{"location":"Algorithms/Using_a_Stack_to_Evaluate_an_Expression/#transform-an-infix-expression-to-postfix-notation","text":"Suppose Q is an arithmetic expression in infix notation. We will create an equivalent postfix expression P by adding items to on the right of P. The new expression P will not contain any parentheses. We will use a stack in which each item may be a left parenthesis or the symbol for an operation. Start with an empty stack. We scan Q from left to right. While (we have not reached the end of Q) If (an operand is found) Add it to P End-If If (a left parenthesis is found) Push it onto the stack End-If If (a right parenthesis is found) While (the stack is not empty AND the top item is not a left parenthesis) Pop the stack and add the popped value to P End-While Pop the left parenthesis from the stack and discard it End-If If (an operator is found) If (the stack is empty or if the top element is a left parenthesis) Push the operator onto the stack Else While (the stack is not empty AND the top of the stack is not a left parenthesis AND precedence of the operator <= precedence of the top of the stack) Pop the stack and add the top value to P End-While Push the latest operator onto the stack End-If End-If End-While While (the stack is not empty) Pop the stack and add the popped value to P End-While Notes: * At the end, if there is still a left parenthesis at the top of the stack, or if we find a right parenthesis when the stack is empty, then Q contained unbalanced parentheses and is in error.","title":"Transform an infix expression to postfix notation"},{"location":"Algorithms/Using_a_Stack_to_Evaluate_an_Expression/#evaluate-a-postfix-expression","text":"Suppose P is an arithmetic expression in postfix notation. We will evaluate it using a stack to hold the operands. Start with an empty stack. We scan P from left to right. While (we have not reached the end of P) If an operand is found push it onto the stack End-If If an operator is found Pop the stack and call the value A Pop the stack and call the value B Evaluate B op A using the operator just found. Push the resulting value onto the stack End-If End-While Pop the stack (this is the final value) Notes: At the end, there should be only one element left on the stack. This assumes the postfix expression is valid.","title":"Evaluate a postfix expression"},{"location":"Algorithms/Using_a_Stack_to_Evaluate_an_Expression/#how-can-this-be-implemented","text":"Work like this is usually done by an assembler, compiler or interpreter. A programmer uses an expression in her or her code, and evaluating it is someone else's problem. Suppose it is our problem (maybe we are writing an interpreter). The interpreter is reading a line at a time from a file as a string, such as A = ((B + C) / 3 - 47 % E) * (F + 8) The string needs to be parsed--that is, we need to break it up into substrings, each of which is one meaningful part. These substrings are often called tokens. The tokens are separated by spaces, in many cases, but also a token ends if we find a left or right parenthesis or the symbol for an operator. Thus for instance, in the above example, we have \"E)\", and this consists of two tokens \"E\" and \")\". Bear in mind that the symbol for an operator can be more than one character. We then have a list of tokens, perhaps in an array or a linked list. Somewhere we will have an Evaluate function which takes such a list as an argument and returns a numeric value.","title":"How can this be implemented?"},{"location":"Algorithms/Using_a_Stack_to_Evaluate_an_Expression/#a-java-implementation","text":"/** * A perfect calculator * <p> * Dijkstra\u2019s Two-Stack Algorithm for Expression Evaluation * Reference: * http://faculty.cs.niu.edu/~hutchins/csci241/eval.htm * Discrete mathmatics and its application 7th --> 11.3 Tree Travesal * * <p> * % java Calculator * 2 + ( 3 + 4 ) * ( 5 * 6 ) * 212.0 * <p> * 1 + ( 2 + 3 ) * ( 4 * 5 ) * 101.0 * <p> * ( 1 + sqrt( 5.0+4*3+sqrt(30*2+3) ) ) / 2.0 * 2.996860725651001 * <p> * ( 1 + sqrt ( 5.0 ) ) / 2.0 * 1.618033988749895 */ import java.util.ArrayList; import java.util.List; import java.util.Map; import java.util.Scanner; import java.util.Stack; import java.util.TreeMap; public class Calculator { // key is operator, value is precedence private final Map<String, Integer> OPERATOR_MAP = new TreeMap<>(); public Calculator() { // <symbol, precedence> OPERATOR_MAP.put(\"+\", 1); OPERATOR_MAP.put(\"-\", 1); OPERATOR_MAP.put(\"*\", 2); OPERATOR_MAP.put(\"/\", 2); OPERATOR_MAP.put(\"^\", 3); // power OPERATOR_MAP.put(\"sqrt\", 4); OPERATOR_MAP.put(\"sin\", 4); OPERATOR_MAP.put(\"cos\", 4); OPERATOR_MAP.put(\"log\", 4); //natural logarithm } public double evaluate(String expression) { if (expression == null || expression.length() == 0) { throw new IllegalArgumentException(\"empty expression\"); } return evaluatePostfix(infixToPostfix(tokenlizedExpression(expression))); } private List<String> tokenlizedExpression(String expression) { List<String> infixQ = new ArrayList<>(); StringBuilder buf = new StringBuilder(); int len = expression.length(); for (int i = 0; i < len; i++) { char c = expression.charAt(i); if (c == ' ') continue; if (OPERATOR_MAP.containsKey(String.valueOf(c)) || c == '(' || c == ')') { if (buf.length() > 0) { infixQ.add(buf.toString()); buf = new StringBuilder(); } infixQ.add(String.valueOf(c)); } else buf.append(c); } if (buf.length() > 0) infixQ.add(buf.toString()); return infixQ; } /** * Transform an infix queue to postfix queue * * @param infixQ * @return */ private List<String> infixToPostfix(List<String> infixQ) { if (infixQ == null || infixQ.isEmpty()) { throw new IllegalArgumentException(\"empty infixQ\"); } List<String> postfixQ = new ArrayList<>(); //operator stack , a stack in which each item may be a left parenthesis or the symbol for an operation. Stack<String> stack = new Stack<String>(); for (String token : infixQ) { //If (an operand is found) Add it to P if (isNumeric(token)) { postfixQ.add(token); } else if (token.equals(\"(\")) { stack.push(token); } else if (token.equals(\")\")) { while (!stack.isEmpty() && !stack.peek().equals(\"(\")) { postfixQ.add(stack.pop()); } //Pop the left parenthesis from the stack and discard it if (stack.isEmpty() || !stack.pop().equals(\"(\")) { throw new IllegalArgumentException(\" then infixQ contained unbalanced parentheses \"); } } else if (OPERATOR_MAP.containsKey(token)) { if (stack.isEmpty() || stack.peek().equals(\"(\")) { stack.push(token); } else { while (!stack.isEmpty() && !stack.peek().equals(\"(\") && precedence(token) <= precedence(stack.peek())) { postfixQ.add(stack.pop()); } stack.push(token); } } else { throw new IllegalArgumentException(\" invalid token found:\" + token); } } while (!stack.isEmpty()) { String opt = stack.pop(); if (!opt.equals(\"(\")) postfixQ.add(opt); else throw new IllegalArgumentException(\" then infixQ contained unbalanced parentheses \"); } return postfixQ; } /** * Evaluate a postfix queue * * @param postfixQ * @return */ private Double evaluatePostfix(List<String> postfixQ) { if (postfixQ == null || postfixQ.isEmpty()) { throw new IllegalArgumentException(\"empty postfixQ\"); } //operand stack, a stack to hold the operands. Stack<Double> stack = new Stack<>(); for (String token : postfixQ) { //If an operand is found push it onto the stack if (isNumeric(token)) { stack.push(Double.parseDouble(token)); } else if (OPERATOR_MAP.containsKey(token)) { //If an operator is found double v = stack.pop(); if (token.equals(\"+\")) v = stack.pop() + v; else if (token.equals(\"-\")) v = stack.pop() - v; else if (token.equals(\"*\")) v = stack.pop() * v; else if (token.equals(\"/\")) v = stack.pop() / v; else if (token.equals(\"^\")) v = Math.pow(stack.pop(), v); else if (token.equals(\"sqrt\")) v = Math.sqrt(v); else if (token.equals(\"sin\")) v = Math.sin(degreeToRadian(v)); else if (token.equals(\"cos\")) v = Math.cos(degreeToRadian(v)); else if (token.equals(\"log\")) v = Math.log(v); stack.push(v); } else { throw new IllegalArgumentException(\" invalid token found:\" + token); } } //At the end, there should be only one element left on the stack. if (stack.size() != 1) { throw new IllegalArgumentException(\"Invalid postfix\"); } return stack.pop(); } private int precedence(String token) { return OPERATOR_MAP.get(token); } private static double degreeToRadian(double degree) { return degree / 180 * Math.PI; } private static boolean isNumeric(String token) { if (token == null) { return false; } try { Double.parseDouble(token); } catch (NumberFormatException nfe) { return false; } return true; } /** * match a number with optional '-' and decimal. */ private static boolean isNumeric2(String str) { return str.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"); } private double debug(String expression) { System.out.println(\"---expression---\"); System.out.println(expression); List<String> infixQ = tokenlizedExpression(expression); System.out.println(\"---infix---\"); for (String token : infixQ) { System.out.print(token + \" \"); } System.out.println(\"\\n---postfix---\"); List<String> postfixQ = infixToPostfix(infixQ); for (String token : postfixQ) { System.out.print(token + \" \"); } System.out.println(); return evaluatePostfix(postfixQ); } private static void simulate() { // BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); // String line = br.readLine(); Calculator cal = new Calculator(); Scanner scanner = new Scanner(System.in, \"UTF-8\"); while (scanner.hasNextLine()) { String expression = scanner.nextLine().trim(); if (expression.length() == 0) continue; if (expression.equals(\"quit\")) break; System.out.println(cal.evaluate(expression)); } } public static void main(String[] args) { simulate(); // test2(); // testCorrect(); } private static void test1() { String expression = \"2*(5+4+3+2*2*2+1)\"; Calculator cal = new Calculator(); System.out.println(\"value:\" + cal.debug(expression)); } private static void test2() { List<String> expressions = new ArrayList<>(); expressions.add(\"(8+9)^2+(8-4)/3\"); expressions.add(\"(2+sqrt(5+4))\"); expressions.add(\"2 + ( 3 + 4 ) * ( 5 * 6 )\"); expressions.add(\"1 + ( 2 + 3 ) * ( 4 * 5 )\"); expressions.add(\"(1 + sqrt(5.0+4*3+sqrt(30*2+3)) ) / 2.0\"); expressions.add(\"(1 + log( 5.0+4*3+sqrt(30*2+3) ) ) / 2.0\"); expressions.add(\"(1 + sqrt ( 5.0 ) ) / 2.0\"); expressions.add(\"6*sin(30)\"); expressions.add(\"6*(5+4+3)\"); expressions.add(\"2*(5+4+3+2*2*2+1)\"); Calculator cal = new Calculator(); for (String expression : expressions) { System.out.println(expression + \" = \" + cal.evaluate(expression)); } } private static void testCorrect() { Calculator cal = new Calculator(); if (cal.evaluate(\"(1 + sqrt(5.0+4*3+sqrt(30*2+3)) ) / 2.0\") == (1 + Math.sqrt(5.0 + 4 * 3 + Math.sqrt(30 * 2 + 3))) / 2.0) { System.out.println(\"passed\"); } else { throw new Error(\"Not a correct value\"); } } } http://faculty.cs.niu.edu/~hutchins/csci241/eval.htm","title":"A java implementation"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","text":"\u7cfb\u7edf\u786c\u4ef6\u5de5\u5177 \u67e5\u770b\u5404\u786c\u4ef6\u7684\u578b\u53f7 lspci CPU # \u67e5\u770bcup\u4fe1\u606f cat /proc/cpuinfo # \u67e5\u770b\u5404\u7ea7cache\u5927\u5c0f getconf -a | grep CACHE sudo dmidecode -t 4 # get thread or cpu core count nproc \u78c1\u76d8 \u53c2\u8003\uff1a \u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc-\u7b2c\u4e03\u7ae0 \u78c1\u76d8\u4f7f\u7528\u5360\u6bd4 \u5217\u51fa\u7cfb\u7edf\u6240\u6709\u7684\u78c1\u76d8\u5206\u533a lsblk -p lsblk -o NAME,PARTTYPE,MOUNTPOINT \u67e5\u770b\u78c1\u76d8\u5206\u533a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b sudo parted /dev/sda print # \u67e5\u770b\u76ee\u524d\u6302\u8f7d\u7684\u88c5\u7f6e/\u78c1\u76d8\u5269\u4f59\u7a7a\u95f4 df -Th # \u5c06 /etc \u5e95\u4e0b\u7684\u53ef\u7528\u78c1\u76d8\u5bb9\u91cf\u4ee5\u6613\u8bfb\u7684\u5bb9\u91cf\u683c\u5f0f\u663e\u793a df -h /etc # \u67e5\u770b/home\u76ee\u5f55\u4e0b\u5404\u6587\u4ef6\u5360\u7528\u5927\u5c0f du -sh /home/* # \u67e5\u770b /home\u76ee\u5f55\u5360\u7528\u5927\u5c0f du -sh /home \u65e7\u6709\u7684MBR\u5206\u533a\u4f7f\u7528\u7684\u201c\u78c1\u76d8\u5206\u533a\u201d\u547d\u4ee4 # \u786c\u76d8\u5206\u533a\u5de5\u5177 fdisk, cfdisk, sfdisk, GParted # \u67e5\u770b\u78c1\u76d8\u5206\u533a fdisk -l # \u78c1\u76d8\u5206\u533a fdisk /dev/sda Create file system # ext4 file system mkfs -v -t ext4 /dev/<xxx> # create swap partition file system mkswap /dev/<yyy> # enabled /sbin/swapon -v /dev/<yyy> \u68c0\u67e5\u548c\u4fee\u590d\u635f\u574f\u7684\u786c\u76d8 fsck -C -f -t ext3 /dev/sda1 \u68c0\u67e5\u786c\u76d8\u6212\u8f6f\u76d8\u6242\u533a\u6709\u6ca1\u6709\u574f\u8f68 badblocks -sv /dev/sda \u89c2\u5bdf\u6587\u4ef6\u7cfb\u7edf dumpe2fs \u67e5\u770b\u786c\u76d8\u4fe1\u606f \u5236\u9020\u5546\u5e8f\u5217\u53f7\u7b49 sudo hdparm -i /dev/sda # or sudo smartctl -a /dev/sda ``` ### loop dev ```bash dd if=/dev/zero of=./rootfs.ext3 bs=1M count=32 mkfs.ext3 rootfs.ext3 sudo mount -o loop xxx.iso /test/ \u67e5\u770binitramfs #\u770b\u4e00\u4e0b initramfs \u88e1\u9762\u7684\u5167\u5bb9\u6709\u4e9b\u5565\u8cc7\u6599\uff1f $ lsinitrd /boot/initramfs-4.18.0-193.el8.x86_64.img $ mkdir /dev/shm/initramfs $ cd /dev/shm/initramfs # \u53d6\u5f97 initramfs \u524d\u9762\u61c9\u8a72\u8981\u53bb\u9664\u7684\u5bb9\u91cf $ cpio -i -d --no-absolute-filenames -I /boot/initramfs-4.18.0-193.el8.x86_64.img 198 blocks # \u9019\u500b\u91cd\u9ede\u5c31\u662f\u5728\u524d\u9762\u7684\u5b57\u5143\u4f54\u4e86\u5e7e\u500b block \u5bb9\u91cf\uff0c\u6bcf\u500b block \u5bb9\u91cf\u70ba 512bytes\uff0c # \u6bcf\u4e00\u500b initramfs \u6a94\u6848\u7684\u524d\u7f6e\u5b57\u5143\u5bb9\u91cf\u90fd\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u9700\u8981\u5148\u627e\u51fa\u4f86\u53bb\u9664\u624d\u884c\uff01 $ dd if=/boot/initramfs-4.18.0-193.el8.x86_64.img of=initramfs.gz bs=512 skip=198 $ file initramfs.gz initramfs.gz: gzip compressed data, from Unix, last modified: Mon May 4 17:56:47 2015,max compression # 3. \u5f9e\u4e0a\u9762\u770b\u5230\u6a94\u6848\u662f gzip \u58d3\u7e2e\u6a94\uff0c\u6240\u4ee5\u5c07\u5b83\u89e3\u58d3\u7e2e\u5f8c\uff0c\u518d\u67e5\u95b1\u4e00\u4e0b\u6a94\u6848\u7684\u985e\u578b\uff01 $ gzip -d initramfs.gz $ file initramfs initramfs: ASCII cpio archive (SVR4 with no CRC) # \u89e3\u958b\u5f8c\u53c8\u7522\u751f\u4e00\u500b cpio \u6a94\u6848\uff0c\u5f97\u8981\u5c07\u5b83\u7528 cpio \u7684\u65b9\u6cd5\u89e3\u958b\uff01\u52a0\u4e0a\u4e0d\u8981\u7d55\u5c0d\u8def\u5f91\u7684\u53c3\u6578\u8f03\u4fdd\u96aa\uff01 $ cpio -i -d -H newc --no-absolute-filenames < initramfs \u7cfb\u7edf\u4fe1\u606f \u67e5\u770b\u7cfb\u7edf\u4fe1\u606f # \u67e5\u770b\u7cfb\u7edf\u4fe1\u606f uname -a cat /proc/version # \u5185\u6838\u7248\u672c uname -r # distribution\u7684\u7248\u672c\u4fe1\u606f lsb_release -a # \u7cfb\u7edf\u67b6\u6784 arch file /bin/ls # \u4f9d\u636elong\u7c7b\u578b\u7684\u4f4d\u6570\u5224\u65ad\u5b89\u88c5\u7cfb\u7edf\u7684\u4f4d\u6570\uff0c \u4e00\u822c64\u4f4d\u64cd\u4f5c\u7cfb\u7edflong\u7c7b\u578b\u662f64\u4f4d get_conf LONG_BIT \u4f7f\u7528\u624b\u518c\u67e5\u770b\u8bf4\u660e # \u67e5\u627e\u7cfb\u7edf\u5185\u8ddfpasswd\u6709\u5173\u7684\u8bf4\u660e man -f passwd # \u6309\u5173\u952e\u8bcd\u67e5\u627e\u8ddfpasswd\u6709\u5173\u7684\u8bf4\u660e man -k \u5173\u952e\u8bcd \u7cfb\u7edf\u8fdb\u7a0b ps -f -o pid,ppid,tty,stat,wchan,args # \u67e5\u770b7979 \u548c 29825 \u8fdb\u7a0b ps -p 7979 -p 29825 -o \"pid ppid sid tty cmd\" # \u6740\u6389kucker\u540d\u5b57\u7684\u8fdb\u7a0b ps -ef | grep \"kucker\" | awk '{print $2}' | xargs -i sudo kill -9 {} \u7f51\u7edc \u67e5\u8be2\u57df\u540dIP dig +norecurse @a.root-servers.net any yahoo.com dig +norecurse @e.gtld-servers.net any yahoo.com dig +norecurse @ns1.yahoo.com any yahoo.com nslookup yahoo.com nslookup -type=NS yahoo.com nslookup yahoo.com ns2.yahoo.com netstat -a --inet netstat -tlunp tcpdump -t -N 'port 80' \u6587\u4ef6 \u6587\u4ef6\u6743\u9650 # \u6539\u53d8\u6240\u5c5e\u7fa4\u7ec4 change group chgrp [-R] \u7fa4\u7ec4\u540d dirname/filename ... # \u6539\u53d8\u6863\u6848\u62e5\u6709\u8005 change owner chown [-R] \u8d26\u53f7\u540d \u6863\u6848\u6212\u76ee\u5f54 chown [-R] \u8d26\u53f7\u540d:\u7ec4\u540d \u6863\u6848\u6212\u76ee\u5f54 # \u6539\u53d8\u6743\u9650 # \u6570\u5b57\u7c7b\u578b\u6539\u53d8\u6863\u6848\u6743\u9650 chmod [-R] 740 \u6863\u6848\u76ee\u5f54 # \u7b26\u53f7\u7c7b\u578b\u6539\u53d8\u6863\u6848\u6743\u9650 # | u | +(\u52a0\u5165) | r | # chmod | g | -(\u9664\u53bb) | w | \u6863\u6848\u6212\u76ee\u5f54 # | o | =(\u8bbe\u5b9a) | x | # | a | | | chmod u=rwx,go=rx .bashrc chmod a-x .bashrc \u6587\u4ef6\u7ba1\u7406 # \u5c55\u793a\u76ee\u5f55\u5217\u8868 ls -ld \u76ee\u5f55 # \u56de\u5230\u4e0a\u6b21\u8bbf\u95ee\u7684\u76ee\u5f55 cd - # \u8fdb\u5165wzq\u7528\u6237\u5bb6\u76ee\u5f55 cd wzq~ \u6587\u672c\u6587\u4ef6\u5de5\u5177 grep \u66ff\u6362\u6216\u5220\u9664\u8de8\u8d8a\u591a\u4e2a\u76ee\u5f55\u7684\u591a\u4e2a\u6587\u4ef6\u91cc\u7684\u6307\u5b9a\u6587\u672c # \u66ff\u6362\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u91cc\u7684\u2018window\u2019\u4e3a\u2018linux\u2019 grep -rl 'windows' ./ | xargs sed -i 's/windows/linux/g' # Mac\u4e0bsed\u547d\u4ee4\u7684\"-i\"\u9009\u9879\u540e\u9762\u9700\u8981\u52a0\u5b57\u7b26\u4e32\u8868\u793a\u5907\u4efd\u6587\u4ef6\u7684\u540e\u7f00 grep -rl 'windows' ./ | xargs sed -i '' 's/windows/linux/g' #\u5220\u9664\u51fa\u73b0\u2018windows\u2019\u7684\u884c grep -rl 'windows' ./ | xargs sed -i '' '/windows/d' \u7edf\u8ba1\u67d0\u4e2a\u8bcd\u8bed\u5728\u6587\u4ef6\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 # count the number of occurrence of a word in a text file grep -o -i 'word' test.txt | wc -l find find . -name \"*nng*\" -exec rm -rf {} \\; find /usr/{lib,libexec} -name \\*.la -delete find /usr -depth -name $(uname -m)-lfs-linux-gnu\\* | xargs rm -rf find $(1) -not -type d -and -not -type l -print0 | xargs -0r chmod $(FILE_MODE) \u6bd4\u8f83\u4e24\u4e2a\u76ee\u5f55\u5185\u6587\u4ef6\u7684\u5dee\u5f02 \u65b9\u6cd5\u4e00\uff1a diff -bur [oldDir] [newDir] \u65b9\u6cd5\u4e8c\uff1a rsync -rcnv [oldDir] [newDir] \u538b\u7f29\u4e0e\u6253\u5305 [dmtsai@study ~]$ tar [-z|-j|-J] [cv] [-f \u5f85\u5efa\u7acb\u7684\u65b0\u6a94\u540d] filename... <==\u6253\u5305\u8207\u58d3\u7e2e [dmtsai@study ~]$ tar [-z|-j|-J] [tv] [-f \u65e2\u6709\u7684 tar\u6a94\u540d] <==\u5bdf\u770b\u6a94\u540d [dmtsai@study ~]$ tar [-z|-j|-J] [xv] [-f \u65e2\u6709\u7684 tar\u6a94\u540d] [-C \u76ee\u9304] <==\u89e3\u58d3\u7e2e \u9078\u9805\u8207\u53c3\u6578\uff1a -c \uff1a\u5efa\u7acb\u6253\u5305\u6a94\u6848\uff0c\u53ef\u642d\u914d -v \u4f86\u5bdf\u770b\u904e\u7a0b\u4e2d\u88ab\u6253\u5305\u7684\u6a94\u540d(filename) -t \uff1a\u5bdf\u770b\u6253\u5305\u6a94\u6848\u7684\u5167\u5bb9\u542b\u6709\u54ea\u4e9b\u6a94\u540d\uff0c\u91cd\u9ede\u5728\u5bdf\u770b\u300e\u6a94\u540d\u300f\u5c31\u662f\u4e86\uff1b -x \uff1a\u89e3\u6253\u5305\u6216\u89e3\u58d3\u7e2e\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u642d\u914d -C (\u5927\u5beb) \u5728\u7279\u5b9a\u76ee\u9304\u89e3\u958b \u7279\u5225\u7559\u610f\u7684\u662f\uff0c -c, -t, -x \u4e0d\u53ef\u540c\u6642\u51fa\u73fe\u5728\u4e00\u4e32\u6307\u4ee4\u5217\u4e2d\u3002 -z \uff1a\u900f\u904e gzip \u7684\u652f\u63f4\u9032\u884c\u58d3\u7e2e/\u89e3\u58d3\u7e2e\uff1a\u6b64\u6642\u6a94\u540d\u6700\u597d\u70ba *.tar.gz -j \uff1a\u900f\u904e bzip2 \u7684\u652f\u63f4\u9032\u884c\u58d3\u7e2e/\u89e3\u58d3\u7e2e\uff1a\u6b64\u6642\u6a94\u540d\u6700\u597d\u70ba *.tar.bz2 -J \uff1a\u900f\u904e xz \u7684\u652f\u63f4\u9032\u884c\u58d3\u7e2e/\u89e3\u58d3\u7e2e\uff1a\u6b64\u6642\u6a94\u540d\u6700\u597d\u70ba *.tar.xz \u7279\u5225\u7559\u610f\uff0c -z, -j, -J \u4e0d\u53ef\u4ee5\u540c\u6642\u51fa\u73fe\u5728\u4e00\u4e32\u6307\u4ee4\u5217\u4e2d -v \uff1a\u5728\u58d3\u7e2e/\u89e3\u58d3\u7e2e\u7684\u904e\u7a0b\u4e2d\uff0c\u5c07\u6b63\u5728\u8655\u7406\u7684\u6a94\u540d\u986f\u793a\u51fa\u4f86\uff01 -f filename\uff1a-f \u5f8c\u9762\u8981\u7acb\u523b\u63a5\u8981\u88ab\u8655\u7406\u7684\u6a94\u540d\uff01\u5efa\u8b70 -f \u55ae\u7368\u5beb\u4e00\u500b\u9078\u9805\u56c9\uff01(\u6bd4\u8f03\u4e0d\u6703\u5fd8\u8a18) -C \u76ee\u9304 \uff1a\u9019\u500b\u9078\u9805\u7528\u5728\u89e3\u58d3\u7e2e\uff0c\u82e5\u8981\u5728\u7279\u5b9a\u76ee\u9304\u89e3\u58d3\u7e2e\uff0c\u53ef\u4ee5\u4f7f\u7528\u9019\u500b\u9078\u9805\u3002 \u5176\u4ed6\u5f8c\u7e8c\u7df4\u7fd2\u6703\u4f7f\u7528\u5230\u7684\u9078\u9805\u4ecb\u7d39\uff1a -p(\u5c0f\u5beb) \uff1a\u4fdd\u7559\u5099\u4efd\u8cc7\u6599\u7684\u539f\u672c\u6b0a\u9650\u8207\u5c6c\u6027\uff0c\u5e38\u7528\u65bc\u5099\u4efd(-c)\u91cd\u8981\u7684\u8a2d\u5b9a\u6a94 -P(\u5927\u5beb) \uff1a\u4fdd\u7559\u7d55\u5c0d\u8def\u5f91\uff0c\u4ea6\u5373\u5141\u8a31\u5099\u4efd\u8cc7\u6599\u4e2d\u542b\u6709\u6839\u76ee\u9304\u5b58\u5728\u4e4b\u610f\uff1b --exclude=FILE\uff1a\u5728\u58d3\u7e2e\u7684\u904e\u7a0b\u4e2d\uff0c\u4e0d\u8981\u5c07 FILE \u6253\u5305\uff01 \u58d3\u3000\u7e2e\uff1atar -jcv -f filename.tar.bz2 \u8981\u88ab\u58d3\u7e2e\u7684\u6a94\u6848\u6216\u76ee\u9304\u540d\u7a31 \u67e5\u3000\u8a62\uff1atar -jtv -f filename.tar.bz2 \u89e3\u58d3\u7e2e\uff1atar -jxv -f filename.tar.bz2 -C \u6b32\u89e3\u58d3\u7e2e\u7684\u76ee\u9304 \u5b9e\u4f8b\uff1a # \u89e3\u538btar.bz2\u6587\u4ef6 tar xvfj ./linux-2.6.23.tar.bz2 tar xvfJ ./linux-2.6.23.tar.xz tar xvfz ./linux-2.6.23.tar.gz tar -xf ./linux-2.6.23.tar.* # \u89e3\u538bpython-3.9.0-docs-html.tar.bz2\u5230/usr/share/doc/python-3.9.0/html tar --strip-components=1 \\ --no-same-owner \\ --no-same-permissions \\ -C /usr/share/doc/python-3.9.0/html \\ -xvf ../python-3.9.0-docs-html.tar.bz2 # --no-same-owner and --no-same-permissions # Ensure the installed files have the correct ownership and permissions. # Without these options, using tar will install the package files with the upstream creator's values. # \u5f53\u524d\u76ee\u5f55\u538b\u7f29\u6253\u5305\u5230/home/wzq/lfs/lfs-2.tar.xz tar -cJpf /home/wzq/lfs/lfs-2.tar.xz . # \u89e3\u538b\u5bfc\u5f53\u524d\u76ee\u5f55 tar -xpf $HOME/lfs-temp-tools-10.0-systemd.tar.xz \u5173\u673a/\u91cd\u542f # \u672a\u4fdd\u5b58\u7684\u5185\u5b58\u6570\u636e\u5199\u5165\u786c\u76d8 sync # \u7acb\u523b\u5173\u673a\uff0c\u5176\u4e2d now \u76f8\u5f53\u4e8d\u65f6\u95f4\u4e3a 0 \u7684\u72b6\u6001 shutdown -h now # \u7cfb\u7edf\u5728\u4eca\u5929\u7684 20:25 \u5206\u4f1a\u5173\u673a\uff0c\u82e5\u5728 21:25 \u624d\u4e0b\u8fbe\u6b64\u6303\u4ee4\uff0c\u5219\u9691\u5929\u624d\u5173\u673a shutdown -h 20:25 # \u7cfb\u7edf\u518d\u8fc7\u5341\u5206\u949f\u540e\u81ea\u52a2\u5173\u673a shutdown -h +10 # \u7cfb\u7edf\u7acb\u523b\u91cd\u65b0\u542f\u52a2 shutdown -r now # \u518d\u8fc7\u4e09\u5341\u5206\u949f\u7cfb\u7edf\u4f1a\u91cd\u65b0\u542f\u52a2\uff0c\u5e75\u663e\u793a\u540e\u9762\u7684\u8baf\u606f\u7ed9\u6240\u6709\u5728\u5728\u7ebf\u7684\u4f7f\u7528\u8005 shutdown -r +30 'The system will reboot' # \u4ec5\u53d1\u51fa\u8b66\u544a\uff0c\u7cfb\u7edf\u5e76\u4e0d\u4f1a\u5173\u673a\u5566!\u5413\u552c\u4eba! shutdown -k now 'This system will reboot' # \u91cd\u65b0\u542f\u52a2\uff0c\u5173\u673a\uff0c\u65ad\u7535 reboot, halt, poweroff \u7528\u6237 add the new user lfs groupadd lfs useradd -s /bin/bash -g lfs -m -k /dev/null lfs passwd lfs # add user lfs to group wheel usermod -a -G wheel lfs Terminal \u79fb\u52a8\u6e38\u6807 \u5f9e\u6e38\u6a19\u8655\u5411\u524d\u522a\u9664\u6307\u4ee4\u4e32 ([ctrl]+u); \u5411\u5f8c\u522a\u9664\u6307\u4ee4\u4e32 ([ctrl]+k)\u3002 \u8b93\u6e38\u6a19\u79fb\u52d5\u5230\u6574\u500b\u6307\u4ee4\u4e32\u7684\u6700\u524d\u9762 ([ctrl]+a) \u6216\u6700\u5f8c\u9762 ([ctrl]+e)\u3002 history # number \uff1a\u57f7\u884c\u7b2c\u5e7e\u7b46\u6307\u4ee4\u7684\u610f\u601d\uff1b !number # command \uff1a\u7531\u6700\u8fd1\u7684\u6307\u4ee4\u5411\u524d\u641c\u5c0b\u300e\u6307\u4ee4\u4e32\u958b\u982d\u70ba command\u300f\u7684\u90a3\u500b\u6307\u4ee4\uff0c\u4e26\u57f7\u884c\uff1b !command # \u57f7\u884c\u4e0a\u4e00\u500b\u6307\u4ee4(\u76f8\u7576\u65bc\u6309\u2191\u6309\u9375\u5f8c\uff0c\u6309 Enter) !! \u91cd\u5b9a\u5411 # \u5c07\u6307\u4ee4\u7684\u8cc7\u6599\u5168\u90e8\u5beb\u5165\u540d\u70ba list \u7684\u6a94\u6848\u4e2d find /home -name .bashrc > list 2>&1 \u4e0b\u8f7d wget wget --input-file=wget-list --continue --directory-prefix=target-directory curl #-o, --output <file>: Write output to <file> instead of stdout. curl https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz --output gost.gz # -O, --remote-name: Write output to a local file named like the remote file we get curl -O https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz","title":"Linux\u5e38\u7528\u547d\u4ee4"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_1","text":"","title":"\u7cfb\u7edf\u786c\u4ef6\u5de5\u5177"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_2","text":"lspci","title":"\u67e5\u770b\u5404\u786c\u4ef6\u7684\u578b\u53f7"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#cpu","text":"# \u67e5\u770bcup\u4fe1\u606f cat /proc/cpuinfo # \u67e5\u770b\u5404\u7ea7cache\u5927\u5c0f getconf -a | grep CACHE sudo dmidecode -t 4 # get thread or cpu core count nproc","title":"CPU"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_3","text":"\u53c2\u8003\uff1a \u9e1f\u54e5\u7684Linux\u79c1\u623f\u83dc-\u7b2c\u4e03\u7ae0 \u78c1\u76d8\u4f7f\u7528\u5360\u6bd4 \u5217\u51fa\u7cfb\u7edf\u6240\u6709\u7684\u78c1\u76d8\u5206\u533a lsblk -p lsblk -o NAME,PARTTYPE,MOUNTPOINT \u67e5\u770b\u78c1\u76d8\u5206\u533a\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b sudo parted /dev/sda print # \u67e5\u770b\u76ee\u524d\u6302\u8f7d\u7684\u88c5\u7f6e/\u78c1\u76d8\u5269\u4f59\u7a7a\u95f4 df -Th # \u5c06 /etc \u5e95\u4e0b\u7684\u53ef\u7528\u78c1\u76d8\u5bb9\u91cf\u4ee5\u6613\u8bfb\u7684\u5bb9\u91cf\u683c\u5f0f\u663e\u793a df -h /etc # \u67e5\u770b/home\u76ee\u5f55\u4e0b\u5404\u6587\u4ef6\u5360\u7528\u5927\u5c0f du -sh /home/* # \u67e5\u770b /home\u76ee\u5f55\u5360\u7528\u5927\u5c0f du -sh /home \u65e7\u6709\u7684MBR\u5206\u533a\u4f7f\u7528\u7684\u201c\u78c1\u76d8\u5206\u533a\u201d\u547d\u4ee4 # \u786c\u76d8\u5206\u533a\u5de5\u5177 fdisk, cfdisk, sfdisk, GParted # \u67e5\u770b\u78c1\u76d8\u5206\u533a fdisk -l # \u78c1\u76d8\u5206\u533a fdisk /dev/sda Create file system # ext4 file system mkfs -v -t ext4 /dev/<xxx> # create swap partition file system mkswap /dev/<yyy> # enabled /sbin/swapon -v /dev/<yyy> \u68c0\u67e5\u548c\u4fee\u590d\u635f\u574f\u7684\u786c\u76d8 fsck -C -f -t ext3 /dev/sda1 \u68c0\u67e5\u786c\u76d8\u6212\u8f6f\u76d8\u6242\u533a\u6709\u6ca1\u6709\u574f\u8f68 badblocks -sv /dev/sda \u89c2\u5bdf\u6587\u4ef6\u7cfb\u7edf dumpe2fs \u67e5\u770b\u786c\u76d8\u4fe1\u606f \u5236\u9020\u5546\u5e8f\u5217\u53f7\u7b49 sudo hdparm -i /dev/sda # or sudo smartctl -a /dev/sda ``` ### loop dev ```bash dd if=/dev/zero of=./rootfs.ext3 bs=1M count=32 mkfs.ext3 rootfs.ext3 sudo mount -o loop xxx.iso /test/","title":"\u78c1\u76d8"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#initramfs","text":"#\u770b\u4e00\u4e0b initramfs \u88e1\u9762\u7684\u5167\u5bb9\u6709\u4e9b\u5565\u8cc7\u6599\uff1f $ lsinitrd /boot/initramfs-4.18.0-193.el8.x86_64.img $ mkdir /dev/shm/initramfs $ cd /dev/shm/initramfs # \u53d6\u5f97 initramfs \u524d\u9762\u61c9\u8a72\u8981\u53bb\u9664\u7684\u5bb9\u91cf $ cpio -i -d --no-absolute-filenames -I /boot/initramfs-4.18.0-193.el8.x86_64.img 198 blocks # \u9019\u500b\u91cd\u9ede\u5c31\u662f\u5728\u524d\u9762\u7684\u5b57\u5143\u4f54\u4e86\u5e7e\u500b block \u5bb9\u91cf\uff0c\u6bcf\u500b block \u5bb9\u91cf\u70ba 512bytes\uff0c # \u6bcf\u4e00\u500b initramfs \u6a94\u6848\u7684\u524d\u7f6e\u5b57\u5143\u5bb9\u91cf\u90fd\u4e0d\u76f8\u540c\uff0c\u6240\u4ee5\u9700\u8981\u5148\u627e\u51fa\u4f86\u53bb\u9664\u624d\u884c\uff01 $ dd if=/boot/initramfs-4.18.0-193.el8.x86_64.img of=initramfs.gz bs=512 skip=198 $ file initramfs.gz initramfs.gz: gzip compressed data, from Unix, last modified: Mon May 4 17:56:47 2015,max compression # 3. \u5f9e\u4e0a\u9762\u770b\u5230\u6a94\u6848\u662f gzip \u58d3\u7e2e\u6a94\uff0c\u6240\u4ee5\u5c07\u5b83\u89e3\u58d3\u7e2e\u5f8c\uff0c\u518d\u67e5\u95b1\u4e00\u4e0b\u6a94\u6848\u7684\u985e\u578b\uff01 $ gzip -d initramfs.gz $ file initramfs initramfs: ASCII cpio archive (SVR4 with no CRC) # \u89e3\u958b\u5f8c\u53c8\u7522\u751f\u4e00\u500b cpio \u6a94\u6848\uff0c\u5f97\u8981\u5c07\u5b83\u7528 cpio \u7684\u65b9\u6cd5\u89e3\u958b\uff01\u52a0\u4e0a\u4e0d\u8981\u7d55\u5c0d\u8def\u5f91\u7684\u53c3\u6578\u8f03\u4fdd\u96aa\uff01 $ cpio -i -d -H newc --no-absolute-filenames < initramfs","title":"\u67e5\u770binitramfs"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_4","text":"","title":"\u7cfb\u7edf\u4fe1\u606f"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_5","text":"# \u67e5\u770b\u7cfb\u7edf\u4fe1\u606f uname -a cat /proc/version # \u5185\u6838\u7248\u672c uname -r # distribution\u7684\u7248\u672c\u4fe1\u606f lsb_release -a # \u7cfb\u7edf\u67b6\u6784 arch file /bin/ls # \u4f9d\u636elong\u7c7b\u578b\u7684\u4f4d\u6570\u5224\u65ad\u5b89\u88c5\u7cfb\u7edf\u7684\u4f4d\u6570\uff0c \u4e00\u822c64\u4f4d\u64cd\u4f5c\u7cfb\u7edflong\u7c7b\u578b\u662f64\u4f4d get_conf LONG_BIT","title":"\u67e5\u770b\u7cfb\u7edf\u4fe1\u606f"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_6","text":"# \u67e5\u627e\u7cfb\u7edf\u5185\u8ddfpasswd\u6709\u5173\u7684\u8bf4\u660e man -f passwd # \u6309\u5173\u952e\u8bcd\u67e5\u627e\u8ddfpasswd\u6709\u5173\u7684\u8bf4\u660e man -k \u5173\u952e\u8bcd","title":"\u4f7f\u7528\u624b\u518c\u67e5\u770b\u8bf4\u660e"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_7","text":"ps -f -o pid,ppid,tty,stat,wchan,args # \u67e5\u770b7979 \u548c 29825 \u8fdb\u7a0b ps -p 7979 -p 29825 -o \"pid ppid sid tty cmd\" # \u6740\u6389kucker\u540d\u5b57\u7684\u8fdb\u7a0b ps -ef | grep \"kucker\" | awk '{print $2}' | xargs -i sudo kill -9 {}","title":"\u7cfb\u7edf\u8fdb\u7a0b"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_8","text":"\u67e5\u8be2\u57df\u540dIP dig +norecurse @a.root-servers.net any yahoo.com dig +norecurse @e.gtld-servers.net any yahoo.com dig +norecurse @ns1.yahoo.com any yahoo.com nslookup yahoo.com nslookup -type=NS yahoo.com nslookup yahoo.com ns2.yahoo.com netstat -a --inet netstat -tlunp tcpdump -t -N 'port 80'","title":"\u7f51\u7edc"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_9","text":"","title":"\u6587\u4ef6"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_10","text":"# \u6539\u53d8\u6240\u5c5e\u7fa4\u7ec4 change group chgrp [-R] \u7fa4\u7ec4\u540d dirname/filename ... # \u6539\u53d8\u6863\u6848\u62e5\u6709\u8005 change owner chown [-R] \u8d26\u53f7\u540d \u6863\u6848\u6212\u76ee\u5f54 chown [-R] \u8d26\u53f7\u540d:\u7ec4\u540d \u6863\u6848\u6212\u76ee\u5f54 # \u6539\u53d8\u6743\u9650 # \u6570\u5b57\u7c7b\u578b\u6539\u53d8\u6863\u6848\u6743\u9650 chmod [-R] 740 \u6863\u6848\u76ee\u5f54 # \u7b26\u53f7\u7c7b\u578b\u6539\u53d8\u6863\u6848\u6743\u9650 # | u | +(\u52a0\u5165) | r | # chmod | g | -(\u9664\u53bb) | w | \u6863\u6848\u6212\u76ee\u5f54 # | o | =(\u8bbe\u5b9a) | x | # | a | | | chmod u=rwx,go=rx .bashrc chmod a-x .bashrc","title":"\u6587\u4ef6\u6743\u9650"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_11","text":"# \u5c55\u793a\u76ee\u5f55\u5217\u8868 ls -ld \u76ee\u5f55 # \u56de\u5230\u4e0a\u6b21\u8bbf\u95ee\u7684\u76ee\u5f55 cd - # \u8fdb\u5165wzq\u7528\u6237\u5bb6\u76ee\u5f55 cd wzq~","title":"\u6587\u4ef6\u7ba1\u7406"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_12","text":"grep \u66ff\u6362\u6216\u5220\u9664\u8de8\u8d8a\u591a\u4e2a\u76ee\u5f55\u7684\u591a\u4e2a\u6587\u4ef6\u91cc\u7684\u6307\u5b9a\u6587\u672c # \u66ff\u6362\u5f53\u524d\u76ee\u5f55\u4e0b\u6240\u6709\u6587\u4ef6\u91cc\u7684\u2018window\u2019\u4e3a\u2018linux\u2019 grep -rl 'windows' ./ | xargs sed -i 's/windows/linux/g' # Mac\u4e0bsed\u547d\u4ee4\u7684\"-i\"\u9009\u9879\u540e\u9762\u9700\u8981\u52a0\u5b57\u7b26\u4e32\u8868\u793a\u5907\u4efd\u6587\u4ef6\u7684\u540e\u7f00 grep -rl 'windows' ./ | xargs sed -i '' 's/windows/linux/g' #\u5220\u9664\u51fa\u73b0\u2018windows\u2019\u7684\u884c grep -rl 'windows' ./ | xargs sed -i '' '/windows/d' \u7edf\u8ba1\u67d0\u4e2a\u8bcd\u8bed\u5728\u6587\u4ef6\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 # count the number of occurrence of a word in a text file grep -o -i 'word' test.txt | wc -l find find . -name \"*nng*\" -exec rm -rf {} \\; find /usr/{lib,libexec} -name \\*.la -delete find /usr -depth -name $(uname -m)-lfs-linux-gnu\\* | xargs rm -rf find $(1) -not -type d -and -not -type l -print0 | xargs -0r chmod $(FILE_MODE) \u6bd4\u8f83\u4e24\u4e2a\u76ee\u5f55\u5185\u6587\u4ef6\u7684\u5dee\u5f02 \u65b9\u6cd5\u4e00\uff1a diff -bur [oldDir] [newDir] \u65b9\u6cd5\u4e8c\uff1a rsync -rcnv [oldDir] [newDir]","title":"\u6587\u672c\u6587\u4ef6\u5de5\u5177"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_13","text":"[dmtsai@study ~]$ tar [-z|-j|-J] [cv] [-f \u5f85\u5efa\u7acb\u7684\u65b0\u6a94\u540d] filename... <==\u6253\u5305\u8207\u58d3\u7e2e [dmtsai@study ~]$ tar [-z|-j|-J] [tv] [-f \u65e2\u6709\u7684 tar\u6a94\u540d] <==\u5bdf\u770b\u6a94\u540d [dmtsai@study ~]$ tar [-z|-j|-J] [xv] [-f \u65e2\u6709\u7684 tar\u6a94\u540d] [-C \u76ee\u9304] <==\u89e3\u58d3\u7e2e \u9078\u9805\u8207\u53c3\u6578\uff1a -c \uff1a\u5efa\u7acb\u6253\u5305\u6a94\u6848\uff0c\u53ef\u642d\u914d -v \u4f86\u5bdf\u770b\u904e\u7a0b\u4e2d\u88ab\u6253\u5305\u7684\u6a94\u540d(filename) -t \uff1a\u5bdf\u770b\u6253\u5305\u6a94\u6848\u7684\u5167\u5bb9\u542b\u6709\u54ea\u4e9b\u6a94\u540d\uff0c\u91cd\u9ede\u5728\u5bdf\u770b\u300e\u6a94\u540d\u300f\u5c31\u662f\u4e86\uff1b -x \uff1a\u89e3\u6253\u5305\u6216\u89e3\u58d3\u7e2e\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u642d\u914d -C (\u5927\u5beb) \u5728\u7279\u5b9a\u76ee\u9304\u89e3\u958b \u7279\u5225\u7559\u610f\u7684\u662f\uff0c -c, -t, -x \u4e0d\u53ef\u540c\u6642\u51fa\u73fe\u5728\u4e00\u4e32\u6307\u4ee4\u5217\u4e2d\u3002 -z \uff1a\u900f\u904e gzip \u7684\u652f\u63f4\u9032\u884c\u58d3\u7e2e/\u89e3\u58d3\u7e2e\uff1a\u6b64\u6642\u6a94\u540d\u6700\u597d\u70ba *.tar.gz -j \uff1a\u900f\u904e bzip2 \u7684\u652f\u63f4\u9032\u884c\u58d3\u7e2e/\u89e3\u58d3\u7e2e\uff1a\u6b64\u6642\u6a94\u540d\u6700\u597d\u70ba *.tar.bz2 -J \uff1a\u900f\u904e xz \u7684\u652f\u63f4\u9032\u884c\u58d3\u7e2e/\u89e3\u58d3\u7e2e\uff1a\u6b64\u6642\u6a94\u540d\u6700\u597d\u70ba *.tar.xz \u7279\u5225\u7559\u610f\uff0c -z, -j, -J \u4e0d\u53ef\u4ee5\u540c\u6642\u51fa\u73fe\u5728\u4e00\u4e32\u6307\u4ee4\u5217\u4e2d -v \uff1a\u5728\u58d3\u7e2e/\u89e3\u58d3\u7e2e\u7684\u904e\u7a0b\u4e2d\uff0c\u5c07\u6b63\u5728\u8655\u7406\u7684\u6a94\u540d\u986f\u793a\u51fa\u4f86\uff01 -f filename\uff1a-f \u5f8c\u9762\u8981\u7acb\u523b\u63a5\u8981\u88ab\u8655\u7406\u7684\u6a94\u540d\uff01\u5efa\u8b70 -f \u55ae\u7368\u5beb\u4e00\u500b\u9078\u9805\u56c9\uff01(\u6bd4\u8f03\u4e0d\u6703\u5fd8\u8a18) -C \u76ee\u9304 \uff1a\u9019\u500b\u9078\u9805\u7528\u5728\u89e3\u58d3\u7e2e\uff0c\u82e5\u8981\u5728\u7279\u5b9a\u76ee\u9304\u89e3\u58d3\u7e2e\uff0c\u53ef\u4ee5\u4f7f\u7528\u9019\u500b\u9078\u9805\u3002 \u5176\u4ed6\u5f8c\u7e8c\u7df4\u7fd2\u6703\u4f7f\u7528\u5230\u7684\u9078\u9805\u4ecb\u7d39\uff1a -p(\u5c0f\u5beb) \uff1a\u4fdd\u7559\u5099\u4efd\u8cc7\u6599\u7684\u539f\u672c\u6b0a\u9650\u8207\u5c6c\u6027\uff0c\u5e38\u7528\u65bc\u5099\u4efd(-c)\u91cd\u8981\u7684\u8a2d\u5b9a\u6a94 -P(\u5927\u5beb) \uff1a\u4fdd\u7559\u7d55\u5c0d\u8def\u5f91\uff0c\u4ea6\u5373\u5141\u8a31\u5099\u4efd\u8cc7\u6599\u4e2d\u542b\u6709\u6839\u76ee\u9304\u5b58\u5728\u4e4b\u610f\uff1b --exclude=FILE\uff1a\u5728\u58d3\u7e2e\u7684\u904e\u7a0b\u4e2d\uff0c\u4e0d\u8981\u5c07 FILE \u6253\u5305\uff01 \u58d3\u3000\u7e2e\uff1atar -jcv -f filename.tar.bz2 \u8981\u88ab\u58d3\u7e2e\u7684\u6a94\u6848\u6216\u76ee\u9304\u540d\u7a31 \u67e5\u3000\u8a62\uff1atar -jtv -f filename.tar.bz2 \u89e3\u58d3\u7e2e\uff1atar -jxv -f filename.tar.bz2 -C \u6b32\u89e3\u58d3\u7e2e\u7684\u76ee\u9304 \u5b9e\u4f8b\uff1a # \u89e3\u538btar.bz2\u6587\u4ef6 tar xvfj ./linux-2.6.23.tar.bz2 tar xvfJ ./linux-2.6.23.tar.xz tar xvfz ./linux-2.6.23.tar.gz tar -xf ./linux-2.6.23.tar.* # \u89e3\u538bpython-3.9.0-docs-html.tar.bz2\u5230/usr/share/doc/python-3.9.0/html tar --strip-components=1 \\ --no-same-owner \\ --no-same-permissions \\ -C /usr/share/doc/python-3.9.0/html \\ -xvf ../python-3.9.0-docs-html.tar.bz2 # --no-same-owner and --no-same-permissions # Ensure the installed files have the correct ownership and permissions. # Without these options, using tar will install the package files with the upstream creator's values. # \u5f53\u524d\u76ee\u5f55\u538b\u7f29\u6253\u5305\u5230/home/wzq/lfs/lfs-2.tar.xz tar -cJpf /home/wzq/lfs/lfs-2.tar.xz . # \u89e3\u538b\u5bfc\u5f53\u524d\u76ee\u5f55 tar -xpf $HOME/lfs-temp-tools-10.0-systemd.tar.xz","title":"\u538b\u7f29\u4e0e\u6253\u5305"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_14","text":"# \u672a\u4fdd\u5b58\u7684\u5185\u5b58\u6570\u636e\u5199\u5165\u786c\u76d8 sync # \u7acb\u523b\u5173\u673a\uff0c\u5176\u4e2d now \u76f8\u5f53\u4e8d\u65f6\u95f4\u4e3a 0 \u7684\u72b6\u6001 shutdown -h now # \u7cfb\u7edf\u5728\u4eca\u5929\u7684 20:25 \u5206\u4f1a\u5173\u673a\uff0c\u82e5\u5728 21:25 \u624d\u4e0b\u8fbe\u6b64\u6303\u4ee4\uff0c\u5219\u9691\u5929\u624d\u5173\u673a shutdown -h 20:25 # \u7cfb\u7edf\u518d\u8fc7\u5341\u5206\u949f\u540e\u81ea\u52a2\u5173\u673a shutdown -h +10 # \u7cfb\u7edf\u7acb\u523b\u91cd\u65b0\u542f\u52a2 shutdown -r now # \u518d\u8fc7\u4e09\u5341\u5206\u949f\u7cfb\u7edf\u4f1a\u91cd\u65b0\u542f\u52a2\uff0c\u5e75\u663e\u793a\u540e\u9762\u7684\u8baf\u606f\u7ed9\u6240\u6709\u5728\u5728\u7ebf\u7684\u4f7f\u7528\u8005 shutdown -r +30 'The system will reboot' # \u4ec5\u53d1\u51fa\u8b66\u544a\uff0c\u7cfb\u7edf\u5e76\u4e0d\u4f1a\u5173\u673a\u5566!\u5413\u552c\u4eba! shutdown -k now 'This system will reboot' # \u91cd\u65b0\u542f\u52a2\uff0c\u5173\u673a\uff0c\u65ad\u7535 reboot, halt, poweroff","title":"\u5173\u673a/\u91cd\u542f"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_15","text":"add the new user lfs groupadd lfs useradd -s /bin/bash -g lfs -m -k /dev/null lfs passwd lfs # add user lfs to group wheel usermod -a -G wheel lfs","title":"\u7528\u6237"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#terminal","text":"","title":"Terminal"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_16","text":"\u5f9e\u6e38\u6a19\u8655\u5411\u524d\u522a\u9664\u6307\u4ee4\u4e32 ([ctrl]+u); \u5411\u5f8c\u522a\u9664\u6307\u4ee4\u4e32 ([ctrl]+k)\u3002 \u8b93\u6e38\u6a19\u79fb\u52d5\u5230\u6574\u500b\u6307\u4ee4\u4e32\u7684\u6700\u524d\u9762 ([ctrl]+a) \u6216\u6700\u5f8c\u9762 ([ctrl]+e)\u3002","title":"\u79fb\u52a8\u6e38\u6807"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#history","text":"# number \uff1a\u57f7\u884c\u7b2c\u5e7e\u7b46\u6307\u4ee4\u7684\u610f\u601d\uff1b !number # command \uff1a\u7531\u6700\u8fd1\u7684\u6307\u4ee4\u5411\u524d\u641c\u5c0b\u300e\u6307\u4ee4\u4e32\u958b\u982d\u70ba command\u300f\u7684\u90a3\u500b\u6307\u4ee4\uff0c\u4e26\u57f7\u884c\uff1b !command # \u57f7\u884c\u4e0a\u4e00\u500b\u6307\u4ee4(\u76f8\u7576\u65bc\u6309\u2191\u6309\u9375\u5f8c\uff0c\u6309 Enter) !!","title":"history"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_17","text":"# \u5c07\u6307\u4ee4\u7684\u8cc7\u6599\u5168\u90e8\u5beb\u5165\u540d\u70ba list \u7684\u6a94\u6848\u4e2d find /home -name .bashrc > list 2>&1","title":"\u91cd\u5b9a\u5411"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_18","text":"","title":"\u4e0b\u8f7d"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#wget","text":"wget --input-file=wget-list --continue --directory-prefix=target-directory","title":"wget"},{"location":"Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#curl","text":"#-o, --output <file>: Write output to <file> instead of stdout. curl https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz --output gost.gz # -O, --remote-name: Write output to a local file named like the remote file we get curl -O https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz","title":"curl"},{"location":"MacOS/Launching%20Custom%20Daemons%20Using%20launchd/","text":"In OSX I needed a shell script to execute at login. There are a few different ways to perform this so I thought it might be helpful to document what your options are. This is the shell script I will execute: #!/bin/bash function start() { echo ${PATH} echo \"start mkdocs\" # It should not append a & symbol to the end as urual to run the command in the background, cause we will let launch to take over the task. /Library/Frameworks/Python.framework/Versions/3.10/bin/mkdocs serve } function stop() { echo \"stop mkdocs client...\" ps -ef | grep \"mkdocs\" | awk '{ print $2 }' | xargs kill } case ${1} in \"start\") start ;; \"stop\") stop ;; \"restart\") stop sleep 3 start ;; \"\") start ;; *) echo \"error arguents\" exit 1 ;; esac This script was named \"blogserver.sh\" locating in my blog diractory \"/Users/wzq/wk/blog/\". It start my blogserver, so that I can browse my blogs located in my own cumputer in the browser. It should be noted that the services programe you want to excute should not append a & symbol to the end as urual to daemonize on their own, cause we will let launchd to take over the task. If you do this way, launchd will lose track of it and attempt to relaunch it. OSX offers a few different startup options for us. First, we have Login Items available within Account Settings of the System Preference pane. We need to rename the shell script above to end in a .command file extension to allow the Login Items to execute it. This will run at login, however we will be left with a Terminal prompt visible when the script has completed. Preferably we would execute this in the background at user login. OSX manages system and user daemons via a tool called launchd. The interface to launchd is a tool called launchctl which allows for loading and unloading daemons into launchd. XML formatted plist files are used to describe operations loaded into launchctl. <?xml version=\"1.0\" encoding=\"utf-8\"?> <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> <plist version=\"1.0\"> <dict> <key>Label</key> <string>mkdocs.blogs</string> <key>ProgramArguments</key> <array> <string>./blogserver.sh</string> <string>start</string> </array> <key>WorkingDirectory</key> <string>/Users/wzq/wk/blog</string> <key>KeepAlive</key> <true /> <key>RunAtLoad</key> <true /> <key>StandardErrorPath</key> <string>/Users/wzq/Library/Logs/myblogs.log</string> <key>StandardOutPath</key> <string>/Users/wzq/Library/Logs/myblogs.log</string> </dict> </plist> The above file, \"mkdocs.blogs.plist\" needs to be saved in the \"~/Library/LaunchAgents\" directory. As you can see the xml dictates that the \"blogserver.sh\" file should be executed at load, note we no longer need a \".command\" file extension. We will now use launchctl to load our plist file. launchctl load ~/Library/LaunchAgents/mkdocs.blogs.plist To verify that your script executed correctly lets ask launchctl to show us what is running. launchctl list | grep \"mkdocs.blogs\" You will likely see an entries with three columns. Mine looks like this: 758 0 mkdocs.blogs The first column is the process id. The second column displays the last exit status of the job, zero represent success. Property list A list of often used keys follows below. All keys are optional unless otherwise noted. For a full list, see Apple's manpage for launchd.plist. Key Type Description Label String The name of the job. By convention, the job label is the same as the plist file name, without the .plist extension. Required. Program String A path to an executable. Useful for simple launches. At least one of Program or ProgramArguments is required. ProgramArguments Array of strings An array of strings representing a UNIX command. The first string is generally a path to an executable, while latter strings contain options or parameters. At least one of Program or ProgramArguments is required. UserName String (defaults to root or current user) The job will be run as the given user, who may (or may not) be the user who submitted it to launchd. RunAtLoad Boolean (defaults to NO) A boolean flag that defines if a task is launched immediately when the job is loaded into launchd. StartOnMount Boolean (defaults to NO) A boolean flag that defines if a task is launched when a new filesystem is mounted. QueueDirectories Array of strings Watch a directory for new files. The directory must be empty to begin with, and must be returned to an empty state before QueueDirectories will launch its task again. WatchPaths Array of strings Watch a filesystem path for changes. Can be a file or folder. StartInterval Integer Schedules job to run on a repeating schedule. Indicates number of seconds to wait between runs. StartCalendarInterval Dictionary of integers or Array of dictionaries of integers Job scheduling. The syntax is similar to cron . RootDirectory String The job will be chrooted into this directory before execution. WorkingDirectory String The job will be chdired into this directory before execution. StandardInPath, StandardOutPath, StandardErrorPath String Keys to determine files for input and output for the launched process. LowPriorityIO Boolean Tells the kernel that this task is of a low priority when doing filesystem I/O. AbandonProcessGroup Boolean (defaults to NO) A boolean flag that defines whether subprocesses launched from a task launched by launchd will be killed when the task ends. Useful where a short-lived task starts a long-lived subtask, but may result in zombie processes. SessionCreate Boolean (defaults to NO) A boolean flag that defines whether a security session will be created for the task and its subprocesses. Reference https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html#//apple_ref/doc/uid/10000172i-SW7-BCIEDDBJ https://en.wikipedia.org/wiki/Launchd","title":"Launching Custom Daemons Using launchd"},{"location":"MacOS/Launching%20Custom%20Daemons%20Using%20launchd/#property-list","text":"A list of often used keys follows below. All keys are optional unless otherwise noted. For a full list, see Apple's manpage for launchd.plist. Key Type Description Label String The name of the job. By convention, the job label is the same as the plist file name, without the .plist extension. Required. Program String A path to an executable. Useful for simple launches. At least one of Program or ProgramArguments is required. ProgramArguments Array of strings An array of strings representing a UNIX command. The first string is generally a path to an executable, while latter strings contain options or parameters. At least one of Program or ProgramArguments is required. UserName String (defaults to root or current user) The job will be run as the given user, who may (or may not) be the user who submitted it to launchd. RunAtLoad Boolean (defaults to NO) A boolean flag that defines if a task is launched immediately when the job is loaded into launchd. StartOnMount Boolean (defaults to NO) A boolean flag that defines if a task is launched when a new filesystem is mounted. QueueDirectories Array of strings Watch a directory for new files. The directory must be empty to begin with, and must be returned to an empty state before QueueDirectories will launch its task again. WatchPaths Array of strings Watch a filesystem path for changes. Can be a file or folder. StartInterval Integer Schedules job to run on a repeating schedule. Indicates number of seconds to wait between runs. StartCalendarInterval Dictionary of integers or Array of dictionaries of integers Job scheduling. The syntax is similar to cron . RootDirectory String The job will be chrooted into this directory before execution. WorkingDirectory String The job will be chdired into this directory before execution. StandardInPath, StandardOutPath, StandardErrorPath String Keys to determine files for input and output for the launched process. LowPriorityIO Boolean Tells the kernel that this task is of a low priority when doing filesystem I/O. AbandonProcessGroup Boolean (defaults to NO) A boolean flag that defines whether subprocesses launched from a task launched by launchd will be killed when the task ends. Useful where a short-lived task starts a long-lived subtask, but may result in zombie processes. SessionCreate Boolean (defaults to NO) A boolean flag that defines whether a security session will be created for the task and its subprocesses.","title":"Property list"},{"location":"MacOS/Launching%20Custom%20Daemons%20Using%20launchd/#reference","text":"https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html#//apple_ref/doc/uid/10000172i-SW7-BCIEDDBJ https://en.wikipedia.org/wiki/Launchd","title":"Reference"},{"location":"MacOS/MacOS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","text":"\u7f51\u7edc netstat -f inet -n -p TCP UD","title":"MacOS\u5e38\u7528\u547d\u4ee4"},{"location":"MacOS/MacOS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_1","text":"netstat -f inet -n -p TCP UD","title":"\u7f51\u7edc"},{"location":"Unbuntu/fix-the-no-wi-fi-adapter-found-error-on-ubuntu/","text":"Use the Ubuntu ISO image to install drivers A remarkable fact is that this method doesn\u2019t require you to have an internet connection. Step 1: Copy the Ubuntu ISO image in your home directory. Rename it to a simple name like \u2018ubuntu.iso.\u2019 Step 2: Launch the Terminal and mount the ISO image on the system like a CD/DVD. sudo mkdir /media/cdrom cd ~ sudo mount -o loop ubuntu.iso /media/cdrom Step 3. Now, launch the Software & Updates app from the applications menu. Step 4. Click on the Ubuntu Software tab and check the box \u2018Installable from CD-Rom/DVD.\u2019 A window will pop-up, and you will be required to enter the root password. Step 5. Click on the Additional Drivers tab. If you see the statement \u201cNo additional drivers available,\u201d this Method won\u2019t work for you. If you see the proprietary drivers listed, then you can go ahead. Select the proprietary drivers and click the Apply Changes button. In my case, my system supports Broadcom drivers. Once done, your wireless connection problem should be solved, and you can see your WiFi networks. https://www.fosslinux.com/43345/fix-the-no-wi-fi-adapter-found-error-on-ubuntu.htm","title":"Fix \u201cNo Wi-Fi Adapter Found\u201d Error on Ubuntu"},{"location":"Unbuntu/fix-the-no-wi-fi-adapter-found-error-on-ubuntu/#use-the-ubuntu-iso-image-to-install-drivers","text":"A remarkable fact is that this method doesn\u2019t require you to have an internet connection. Step 1: Copy the Ubuntu ISO image in your home directory. Rename it to a simple name like \u2018ubuntu.iso.\u2019 Step 2: Launch the Terminal and mount the ISO image on the system like a CD/DVD. sudo mkdir /media/cdrom cd ~ sudo mount -o loop ubuntu.iso /media/cdrom Step 3. Now, launch the Software & Updates app from the applications menu. Step 4. Click on the Ubuntu Software tab and check the box \u2018Installable from CD-Rom/DVD.\u2019 A window will pop-up, and you will be required to enter the root password. Step 5. Click on the Additional Drivers tab. If you see the statement \u201cNo additional drivers available,\u201d this Method won\u2019t work for you. If you see the proprietary drivers listed, then you can go ahead. Select the proprietary drivers and click the Apply Changes button. In my case, my system supports Broadcom drivers. Once done, your wireless connection problem should be solved, and you can see your WiFi networks. https://www.fosslinux.com/43345/fix-the-no-wi-fi-adapter-found-error-on-ubuntu.htm","title":"Use the Ubuntu ISO image to install drivers"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","text":"\u5e2e\u52a9 vimtutor \u67e5\u770b\u4f7f\u7528\u8bf4\u660e :help feature \u83b7\u53d6feature \u7684\u76f8\u5173\u4fe1\u606f :help doc-file-list \u83b7\u53d6\u5e2e\u52a9\u6587\u4ef6\u7684\u5b8c\u6574\u5217\u8868 CONTROL+] \u6253\u5f00\u94fe\u63a5 CONTROL+o \u8fd4\u56de :q \u9000\u51fa\u5e2e\u52a9\u6587\u6863 Mode Vim is a modal editor. It has a normal mode, visual mode ,insert mode, and other modes. Undo/Redo u: undo last change Ctrl_R: Redo \u6d4f\u89c8 ctrl+d \u4e0b\u7ffb\u534a\u5c4f d=down ctrl+u \u4e0a\u7ffb\u534a\u5c4f u=up ctrl+b\u4e0a\u7ffb\u4e00\u9875 b=backward ctrl+f\u4e0b\u7ffb\u4e00\u9875 f=forward \u6eda\u4e00\u884c ctrl-e ctrl-y zz \u8ba9\u5149\u6807\u6240\u5728\u7684\u884c\u5c45\u5c4f\u5e55\u4e2d\u592e zt \u8ba9\u5149\u6807\u6240\u5728\u7684\u884c\u5c45\u5c4f\u5e55\u6700\u4e0a\u4e00\u884c t=top zb \u8ba9\u5149\u6807\u6240\u5728\u7684\u884c\u5c45\u5c4f\u5e55\u6700\u4e0b\u4e00\u884c b=bottom \u5149\u6807\u79fb\u52a8 w \u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26 b \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26 $ \u79fb\u52a8\u5230\u884c\u5c3e 0\u6216^ \u79fb\u52a8\u5230\u884c\u9996 gg \u79fb\u52a8\u5230\u6587\u6863\u5934 G \u79fb\u52a8\u5230\u6587\u6863\u5c3e \u884c\u53f7\uff0bG \u8df3\u8f6c\u5230\u67d0\u884c\uff0c\u4f8b\u5982\u5230\u7b2c6\u884c 6G :\u884c\u53f7 , \u8df3\u8f6c\u5230\u67d0\u884c\uff0c \u4f8b\u5982\u5230\u7b2c6\u884c :6 ( \u6216 { \u79fb\u52a8\u5230\u6bb5\u843d\u5934 ) \u6216 } \u79fb\u52a8\u5230\u6bb5\u843d\u5c3e e \u79fb\u52a8\u5230\u5f53\u524d\u5b57\u7684\u5c3e\u90e8 ge\u79fb\u52a8\u5230\u524d\u4e00\u4e2a\u5b57\u7684\u5c3e\u90e8 % \u8df3\u8f6c\u5230\u914d\u5bf9\u7684\u7b26\u53f7\u4e0a\uff0c\u914d\u5bf9\u7b26\u53f7\u4f8b\u5982: \"\", (), <>, {} [[ \u8df3\u8f6c\u5230\u5f53\u524d\u6216\u8005\u4e0a\u4e00\u4ee3\u7801\u5757(\u51fd\u6570\u5b9a\u4e49\u3001\u7c7b\u5b9a\u4e49\u7b49)\u7684\u5f00\u5934\u53bb(\u4f46\u8981\u6c42\u4ee3\u7801\u5757\u4e2d'{'\u5fc5\u987b\u5355\u72ec\u5360\u4e00\u884c) ][ \u8df3\u8f6c\u5230\u5f53\u524d\u4ee3\u7801\u5757(\u51fd\u6570\u5b9a\u4e49\u3001\u7c7b\u5b9a\u4e49\u7b49)\u7684\u7ed3\u5c3e\u53bb(\u4f46\u8981\u6c42\u4ee3\u7801\u5757\u4e2d'{'\u5fc5\u987b\u5355\u72ec\u5360\u4e00\u884c) ]] \u8df3\u8f6c\u5230\u4e0b\u4e00\u4ee3\u7801\u5757(\u51fd\u6570\u5b9a\u4e49\u3001\u7c7b\u5b9a\u4e49\u7b49)\u7684\u5f00\u5934\u53bb(\u4f46\u8981\u6c42\u4ee3\u7801\u5757\u4e2d'{'\u5fc5\u987b\u5355\u72ec\u5360\u4e00\u884c) [/ \u8df3\u5230\u6ce8\u91ca\u5f00\u5934\uff08\u53ea\u5bf9/ /\u6ce8\u91ca\u6709\u6548\uff09 ]/ \u8df3\u5230\u6ce8\u91ca\u7ed3\u5c3e\uff08\u53ea\u5bf9/ /\u6ce8\u91ca\u6709\u6548\uff09 gD \u8df3\u8f6c\u5230\u5f53\u524d\u6587\u4ef6\u5185\u6807\u8bc6\u7b26\u9996\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u53ef\u7528\u4e8e\u8df3\u8f6c\u5230\u5168\u90e8\u53d8\u91cf\u7684\u5b9a\u4e49\u5904\uff1b\u67e5\u627e\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u8981\u662f\u591a\u4e2a\u51fd\u6570\u4e2d\u5b9a\u4e49\u4e86\u8be5\u5c40\u90e8\u53d8\u91cf\uff0c\u4f7f\u7528gD\u8fdb\u884c\u67e5\u627e\uff0c\u627e\u5230\u7684\u53d8\u91cf\u5b9a\u4e49\u53ef\u80fd\u4e0d\u662f\u4f60\u9700\u8981\u7684 gd \u8df3\u8f6c\u5230\u5f53\u524d\u51fd\u6570\u5185\u6807\u8bc6\u7b26\u9996\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u53ef\u7528\u4e8e\u8df3\u8f6c\u5230\u5c40\u90e8\u53d8\u91cf\u7684\u5b9a\u4e49\u5904 '' \u8df3\u8f6c\u5230\u5149\u6807\u4e0a\u6b21\u505c\u9760\u7684\u5730\u65b9, \u662f\u4e24\u4e2a ' , \u800c\u4e0d\u662f\u4e00\u4e2a \" \u590d\u5236\u7c98\u8d34 \u590d\u5236=Yank, \u5220\u9664=Delete, \u7c98\u8d34=Put Yank(Y) \u590d\u5236\u5230\u901a\u7528\u7f13\u51b2\u533a Delete\uff08D\uff09\u5220\u9664\u5e76\u653e\u5230\u901a\u7528\u7f13\u51b2\u533a Put(P) \u628a\u901a\u7528\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u63d2\u5165\u7684\u5f53\u524d\u6587\u672c \u4f8b\u5982\uff1a yy \u590d\u5236\u5f53\u524d\u884c n+yy \u590d\u5236\u5f53\u524d\u884c\u548c\u540e\u9762n-1\u884c gg + yG \u590d\u5236\u5168\u90e8 \"ayy \u590d\u5236\u5230\u7f13\u51b2\u533aa \"ap \u7c98\u8d34\u7f13\u51b2\u533aa\u5230\u6587\u672c Delete\u547d\u4ee4\u7684\u6a21\u5f0f\u540cYank\u4e00\u6837 \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e0b\u5173\u4e8e\u5bc4\u5b58\u5668(registers)\u7684\u64cd\u4f5c\u3002 \u201c\uff0b\u5b57\u6bcd\uff0byy \u628a\u5f53\u524d\u884c\u590d\u5236\u5230\u5b57\u6bcd\u7684\u547d\u540d\u5bc4\u5b58\u5668, \u201c\uff0b\u5b57\u6bcd\uff0bp \u628a\u5bf9\u5e94\u5b57\u6bcd\u540d\u5b57\u7684\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u9ecf\u8d34\u5230\u5f53\u524d\u6587\u6863\u3002 \u66f4\u591a\u5173\u4e8e\u5bc4\u5b58\u5668\u7684\u4ecb\u7ecd\u53c2\u89c1 :help registers \u7f16\u8f91 \u5220\u9664 d+\u8981\u5220\u9664\u7684\u4f4d\u7f6e\uff0c \u4f8b\u5982\uff1a dw \u5220\u9664\u5230\u5b57\u7684\u672b\u5c3e daw \u5220\u9664\u4e00\u4e2a\u5355\u8bcd d3aw \u5220\u96643\u4e2a\u5355\u8bcd dw \u5220\u9664\u5230\u5b57\u7684\u5c3e\u90e8 db \u5220\u9664\u5230\u5b57\u7684\u5f00\u59cb dd \u5220\u9664\u4e00\u884c x \u6216 dl \u5220\u9664\u5355\u4e2a\u5b57\u7b26 d0 \u6216 d^ \u4ece\u5f53\u524d\u4f4d\u7f6e\u5220\u9664\u5230\u884c\u7684\u5934\u90e8 d$ \u6216 D \u5220\u9664\u5230\u884c\u5c3e d) \u6216 d} \u4ece\u5f53\u524d\u4f4d\u7f6e\u5220\u9664\u5230\u6bb5\u843d\u5c3e d( \u6216 d{ \u4ece\u5f53\u524d\u4f4d\u7f6e\u5220\u9664\u5230\u6bb5\u843d\u5934 d/text \u5220\u9664\u5230text\u5355\u8bcd\u7684\u4e0b\u4e00\u6b21\u51fa\u73b0 cw \u5220\u9664\u5230\u5b57\u7684\u672b\u5c3e\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f \u63d2\u5165\u6a21\u5f0f\u4e0b, ctrl+H \u5b57\u7b26\u5220\u9664 ctrl+U \u884c\u5220\u9664 ctrl+W \u5b57\u5220\u9664 \u5bf9\u914d\u5bf9\u7b26\u53f7\u5185\u7684\u5185\u5bb9\u8fdb\u884c\u64cd\u4f5c \u914d\u5bf9\u7b26\u53f7\u5305\u62ec \"\", (), {} \u7b49 \u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5bf9\u7b26\u53f7\u5185\u7684\u5185\u5bb9\u8fdb\u884c\u64cd\u4f5c\u3002 ci+\u7b26\u53f7 \u66f4\u6539\u914d\u5bf9\u7b26\u53f7\u4e2d\u7684\u6587\u672c\u5185\u5bb9 di+\u7b26\u53f7 \u5220\u9664\u914d\u5bf9\u7b26\u53f7\u4e2d\u7684\u6587\u672c\u5185\u5bb9 yi+\u7b26\u53f7 \u590d\u5236\u914d\u5bf9\u7b26\u53f7\u4e2d\u7684\u6587\u672c\u5185\u5bb9 vi+\u7b26\u53f7 \u9009\u4e2d\u8fd9\u4e9b\u914d\u5bf9\u7b26\u53f7\u4e2d\u7684\u6587\u672c\u5185\u5bb9 \u53e6\u5916\u5982\u679c\u628a\u4e0a\u9762\u7684 i \u6539\u6210 a \u53ef\u4ee5\u8fde\u914d\u5bf9\u7b26\u53f7\u4e00\u8d77\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u8981\u5220\u9664\u53cc\u5f15\u53f7\u5185 \"\" \u5185\u7684\u5185\u5bb9, 111\"222\"333 \uff0c \u5c06\u5149\u6807\u79fb\u5230\u53cc\u5f15\u53f7\u5185\uff0c\u6309\u4e0b di\" ,\u5220\u9664\u53cc\u5f15\u53f7\u5185\u7684\u5185\u5bb9\uff0c\u53d8\u6210 111\"\"333 \uff0c\u82e5\u8981\u8fde\u540c\u53cc\u5f15\u53f7\u4e00\u540c\u5220\u9664\uff0c\u5219\u8981\u6309\u4e0b da\" ,\u6587\u672c\u4f1a\u4fee\u6539\u4e3a\uff1a 111333 Select text inside a tag Tag is the tag in html or xml, for example <div> ... </div> , We can select a text within an html or xml tag by using visual selection v and text object it . Go to normal mode by pressing ESC Type vit from anywhere within the html or xml section This will visually select all text inside the tag. All other text objects can also be used to operate on the text inside the tag vit - select all text inside the tag cit - delete text inside the tag and place in insert mode dit - delete text inside the tag and remain in normal mode cat - delete around tag and place in insert mode dat - delete text around the tag and remain in normal mode \u683c\u5f0f\u5316 \\== \u683c\u5f0f\u5316\u5f53\u524d\u884c n+== \u683c\u5f0f\u5316\u5f53\u524d\u548c\u540e\u9762n-1\u884c gg=G \u6216\u8005 = \u683c\u5f0f\u5316\u5168\u6587 \u7f29\u8fdb \u63d2\u5165\u6a21\u5f0f\u4e0b\uff1a CTRL+T \u53f3\u7f29\u8fdb CTRL+D \u5de6\u7f29\u8fdb \u547d\u4ee4\u6a21\u5f0f\u4e0b\uff1a > \u589e\u52a0\u7f29\u8fdb, x> \u8868\u793a\u589e\u52a0\u4ee5\u4e0bx\u884c\u7684\u7f29\u8fdb < \u51cf\u5c11\u7f29\u8fdb, x< \u8868\u793a\u51cf\u5c11\u4ee5\u4e0bx\u884c\u7684\u7f29\u8fdb \u4ee3\u7801\u6ce8\u91ca \u65b9\u6cd5\u4e00 \u591a\u884c\u6ce8\u91ca\uff1a \u8fdb\u5165\u547d\u4ee4\u884c\u6a21\u5f0f\uff0c\u6309 ctrl + v \u8fdb\u5165 visual block\u6a21\u5f0f\uff0c\u7136\u540e\u6309j\u6216k\u9009\u4e2d\u591a\u884c\uff0c\u628a\u9700\u8981\u6ce8\u91ca\u7684\u884c\u6807\u8bb0\u8d77\u6765\uff0c\u6309\u5927\u5199\u5b57\u6bcdI\uff0c\u518d\u63d2\u5165\u6ce8\u91ca\u7b26\uff0c\u4f8b\u5982 // \uff0c\u6309esc\u952e\u5c31\u4f1a\u5168\u90e8\u6ce8\u91ca\u4e86\u3002 \u53d6\u6d88\u591a\u884c\u6ce8\u91ca\uff1a \u8fdb\u5165\u547d\u4ee4\u884c\u6a21\u5f0f\uff0c\u6309\u00b7ctrl + v\u00b7\u8fdb\u5165 visual block\u6a21\u5f0f\uff0c\u6309\u5b57\u6bcdl\u6a2a\u5411\u9009\u4e2d\u5217\u7684\u4e2a\u6570\uff0c\u4f8b\u5982 \u00b7//\u00b7 \u9700\u8981\u9009\u4e2d2\u5217\uff0c\u6309\u5b57\u6bcdj\uff0c\u6216 \u8005k\u9009\u4e2d\u6ce8\u91ca\u7b26\u53f7\uff0c\u6309d\u952e\u5c31\u53ef\u5220\u9664\u6ce8\u91ca\u7b26\u3002 \u65b9\u6cd5\u4e8c \u66ff\u6362\u547d\u4ee4 \u63d2\u5165\u6ce8\u91ca :\u8d77\u59cb\u884c\u53f7,\u7ed3\u675f\u884c\u53f7s/^/\u6ce8\u91ca\u7b26/g \u4f8b\u5982\uff1a :27,30s#^#//#g \u5c31\u662f\u572827 - 30\u884c\u6dfb\u52a0 // \u6ce8\u91ca` \u53d6\u6d88\u6ce8\u91ca \u00b7:\u8d77\u59cb\u884c\u53f7,\u7ed3\u675f\u884c\u53f7s/^\u6ce8\u91ca\u7b26//g\u00b7 \u4f8b\u5982\uff1a :27,30s#^//##g \u5c31\u662f\u572827 - 30\u884c\u5220\u9664 // \u6ce8\u91ca \u81ea\u52a8\u8865\u5168 crl+p \u548c crl+n \u66ff\u6362 \u5728\u547d\u4ee4\u884c\u6a21\u5f0f\u4e0b :[g] [address] s/search-string/replacement-string[/option] \u5176\u4e2d addess\uff1a\u4ee3\u8868\u884c s: \u8868\u793a\u66ff\u6362\u5f53\u524d\u5b57\u7b26 S: \u8868\u793a\u66ff\u6362\u5f53\u524d\u884c ~: \u8868\u793a\u4fee\u6539\u5927\u5c0f\u5199 \u4f8b\u5982\uff1a :s/p1/p2/g \u5c06\u5f53\u524d\u884c\u4e2d\u6240\u6709p1\u5747\u7528p2\u66ff\u4ee3 :1,.s/p1/p2/g \u5c06\u5f53\u524d\u884c\u4e4b\u524d\u7684\u6240\u6709\u884c\u7684\u5b57\u7b26\u4e32p1\u66ff\u6362\u4e3a\u5b57\u7b26\u4e32p2 :1,$s/p1/p2/g \u5c06\u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u4e32p1\u66ff\u6362\u4e3a\u5b57\u7b26\u4e32p2 :g/chaper/s/ten/10/ \u5c06\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5305\u542b\u5b57\u7b26\u4e32chaper\u7684\u6240\u6709\u884c\u4e2d\u7684\u5b57\u7b26\u4e32ten\u66ff\u6362\u4e3a\u5b57\u7b26\u4e3210 :%s/<ten>/10/g \u5c06\u6240\u6709\u51fa\u73b0\u7684\u5b57ten\u66ff\u6362\u4e3a\u5b57\u7b26\u4e3210 :.,.+10s/every/each/g \u5c06\u51fa\u73b0\u7684\u4ece\u5f53\u524d\u884c\u5230\u540e\u7eed10\u884c\u5185\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32every\u66ff\u6362\u4e3a\u5b57\u7b26\u4e32each :s/<short\\>/\"&\"/ \u5c06\u5f53\u524d\u884c\u4e2d\u7684\u5b57short\u66ff\u6362\u4e3a\"short\"(\u5373\u5c06\u5f53\u524d\u884c\u4e2d\u7684\u5b57short\u7528\u5f15\u53f7\u62ec\u8d77\u6765) :n1,n2s/p1/p2/g \u5c06\u7b2cn1\u81f3n2\u884c\u4e2d\u6240\u6709p1\u5747\u7528p2\u66ff\u4ee3 :n1,n2 co n3 \u5c06n1\u884c\u5230n2\u884c\u4e4b\u95f4\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u7b2cn3\u884c\u4e0b :n1,n2 m n3 \u5c06n1\u884c\u5230n2\u884c\u4e4b\u95f4\u7684\u5185\u5bb9\u79fb\u81f3\u5230\u7b2cn3\u884c\u4e0b :n1,n2 d \u5c06n1\u884c\u5230n2\u884c\u4e4b\u95f4\u7684\u5185\u5bb9\u5220\u9664 \u67e5\u627e /pattern \u4ece\u5149\u6807\u5f00\u59cb\u5904\u5411\u6587\u4ef6\u5c3e\u641c\u7d22pattern ?pattern \u4ece\u5149\u6807\u5f00\u59cb\u5904\u5411\u6587\u4ef6\u9996\u641c\u7d22pattern \u9f20\u6807\u79fb\u52a8\u7684\u4e00\u4e2a\u5355\u8bcd\u4e0a,\u6309 * \u5728\u5168\u6587\u4e2d\u67e5\u627e\u4e0e\u4e4b\u76f8\u540c\u7684\u5355\u8bcd n\uff1a\u5728\u540c\u4e00\u65b9\u5411\u91cd\u590d\u4e0a\u4e00\u6b21\u641c\u7d22\u547d\u4ee4\uff0cN\uff1a\u5728\u53cd\u65b9\u5411\u4e0a\u91cd\u590d\u4e0a\u4e00\u6b21\u641c\u7d22\u547d\u4ee4 \u6807\u8bb0 ma \u8bbe\u7f6e\u4e00\u4e2a\u540d\u5b57\u4e3a a \u7684\u6807\u8bb0 \u2018a (\u5355\u5f15\u53f7+\u6807\u8bb0a)\u5b9a\u4f4d\u5230\u6807\u8bb0a\u7684\u4f4d\u7f6e\u6240\u5728\u884c\u7684\u8d77\u59cb\u4f4d\u7f6e `a(\u53cd\u5f15\u53f7+\u6807\u8bb0a)\u5c06\u5149\u6807\u5b9a\u4f4d\u5230\u6807\u8bb0a\u6240\u5728\u7684\u7684\u7cbe\u786e\u4f4d\u7f6e d'a \u5220\u9664\u5f53\u524d\u884c\u5230\u6807\u8bb0a\u6240\u5728\u884c\u4e4b\u95f4\u7684\u6587\u672c d a ` \u5220\u9664\u5f53\u524d\u884c\u5230a\u6807\u8bb0\u5904\u7684\u6240\u6709\u6587\u672c \u5728\u547d\u4ee4\u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u884c\u53f7\u4f7f\u7528 \uff0c\u4f8b\u5982\uff1a 'm,.s/the/THE/g \u7f16\u8f91\u6307\u5b9a\u6587\u4ef6 :e[!] [filename] \u7f16\u8f91filename\u6307\u5b9a\u7684\u6587\u4ef6\uff0c\u5982\u679c\u4e0d\u6307\u5b9afilename\uff0c\u7ee7\u7eed\u7f16\u8f91\u5f53\u524d\u6587\u4ef6(load\u6587\u4ef6\u5230\u5f53\u524d\u7f13\u51b2\u533a\u5373\u7f16\u8f91\u533a\uff0c\u53ef\u505a\u5237\u65b0\u6587\u4ef6\u7528) :e# \u5173\u95ed\u5f53\u524d\u6587\u4ef6\uff0c\u6253\u5f00\u4e0a\u6b21\u7f16\u8f91\u7684\u6587\u4ef6 :n filename \u6253\u5f00\u65b0\u6587\u4ef6 vim\u4e2d\u6267\u884cshell :sh \u8fdb\u5165\u547d\u4ee4\u884c\u6a21\u5f0f\uff0c \u6309 CONTROL+D \u6216\u8f93\u5165 exit \u547d\u4ee4\u9000\u51fa\u547d\u4ee4\u6a21\u5f0f :!command ,vim\u4e2d\u6267\u884ccommand\u547d\u4ee4 !!command ,\u6267\u884ccommand\u547d\u4ee4\uff0c\u5e76\u628a\u8f93\u51fa\u7ed3\u679c\u66ff\u6362\u5f53\u524d\u884c !+\u884c\u5730\u5740+ command ,\u5bf9\u6307\u5b9a\u884c\u6267\u884ccommand\u547d\u4ee4\uff0c\u5e76\u7528\u8f93\u51fa\u7ed3\u679c\u66ff\u6362 \u91cd\u590d\u4e0a\u6b21\u547d\u4ee4 . \u91cd\u590d\u4e0a\u6b21\u64cd\u4f5c \u200b","title":"Vim\u5e38\u7528\u547d\u4ee4"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_1","text":"vimtutor \u67e5\u770b\u4f7f\u7528\u8bf4\u660e :help feature \u83b7\u53d6feature \u7684\u76f8\u5173\u4fe1\u606f :help doc-file-list \u83b7\u53d6\u5e2e\u52a9\u6587\u4ef6\u7684\u5b8c\u6574\u5217\u8868 CONTROL+] \u6253\u5f00\u94fe\u63a5 CONTROL+o \u8fd4\u56de :q \u9000\u51fa\u5e2e\u52a9\u6587\u6863","title":"\u5e2e\u52a9"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#mode","text":"Vim is a modal editor. It has a normal mode, visual mode ,insert mode, and other modes.","title":"Mode"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#undoredo","text":"u: undo last change Ctrl_R: Redo","title":"Undo/Redo"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_2","text":"ctrl+d \u4e0b\u7ffb\u534a\u5c4f d=down ctrl+u \u4e0a\u7ffb\u534a\u5c4f u=up ctrl+b\u4e0a\u7ffb\u4e00\u9875 b=backward ctrl+f\u4e0b\u7ffb\u4e00\u9875 f=forward \u6eda\u4e00\u884c ctrl-e ctrl-y zz \u8ba9\u5149\u6807\u6240\u5728\u7684\u884c\u5c45\u5c4f\u5e55\u4e2d\u592e zt \u8ba9\u5149\u6807\u6240\u5728\u7684\u884c\u5c45\u5c4f\u5e55\u6700\u4e0a\u4e00\u884c t=top zb \u8ba9\u5149\u6807\u6240\u5728\u7684\u884c\u5c45\u5c4f\u5e55\u6700\u4e0b\u4e00\u884c b=bottom","title":"\u6d4f\u89c8"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_3","text":"w \u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26 b \u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26 $ \u79fb\u52a8\u5230\u884c\u5c3e 0\u6216^ \u79fb\u52a8\u5230\u884c\u9996 gg \u79fb\u52a8\u5230\u6587\u6863\u5934 G \u79fb\u52a8\u5230\u6587\u6863\u5c3e \u884c\u53f7\uff0bG \u8df3\u8f6c\u5230\u67d0\u884c\uff0c\u4f8b\u5982\u5230\u7b2c6\u884c 6G :\u884c\u53f7 , \u8df3\u8f6c\u5230\u67d0\u884c\uff0c \u4f8b\u5982\u5230\u7b2c6\u884c :6 ( \u6216 { \u79fb\u52a8\u5230\u6bb5\u843d\u5934 ) \u6216 } \u79fb\u52a8\u5230\u6bb5\u843d\u5c3e e \u79fb\u52a8\u5230\u5f53\u524d\u5b57\u7684\u5c3e\u90e8 ge\u79fb\u52a8\u5230\u524d\u4e00\u4e2a\u5b57\u7684\u5c3e\u90e8 % \u8df3\u8f6c\u5230\u914d\u5bf9\u7684\u7b26\u53f7\u4e0a\uff0c\u914d\u5bf9\u7b26\u53f7\u4f8b\u5982: \"\", (), <>, {} [[ \u8df3\u8f6c\u5230\u5f53\u524d\u6216\u8005\u4e0a\u4e00\u4ee3\u7801\u5757(\u51fd\u6570\u5b9a\u4e49\u3001\u7c7b\u5b9a\u4e49\u7b49)\u7684\u5f00\u5934\u53bb(\u4f46\u8981\u6c42\u4ee3\u7801\u5757\u4e2d'{'\u5fc5\u987b\u5355\u72ec\u5360\u4e00\u884c) ][ \u8df3\u8f6c\u5230\u5f53\u524d\u4ee3\u7801\u5757(\u51fd\u6570\u5b9a\u4e49\u3001\u7c7b\u5b9a\u4e49\u7b49)\u7684\u7ed3\u5c3e\u53bb(\u4f46\u8981\u6c42\u4ee3\u7801\u5757\u4e2d'{'\u5fc5\u987b\u5355\u72ec\u5360\u4e00\u884c) ]] \u8df3\u8f6c\u5230\u4e0b\u4e00\u4ee3\u7801\u5757(\u51fd\u6570\u5b9a\u4e49\u3001\u7c7b\u5b9a\u4e49\u7b49)\u7684\u5f00\u5934\u53bb(\u4f46\u8981\u6c42\u4ee3\u7801\u5757\u4e2d'{'\u5fc5\u987b\u5355\u72ec\u5360\u4e00\u884c) [/ \u8df3\u5230\u6ce8\u91ca\u5f00\u5934\uff08\u53ea\u5bf9/ /\u6ce8\u91ca\u6709\u6548\uff09 ]/ \u8df3\u5230\u6ce8\u91ca\u7ed3\u5c3e\uff08\u53ea\u5bf9/ /\u6ce8\u91ca\u6709\u6548\uff09 gD \u8df3\u8f6c\u5230\u5f53\u524d\u6587\u4ef6\u5185\u6807\u8bc6\u7b26\u9996\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u53ef\u7528\u4e8e\u8df3\u8f6c\u5230\u5168\u90e8\u53d8\u91cf\u7684\u5b9a\u4e49\u5904\uff1b\u67e5\u627e\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u8981\u662f\u591a\u4e2a\u51fd\u6570\u4e2d\u5b9a\u4e49\u4e86\u8be5\u5c40\u90e8\u53d8\u91cf\uff0c\u4f7f\u7528gD\u8fdb\u884c\u67e5\u627e\uff0c\u627e\u5230\u7684\u53d8\u91cf\u5b9a\u4e49\u53ef\u80fd\u4e0d\u662f\u4f60\u9700\u8981\u7684 gd \u8df3\u8f6c\u5230\u5f53\u524d\u51fd\u6570\u5185\u6807\u8bc6\u7b26\u9996\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u53ef\u7528\u4e8e\u8df3\u8f6c\u5230\u5c40\u90e8\u53d8\u91cf\u7684\u5b9a\u4e49\u5904 '' \u8df3\u8f6c\u5230\u5149\u6807\u4e0a\u6b21\u505c\u9760\u7684\u5730\u65b9, \u662f\u4e24\u4e2a ' , \u800c\u4e0d\u662f\u4e00\u4e2a \"","title":"\u5149\u6807\u79fb\u52a8"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_4","text":"\u590d\u5236=Yank, \u5220\u9664=Delete, \u7c98\u8d34=Put Yank(Y) \u590d\u5236\u5230\u901a\u7528\u7f13\u51b2\u533a Delete\uff08D\uff09\u5220\u9664\u5e76\u653e\u5230\u901a\u7528\u7f13\u51b2\u533a Put(P) \u628a\u901a\u7528\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u63d2\u5165\u7684\u5f53\u524d\u6587\u672c \u4f8b\u5982\uff1a yy \u590d\u5236\u5f53\u524d\u884c n+yy \u590d\u5236\u5f53\u524d\u884c\u548c\u540e\u9762n-1\u884c gg + yG \u590d\u5236\u5168\u90e8 \"ayy \u590d\u5236\u5230\u7f13\u51b2\u533aa \"ap \u7c98\u8d34\u7f13\u51b2\u533aa\u5230\u6587\u672c Delete\u547d\u4ee4\u7684\u6a21\u5f0f\u540cYank\u4e00\u6837 \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e0b\u5173\u4e8e\u5bc4\u5b58\u5668(registers)\u7684\u64cd\u4f5c\u3002 \u201c\uff0b\u5b57\u6bcd\uff0byy \u628a\u5f53\u524d\u884c\u590d\u5236\u5230\u5b57\u6bcd\u7684\u547d\u540d\u5bc4\u5b58\u5668, \u201c\uff0b\u5b57\u6bcd\uff0bp \u628a\u5bf9\u5e94\u5b57\u6bcd\u540d\u5b57\u7684\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u9ecf\u8d34\u5230\u5f53\u524d\u6587\u6863\u3002 \u66f4\u591a\u5173\u4e8e\u5bc4\u5b58\u5668\u7684\u4ecb\u7ecd\u53c2\u89c1 :help registers","title":"\u590d\u5236\u7c98\u8d34"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_5","text":"","title":"\u7f16\u8f91"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_6","text":"d+\u8981\u5220\u9664\u7684\u4f4d\u7f6e\uff0c \u4f8b\u5982\uff1a dw \u5220\u9664\u5230\u5b57\u7684\u672b\u5c3e daw \u5220\u9664\u4e00\u4e2a\u5355\u8bcd d3aw \u5220\u96643\u4e2a\u5355\u8bcd dw \u5220\u9664\u5230\u5b57\u7684\u5c3e\u90e8 db \u5220\u9664\u5230\u5b57\u7684\u5f00\u59cb dd \u5220\u9664\u4e00\u884c x \u6216 dl \u5220\u9664\u5355\u4e2a\u5b57\u7b26 d0 \u6216 d^ \u4ece\u5f53\u524d\u4f4d\u7f6e\u5220\u9664\u5230\u884c\u7684\u5934\u90e8 d$ \u6216 D \u5220\u9664\u5230\u884c\u5c3e d) \u6216 d} \u4ece\u5f53\u524d\u4f4d\u7f6e\u5220\u9664\u5230\u6bb5\u843d\u5c3e d( \u6216 d{ \u4ece\u5f53\u524d\u4f4d\u7f6e\u5220\u9664\u5230\u6bb5\u843d\u5934 d/text \u5220\u9664\u5230text\u5355\u8bcd\u7684\u4e0b\u4e00\u6b21\u51fa\u73b0 cw \u5220\u9664\u5230\u5b57\u7684\u672b\u5c3e\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f \u63d2\u5165\u6a21\u5f0f\u4e0b, ctrl+H \u5b57\u7b26\u5220\u9664 ctrl+U \u884c\u5220\u9664 ctrl+W \u5b57\u5220\u9664","title":"\u5220\u9664"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_7","text":"\u914d\u5bf9\u7b26\u53f7\u5305\u62ec \"\", (), {} \u7b49 \u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5bf9\u7b26\u53f7\u5185\u7684\u5185\u5bb9\u8fdb\u884c\u64cd\u4f5c\u3002 ci+\u7b26\u53f7 \u66f4\u6539\u914d\u5bf9\u7b26\u53f7\u4e2d\u7684\u6587\u672c\u5185\u5bb9 di+\u7b26\u53f7 \u5220\u9664\u914d\u5bf9\u7b26\u53f7\u4e2d\u7684\u6587\u672c\u5185\u5bb9 yi+\u7b26\u53f7 \u590d\u5236\u914d\u5bf9\u7b26\u53f7\u4e2d\u7684\u6587\u672c\u5185\u5bb9 vi+\u7b26\u53f7 \u9009\u4e2d\u8fd9\u4e9b\u914d\u5bf9\u7b26\u53f7\u4e2d\u7684\u6587\u672c\u5185\u5bb9 \u53e6\u5916\u5982\u679c\u628a\u4e0a\u9762\u7684 i \u6539\u6210 a \u53ef\u4ee5\u8fde\u914d\u5bf9\u7b26\u53f7\u4e00\u8d77\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u8981\u5220\u9664\u53cc\u5f15\u53f7\u5185 \"\" \u5185\u7684\u5185\u5bb9, 111\"222\"333 \uff0c \u5c06\u5149\u6807\u79fb\u5230\u53cc\u5f15\u53f7\u5185\uff0c\u6309\u4e0b di\" ,\u5220\u9664\u53cc\u5f15\u53f7\u5185\u7684\u5185\u5bb9\uff0c\u53d8\u6210 111\"\"333 \uff0c\u82e5\u8981\u8fde\u540c\u53cc\u5f15\u53f7\u4e00\u540c\u5220\u9664\uff0c\u5219\u8981\u6309\u4e0b da\" ,\u6587\u672c\u4f1a\u4fee\u6539\u4e3a\uff1a 111333","title":"\u5bf9\u914d\u5bf9\u7b26\u53f7\u5185\u7684\u5185\u5bb9\u8fdb\u884c\u64cd\u4f5c"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#select-text-inside-a-tag","text":"Tag is the tag in html or xml, for example <div> ... </div> , We can select a text within an html or xml tag by using visual selection v and text object it . Go to normal mode by pressing ESC Type vit from anywhere within the html or xml section This will visually select all text inside the tag. All other text objects can also be used to operate on the text inside the tag vit - select all text inside the tag cit - delete text inside the tag and place in insert mode dit - delete text inside the tag and remain in normal mode cat - delete around tag and place in insert mode dat - delete text around the tag and remain in normal mode","title":"Select text inside a tag"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_8","text":"\\== \u683c\u5f0f\u5316\u5f53\u524d\u884c n+== \u683c\u5f0f\u5316\u5f53\u524d\u548c\u540e\u9762n-1\u884c gg=G \u6216\u8005 = \u683c\u5f0f\u5316\u5168\u6587","title":"\u683c\u5f0f\u5316"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_9","text":"\u63d2\u5165\u6a21\u5f0f\u4e0b\uff1a CTRL+T \u53f3\u7f29\u8fdb CTRL+D \u5de6\u7f29\u8fdb \u547d\u4ee4\u6a21\u5f0f\u4e0b\uff1a > \u589e\u52a0\u7f29\u8fdb, x> \u8868\u793a\u589e\u52a0\u4ee5\u4e0bx\u884c\u7684\u7f29\u8fdb < \u51cf\u5c11\u7f29\u8fdb, x< \u8868\u793a\u51cf\u5c11\u4ee5\u4e0bx\u884c\u7684\u7f29\u8fdb","title":"\u7f29\u8fdb"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_10","text":"\u65b9\u6cd5\u4e00 \u591a\u884c\u6ce8\u91ca\uff1a \u8fdb\u5165\u547d\u4ee4\u884c\u6a21\u5f0f\uff0c\u6309 ctrl + v \u8fdb\u5165 visual block\u6a21\u5f0f\uff0c\u7136\u540e\u6309j\u6216k\u9009\u4e2d\u591a\u884c\uff0c\u628a\u9700\u8981\u6ce8\u91ca\u7684\u884c\u6807\u8bb0\u8d77\u6765\uff0c\u6309\u5927\u5199\u5b57\u6bcdI\uff0c\u518d\u63d2\u5165\u6ce8\u91ca\u7b26\uff0c\u4f8b\u5982 // \uff0c\u6309esc\u952e\u5c31\u4f1a\u5168\u90e8\u6ce8\u91ca\u4e86\u3002 \u53d6\u6d88\u591a\u884c\u6ce8\u91ca\uff1a \u8fdb\u5165\u547d\u4ee4\u884c\u6a21\u5f0f\uff0c\u6309\u00b7ctrl + v\u00b7\u8fdb\u5165 visual block\u6a21\u5f0f\uff0c\u6309\u5b57\u6bcdl\u6a2a\u5411\u9009\u4e2d\u5217\u7684\u4e2a\u6570\uff0c\u4f8b\u5982 \u00b7//\u00b7 \u9700\u8981\u9009\u4e2d2\u5217\uff0c\u6309\u5b57\u6bcdj\uff0c\u6216 \u8005k\u9009\u4e2d\u6ce8\u91ca\u7b26\u53f7\uff0c\u6309d\u952e\u5c31\u53ef\u5220\u9664\u6ce8\u91ca\u7b26\u3002 \u65b9\u6cd5\u4e8c \u66ff\u6362\u547d\u4ee4 \u63d2\u5165\u6ce8\u91ca :\u8d77\u59cb\u884c\u53f7,\u7ed3\u675f\u884c\u53f7s/^/\u6ce8\u91ca\u7b26/g \u4f8b\u5982\uff1a :27,30s#^#//#g \u5c31\u662f\u572827 - 30\u884c\u6dfb\u52a0 // \u6ce8\u91ca` \u53d6\u6d88\u6ce8\u91ca \u00b7:\u8d77\u59cb\u884c\u53f7,\u7ed3\u675f\u884c\u53f7s/^\u6ce8\u91ca\u7b26//g\u00b7 \u4f8b\u5982\uff1a :27,30s#^//##g \u5c31\u662f\u572827 - 30\u884c\u5220\u9664 // \u6ce8\u91ca","title":"\u4ee3\u7801\u6ce8\u91ca"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_11","text":"crl+p \u548c crl+n","title":"\u81ea\u52a8\u8865\u5168"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_12","text":"\u5728\u547d\u4ee4\u884c\u6a21\u5f0f\u4e0b :[g] [address] s/search-string/replacement-string[/option] \u5176\u4e2d addess\uff1a\u4ee3\u8868\u884c s: \u8868\u793a\u66ff\u6362\u5f53\u524d\u5b57\u7b26 S: \u8868\u793a\u66ff\u6362\u5f53\u524d\u884c ~: \u8868\u793a\u4fee\u6539\u5927\u5c0f\u5199 \u4f8b\u5982\uff1a :s/p1/p2/g \u5c06\u5f53\u524d\u884c\u4e2d\u6240\u6709p1\u5747\u7528p2\u66ff\u4ee3 :1,.s/p1/p2/g \u5c06\u5f53\u524d\u884c\u4e4b\u524d\u7684\u6240\u6709\u884c\u7684\u5b57\u7b26\u4e32p1\u66ff\u6362\u4e3a\u5b57\u7b26\u4e32p2 :1,$s/p1/p2/g \u5c06\u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u4e32p1\u66ff\u6362\u4e3a\u5b57\u7b26\u4e32p2 :g/chaper/s/ten/10/ \u5c06\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5305\u542b\u5b57\u7b26\u4e32chaper\u7684\u6240\u6709\u884c\u4e2d\u7684\u5b57\u7b26\u4e32ten\u66ff\u6362\u4e3a\u5b57\u7b26\u4e3210 :%s/<ten>/10/g \u5c06\u6240\u6709\u51fa\u73b0\u7684\u5b57ten\u66ff\u6362\u4e3a\u5b57\u7b26\u4e3210 :.,.+10s/every/each/g \u5c06\u51fa\u73b0\u7684\u4ece\u5f53\u524d\u884c\u5230\u540e\u7eed10\u884c\u5185\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32every\u66ff\u6362\u4e3a\u5b57\u7b26\u4e32each :s/<short\\>/\"&\"/ \u5c06\u5f53\u524d\u884c\u4e2d\u7684\u5b57short\u66ff\u6362\u4e3a\"short\"(\u5373\u5c06\u5f53\u524d\u884c\u4e2d\u7684\u5b57short\u7528\u5f15\u53f7\u62ec\u8d77\u6765) :n1,n2s/p1/p2/g \u5c06\u7b2cn1\u81f3n2\u884c\u4e2d\u6240\u6709p1\u5747\u7528p2\u66ff\u4ee3 :n1,n2 co n3 \u5c06n1\u884c\u5230n2\u884c\u4e4b\u95f4\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u7b2cn3\u884c\u4e0b :n1,n2 m n3 \u5c06n1\u884c\u5230n2\u884c\u4e4b\u95f4\u7684\u5185\u5bb9\u79fb\u81f3\u5230\u7b2cn3\u884c\u4e0b :n1,n2 d \u5c06n1\u884c\u5230n2\u884c\u4e4b\u95f4\u7684\u5185\u5bb9\u5220\u9664","title":"\u66ff\u6362"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_13","text":"/pattern \u4ece\u5149\u6807\u5f00\u59cb\u5904\u5411\u6587\u4ef6\u5c3e\u641c\u7d22pattern ?pattern \u4ece\u5149\u6807\u5f00\u59cb\u5904\u5411\u6587\u4ef6\u9996\u641c\u7d22pattern \u9f20\u6807\u79fb\u52a8\u7684\u4e00\u4e2a\u5355\u8bcd\u4e0a,\u6309 * \u5728\u5168\u6587\u4e2d\u67e5\u627e\u4e0e\u4e4b\u76f8\u540c\u7684\u5355\u8bcd n\uff1a\u5728\u540c\u4e00\u65b9\u5411\u91cd\u590d\u4e0a\u4e00\u6b21\u641c\u7d22\u547d\u4ee4\uff0cN\uff1a\u5728\u53cd\u65b9\u5411\u4e0a\u91cd\u590d\u4e0a\u4e00\u6b21\u641c\u7d22\u547d\u4ee4","title":"\u67e5\u627e"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_14","text":"ma \u8bbe\u7f6e\u4e00\u4e2a\u540d\u5b57\u4e3a a \u7684\u6807\u8bb0 \u2018a (\u5355\u5f15\u53f7+\u6807\u8bb0a)\u5b9a\u4f4d\u5230\u6807\u8bb0a\u7684\u4f4d\u7f6e\u6240\u5728\u884c\u7684\u8d77\u59cb\u4f4d\u7f6e `a(\u53cd\u5f15\u53f7+\u6807\u8bb0a)\u5c06\u5149\u6807\u5b9a\u4f4d\u5230\u6807\u8bb0a\u6240\u5728\u7684\u7684\u7cbe\u786e\u4f4d\u7f6e d'a \u5220\u9664\u5f53\u524d\u884c\u5230\u6807\u8bb0a\u6240\u5728\u884c\u4e4b\u95f4\u7684\u6587\u672c d a ` \u5220\u9664\u5f53\u524d\u884c\u5230a\u6807\u8bb0\u5904\u7684\u6240\u6709\u6587\u672c \u5728\u547d\u4ee4\u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u884c\u53f7\u4f7f\u7528 \uff0c\u4f8b\u5982\uff1a 'm,.s/the/THE/g","title":"\u6807\u8bb0"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_15","text":":e[!] [filename] \u7f16\u8f91filename\u6307\u5b9a\u7684\u6587\u4ef6\uff0c\u5982\u679c\u4e0d\u6307\u5b9afilename\uff0c\u7ee7\u7eed\u7f16\u8f91\u5f53\u524d\u6587\u4ef6(load\u6587\u4ef6\u5230\u5f53\u524d\u7f13\u51b2\u533a\u5373\u7f16\u8f91\u533a\uff0c\u53ef\u505a\u5237\u65b0\u6587\u4ef6\u7528) :e# \u5173\u95ed\u5f53\u524d\u6587\u4ef6\uff0c\u6253\u5f00\u4e0a\u6b21\u7f16\u8f91\u7684\u6587\u4ef6 :n filename \u6253\u5f00\u65b0\u6587\u4ef6","title":"\u7f16\u8f91\u6307\u5b9a\u6587\u4ef6"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#vimshell","text":":sh \u8fdb\u5165\u547d\u4ee4\u884c\u6a21\u5f0f\uff0c \u6309 CONTROL+D \u6216\u8f93\u5165 exit \u547d\u4ee4\u9000\u51fa\u547d\u4ee4\u6a21\u5f0f :!command ,vim\u4e2d\u6267\u884ccommand\u547d\u4ee4 !!command ,\u6267\u884ccommand\u547d\u4ee4\uff0c\u5e76\u628a\u8f93\u51fa\u7ed3\u679c\u66ff\u6362\u5f53\u524d\u884c !+\u884c\u5730\u5740+ command ,\u5bf9\u6307\u5b9a\u884c\u6267\u884ccommand\u547d\u4ee4\uff0c\u5e76\u7528\u8f93\u51fa\u7ed3\u679c\u66ff\u6362","title":"vim\u4e2d\u6267\u884cshell"},{"location":"Vim/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/#_16","text":". \u91cd\u590d\u4e0a\u6b21\u64cd\u4f5c \u200b","title":"\u91cd\u590d\u4e0a\u6b21\u547d\u4ee4"}]}